<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-21T04:58:45+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">1471. The k Strongest Values in an Array</title><link href="https://zhengstar94.github.io//blog/2025/TheKStrongestValuesInAnArray/" rel="alternate" type="text/html" title="1471. The k Strongest Values in an Array"/><published>2025-02-21T00:00:00+00:00</published><updated>2025-02-21T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/TheKStrongestValuesInAnArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/TheKStrongestValuesInAnArray/"><![CDATA[<ul> <li>Given an array of integers <code class="language-plaintext highlighter-rouge">arr</code> and an integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>A value <code class="language-plaintext highlighter-rouge">arr[i]</code> is said to be stronger than a value <code class="language-plaintext highlighter-rouge">arr[j]</code> if <code class="language-plaintext highlighter-rouge">|arr[i] - m| &gt; |arr[j] - m|</code> where <code class="language-plaintext highlighter-rouge">m</code> is the <strong>median</strong> of the array. If <code class="language-plaintext highlighter-rouge">|arr[i] - m| == |arr[j] - m|</code>, then <code class="language-plaintext highlighter-rouge">arr[i]</code> is said to be stronger than <code class="language-plaintext highlighter-rouge">arr[j]</code> if <code class="language-plaintext highlighter-rouge">arr[i] &gt; arr[j]</code>.</li> <li>Return <em>a list of the strongest <code class="language-plaintext highlighter-rouge">k</code></em> values in the array. return the answer <strong>in any arbitrary order</strong>.</li> <li><strong>Median</strong> is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position <code class="language-plaintext highlighter-rouge">((n - 1) / 2)</code> in the sorted list <strong>(0-indexed)</strong>. <ul> <li>For <code class="language-plaintext highlighter-rouge">arr = [6, -3, 7, 2, 11]</code>, <code class="language-plaintext highlighter-rouge">n = 5</code> and the median is obtained by sorting the array <code class="language-plaintext highlighter-rouge">arr = [-3, 2, 6, 7, 11]</code> and the median is <code class="language-plaintext highlighter-rouge">arr[m]</code> where <code class="language-plaintext highlighter-rouge">m = ((5 - 1) / 2) = 2</code>. The median is <code class="language-plaintext highlighter-rouge">6</code>.</li> <li>For <code class="language-plaintext highlighter-rouge">arr = [-7, 22, 17, 3]</code>, <code class="language-plaintext highlighter-rouge">n = 4</code> and the median is obtained by sorting the array <code class="language-plaintext highlighter-rouge">arr = [-7, 3, 17, 22]</code> and the median is <code class="language-plaintext highlighter-rouge">arr[m]</code> where <code class="language-plaintext highlighter-rouge">m = ((4 - 1) / 2) = 1</code>. The median is <code class="language-plaintext highlighter-rouge">3</code>.</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,2,3,4,5], k = 2
Output: [5,1]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.
Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 &gt; 1.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,1,3,5,5], k = 2
Output: [5,5]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [6,7,11,7,6,8], k = 5
Output: [11,8,6,6,7]
Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].
Any permutation of [11,8,6,6,7] is accepted.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(k) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/21
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TheKStrongestValuesInAnArray</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getStrongest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Sort the array to find median</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Calculate median: for array of length n, median is at position (n-1)/2</span>
        <span class="kt">int</span> <span class="n">median</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">];</span>

        <span class="c1">// Initialize result array to store k strongest elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>

        <span class="c1">// Initialize two pointers: left points to start, right points to end</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Continue until we find k strongest elements</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Calculate absolute difference from median for both pointers</span>
            <span class="kt">int</span> <span class="n">leftDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">-</span> <span class="n">median</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">rightDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">-</span> <span class="n">median</span><span class="o">);</span>

            <span class="c1">// If left element has greater difference, it's stronger</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">leftDiff</span> <span class="o">&gt;</span> <span class="n">rightDiff</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="c1">// If right element has greater difference, it's stronger</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">leftDiff</span> <span class="o">&lt;</span> <span class="n">rightDiff</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                <span class="n">right</span><span class="o">--;</span>
            <span class="o">}</span>
            <span class="c1">// If differences are equal, compare actual values</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// When differences are equal, larger value is stronger</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
                    <span class="n">left</span><span class="o">++;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
                    <span class="n">right</span><span class="o">--;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Regular case with distinct elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">getStrongest</span><span class="o">(</span><span class="n">arr1</span><span class="o">,</span> <span class="n">k1</span><span class="o">)));</span>

        <span class="c1">// Test Case 2: Array with duplicate elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">getStrongest</span><span class="o">(</span><span class="n">arr2</span><span class="o">,</span> <span class="n">k2</span><span class="o">)));</span>

        <span class="c1">// Test Case 3: Larger array with more elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">8</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k3</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">getStrongest</span><span class="o">(</span><span class="n">arr3</span><span class="o">,</span> <span class="n">k3</span><span class="o">)));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode TwoPointers"/><category term="Medium"/><summary type="html"><![CDATA[Given an array of integers arr and an integer k. A value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| &gt; |arr[j] - m| where m is the median of the array. If |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] &gt; arr[j]. Return a list of the strongest k values in the array. return the answer in any arbitrary order. Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed). For arr=[6, -3, 7, 2, 11], n=5 and the median is obtained by sorting the array arr=[-3, 2, 6, 7, 11] and the median is arr[m] where m=((5 - 1) / 2) = 2. The median is 6. For arr=[-7, 22, 17, 3], n=4 and the median is obtained by sorting the array arr=[-7, 3, 17, 22] and the median is arr[m] where m=((4 - 1) / 2) = 1. The median is 3.]]></summary></entry><entry><title type="html">1980. Find Unique Binary String</title><link href="https://zhengstar94.github.io//blog/2025/FindUniqueBinaryString/" rel="alternate" type="text/html" title="1980. Find Unique Binary String"/><published>2025-02-20T00:00:00+00:00</published><updated>2025-02-20T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/FindUniqueBinaryString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/FindUniqueBinaryString/"><![CDATA[<ul> <li>Given an array of strings <code class="language-plaintext highlighter-rouge">nums</code> containing <code class="language-plaintext highlighter-rouge">n</code> <strong>unique</strong> binary strings each of length <code class="language-plaintext highlighter-rouge">n</code>, return <em>a binary string of length</em> <code class="language-plaintext highlighter-rouge">n</code> <em>that <strong>does not appear</strong> in</em> <code class="language-plaintext highlighter-rouge">nums</code><em>. If there are multiple answers, you may return <strong>any</strong> of them</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/20
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindUniqueBinaryString</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">findDifferentBinaryString</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="c1">// Iterate through each string's diagonal position (i,i)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Flip the bit at diagonal position:</span>
            <span class="c1">// If current bit is '0', append '1'</span>
            <span class="c1">// If current bit is '1', append '0'</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'0'</span> <span class="o">?</span> <span class="sc">'1'</span> <span class="o">:</span> <span class="sc">'0'</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Binary strings of length 2</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"01"</span><span class="o">,</span> <span class="s">"10"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">findDifferentBinaryString</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span> <span class="c1">// Expected output: "11"</span>

        <span class="c1">// Test Case 2: Another set of binary strings of length 2</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"00"</span><span class="o">,</span> <span class="s">"01"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">findDifferentBinaryString</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span> <span class="c1">// Expected output: "11"</span>

        <span class="c1">// Test Case 3: Binary strings of length 3</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"111"</span><span class="o">,</span> <span class="s">"011"</span><span class="o">,</span> <span class="s">"001"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">findDifferentBinaryString</span><span class="o">(</span><span class="n">nums3</span><span class="o">));</span> <span class="c1">// Expected output: "101"</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.]]></summary></entry><entry><title type="html">2105. Watering Plants II</title><link href="https://zhengstar94.github.io//blog/2025/WateringPlantsII/" rel="alternate" type="text/html" title="2105. Watering Plants II"/><published>2025-02-20T00:00:00+00:00</published><updated>2025-02-20T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/WateringPlantsII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/WateringPlantsII/"><![CDATA[<ul> <li>Alice and Bob want to water <code class="language-plaintext highlighter-rouge">n</code> plants in their garden. The plants are arranged in a row and are labeled from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">n - 1</code> from left to right where the <code class="language-plaintext highlighter-rouge">ith</code> plant is located at <code class="language-plaintext highlighter-rouge">x = i</code>.</li> <li>Each plant needs a specific amount of water. Alice and Bob have a watering can each, <strong>initially full</strong>. They water the plants in the following way: <ul> <li>Alice waters the plants in order from <strong>left to right</strong>, starting from the <code class="language-plaintext highlighter-rouge">0th</code> plant. Bob waters the plants in order from <strong>right to left</strong>, starting from the <code class="language-plaintext highlighter-rouge">(n - 1)th</code> plant. They begin watering the plants <strong>simultaneously</strong>.</li> <li>It takes the same amount of time to water each plant regardless of how much water it needs.</li> <li>Alice/Bob <strong>must</strong> water the plant if they have enough in their can to <strong>fully</strong> water it. Otherwise, they <strong>first</strong> refill their can (instantaneously) then water the plant.</li> <li>In case both Alice and Bob reach the same plant, the one with <strong>more</strong> water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.</li> </ul> </li> <li>Given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">plants</code> of <code class="language-plaintext highlighter-rouge">n</code> integers, where <code class="language-plaintext highlighter-rouge">plants[i]</code> is the amount of water the <code class="language-plaintext highlighter-rouge">ith</code> plant needs, and two integers <code class="language-plaintext highlighter-rouge">capacityA</code> and <code class="language-plaintext highlighter-rouge">capacityB</code> representing the capacities of Alice’s and Bob’s watering cans respectively, return <em>the <strong>number of times</strong> they have to refill to water all the plants</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: plants = [2,2,3,3], capacityA = 5, capacityB = 5
Output: 1
Explanation:
- Initially, Alice and Bob have 5 units of water each in their watering cans.
- Alice waters plant 0, Bob waters plant 3.
- Alice and Bob now have 3 units and 2 units of water respectively.
- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.
So, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: plants = [2,2,3,3], capacityA = 3, capacityB = 4
Output: 2
Explanation:
- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.
- Alice waters plant 0, Bob waters plant 3.
- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.
- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.
So, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: plants = [5], capacityA = 10, capacityB = 8
Output: 0
Explanation:
- There is only one plant.
- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.
So, the total number of times they have to refill is 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/20
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WateringPlantsII</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minimumRefill</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">plants</span><span class="o">,</span> <span class="kt">int</span> <span class="n">capacityA</span><span class="o">,</span> <span class="kt">int</span> <span class="n">capacityB</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Counter for total refills needed</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>    <span class="c1">// Left pointer for Alice</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">plants</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>  <span class="c1">// Right pointer for Bob</span>

        <span class="kt">int</span> <span class="n">canA</span> <span class="o">=</span> <span class="n">capacityA</span><span class="o">;</span>  <span class="c1">// Current water amount in Alice's can</span>
        <span class="kt">int</span> <span class="n">canB</span> <span class="o">=</span> <span class="n">capacityB</span><span class="o">;</span>  <span class="c1">// Current water amount in Bob's can</span>

        <span class="c1">// Process while Alice and Bob haven't met</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Check if Alice needs a refill</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">canA</span> <span class="o">&lt;</span> <span class="n">plants</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">canA</span> <span class="o">=</span> <span class="n">capacityA</span><span class="o">;</span>  <span class="c1">// Refill Alice's can</span>
                <span class="n">ans</span><span class="o">++;</span>  <span class="c1">// Increment refill counter</span>
            <span class="o">}</span>
            <span class="n">canA</span> <span class="o">-=</span> <span class="n">plants</span><span class="o">[</span><span class="n">i</span><span class="o">++];</span>  <span class="c1">// Water the plant and move Alice forward</span>

            <span class="c1">// Check if Bob needs a refill</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">canB</span> <span class="o">&lt;</span> <span class="n">plants</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">canB</span> <span class="o">=</span> <span class="n">capacityB</span><span class="o">;</span>  <span class="c1">// Refill Bob's can</span>
                <span class="n">ans</span><span class="o">++;</span>  <span class="c1">// Increment refill counter</span>
            <span class="o">}</span>
            <span class="n">canB</span> <span class="o">-=</span> <span class="n">plants</span><span class="o">[</span><span class="n">j</span><span class="o">--];</span>  <span class="c1">// Water the plant and move Bob backward</span>
        <span class="o">}</span>

        <span class="c1">// Handle middle plant (when array length is odd)</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">maxWater</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">canA</span><span class="o">,</span> <span class="n">canB</span><span class="o">);</span>  <span class="c1">// Use can with more water</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">maxWater</span> <span class="o">&lt;</span> <span class="n">plants</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">ans</span><span class="o">++;</span>  <span class="c1">// Need refill if neither can has enough water</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Equal capacity cans</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">plants1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">capacityA1</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">capacityB1</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">minimumRefill</span><span class="o">(</span><span class="n">plants1</span><span class="o">,</span> <span class="n">capacityA1</span><span class="o">,</span> <span class="n">capacityB1</span><span class="o">));</span> <span class="c1">// Expected: 1</span>

        <span class="c1">// Test Case 2: Different capacity cans</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">plants2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">capacityA2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">capacityB2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">minimumRefill</span><span class="o">(</span><span class="n">plants2</span><span class="o">,</span> <span class="n">capacityA2</span><span class="o">,</span> <span class="n">capacityB2</span><span class="o">));</span> <span class="c1">// Expected: 2</span>

        <span class="c1">// Test Case 3: Single plant case</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">plants3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">capacityA3</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">capacityB3</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">minimumRefill</span><span class="o">(</span><span class="n">plants3</span><span class="o">,</span> <span class="n">capacityA3</span><span class="o">,</span> <span class="n">capacityB3</span><span class="o">));</span> <span class="c1">// Expected: 0</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode TwoPointers"/><category term="Medium"/><summary type="html"><![CDATA[Alice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x=i. Each plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way: Alice waters the plants in order from left to right, starting from the 0th plant. Bob waters the plants in order from right to left, starting from the (n - 1)th plant. They begin watering the plants simultaneously. It takes the same amount of time to water each plant regardless of how much water it needs. Alice/Bob must water the plant if they have enough in their can to fully water it. Otherwise, they first refill their can (instantaneously) then water the plant. In case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant. Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacityA and capacityB representing the capacities of Alice’s and Bob’s watering cans respectively, return the number of times they have to refill to water all the plants.]]></summary></entry><entry><title type="html">2375. Construct Smallest Number From DI String</title><link href="https://zhengstar94.github.io//blog/2025/ConstructSmallestNumberFromDIString/" rel="alternate" type="text/html" title="2375. Construct Smallest Number From DI String"/><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ConstructSmallestNumberFromDIString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ConstructSmallestNumberFromDIString/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> string <code class="language-plaintext highlighter-rouge">pattern</code> of length <code class="language-plaintext highlighter-rouge">n</code> consisting of the characters <code class="language-plaintext highlighter-rouge">'I'</code> meaning <strong>increasing</strong> and <code class="language-plaintext highlighter-rouge">'D'</code> meaning <strong>decreasing</strong>.</li> <li>A <strong>0-indexed</strong> string <code class="language-plaintext highlighter-rouge">num</code> of length <code class="language-plaintext highlighter-rouge">n + 1</code> is created using the following conditions: <ul> <li><code class="language-plaintext highlighter-rouge">num</code> consists of the digits <code class="language-plaintext highlighter-rouge">'1'</code> to <code class="language-plaintext highlighter-rouge">'9'</code>, where each digit is used <strong>at most</strong> once.</li> <li>If <code class="language-plaintext highlighter-rouge">pattern[i] == 'I'</code>, then <code class="language-plaintext highlighter-rouge">num[i] &lt; num[i + 1]</code>.</li> <li>If <code class="language-plaintext highlighter-rouge">pattern[i] == 'D'</code>, then <code class="language-plaintext highlighter-rouge">num[i] &gt; num[i + 1]</code>.</li> </ul> </li> <li>Return <em>the lexicographically <strong>smallest</strong> possible string</em> <code class="language-plaintext highlighter-rouge">num</code> <em>that meets the conditions.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: pattern = "IIIDIDDD"
Output: "123549876"
Explanation:
At indices 0, 1, 2, and 4 we must have that num[i] &lt; num[i+1].
At indices 3, 5, 6, and 7 we must have that num[i] &gt; num[i+1].
Some possible values of num are "245639871", "135749862", and "123849765".
It can be proven that "123549876" is the smallest possible num that meets the conditions.
Note that "123414321" is not possible because the digit '1' is used more than once.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: pattern = "DDD"
Output: "4321"
Explanation:
Some possible values of num are "9876", "7321", and "8742".
It can be proven that "4321" is the smallest possible num that meets the conditions.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Stack</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>

<span class="cm">/**
 * Author: zhengxingxing
 * Date: 2025/02/19
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConstructSmallestNumberFromDIString</span> <span class="o">{</span>
    <span class="c1">// Method to construct the smallest number based on the given pattern</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">smallestNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span> <span class="c1">// StringBuilder to store the final result</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>  <span class="c1">// Stack to temporarily store digits</span>

        <span class="c1">// Iterate through the pattern (including one extra pass for the last number)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// Push the current number (i+1) onto the stack.</span>

            <span class="c1">// If we encounter 'I' (increasing) in the pattern, OR we reach the end of the pattern:</span>
            <span class="c1">// Pop all numbers from the stack and append them to the result.</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">||</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'I'</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// Return the constructed smallest number as a string</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// Main method - serves as an entry point to test the program</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Example test cases</span>
        <span class="nc">String</span> <span class="n">pattern1</span> <span class="o">=</span> <span class="s">"IIIDIDDD"</span><span class="o">;</span> <span class="c1">// Pattern: Increasing-Increasing-Increasing-Decreasing-Increasing-Decreasing-Decreasing-Decreasing</span>
        <span class="nc">String</span> <span class="n">pattern2</span> <span class="o">=</span> <span class="s">"DDD"</span><span class="o">;</span>      <span class="c1">// Pattern: Decreasing-Decreasing-Decreasing</span>

        <span class="c1">// Outputs the smallest numbers corresponding to each pattern</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">pattern1</span> <span class="o">+</span> <span class="s">" Output: "</span> <span class="o">+</span> <span class="n">smallestNumber</span><span class="o">(</span><span class="n">pattern1</span><span class="o">));</span> <span class="c1">// Output: "123549876"</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">pattern2</span> <span class="o">+</span> <span class="s">" Output: "</span> <span class="o">+</span> <span class="n">smallestNumber</span><span class="o">(</span><span class="n">pattern2</span><span class="o">));</span> <span class="c1">// Output: "4321"</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Stack"/><category term="Medium"/><summary type="html"><![CDATA[You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing. A 0-indexed string num of length n + 1 is created using the following conditions: num consists of the digits '1' to '9', where each digit is used at most once. If pattern[i] == 'I', then num[i] &lt; num[i + 1]. If pattern[i] == 'D', then num[i] &gt; num[i + 1]. Return the lexicographically smallest possible string num that meets the conditions.]]></summary></entry><entry><title type="html">624. Maximum Distance in Arrays</title><link href="https://zhengstar94.github.io//blog/2025/MaximumDistanceInArrays/" rel="alternate" type="text/html" title="624. Maximum Distance in Arrays"/><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MaximumDistanceInArrays</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MaximumDistanceInArrays/"><![CDATA[<ul> <li>You are given <code class="language-plaintext highlighter-rouge">m</code> <code class="language-plaintext highlighter-rouge">arrays</code>, where each array is sorted in <strong>ascending order</strong>.</li> <li>You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> to be their absolute difference <code class="language-plaintext highlighter-rouge">|a - b|</code>.</li> <li>Return <em>the maximum distance</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arrays = [[1,2,3],[4,5],[1,2,3]]
Output: 4
Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arrays = [[1],[1]]
Output: 0
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/19
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumDistanceInArrays</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maxDistance</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases: if input is null or has less than 2 arrays</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arrays</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">arrays</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Initialize maximum distance found so far</span>
        <span class="kt">int</span> <span class="n">maxDistance</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Initialize minVal and maxVal with the first array's values</span>
        <span class="c1">// Since arrays are sorted, first element is minimum and last element is maximum</span>
        <span class="kt">int</span> <span class="n">minVal</span> <span class="o">=</span> <span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>                      <span class="c1">// Get minimum of first array</span>
        <span class="kt">int</span> <span class="n">maxVal</span> <span class="o">=</span> <span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// Get maximum of first array</span>

        <span class="c1">// Start from second array (index 1) since we've used first array for initialization</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrays</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">array</span> <span class="o">=</span> <span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

            <span class="c1">// Get current array's minimum (first element) and maximum (last element)</span>
            <span class="kt">int</span> <span class="n">currentMin</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>                      <span class="c1">// Current array's minimum</span>
            <span class="kt">int</span> <span class="n">currentMax</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>       <span class="c1">// Current array's maximum</span>

            <span class="cm">/* Key Part 1: Calculate maximum distance
             * We need to compare two possibilities:
             * 1. currentMax - minVal: Distance between current array's maximum and previous minimum
             *    Example: If previous minVal = 1 and currentMax = 5, distance = |5-1| = 4
             * 2. currentMin - maxVal: Distance between current array's minimum and previous maximum
             *    Example: If previous maxVal = 3 and currentMin = 4, distance = |4-3| = 1
             */</span>
            <span class="n">maxDistance</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxDistance</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">currentMax</span> <span class="o">-</span> <span class="n">minVal</span><span class="o">));</span>
            <span class="n">maxDistance</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxDistance</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">currentMin</span> <span class="o">-</span> <span class="n">maxVal</span><span class="o">));</span>

            <span class="cm">/* Key Part 2: Update global minimum and maximum values
             * After processing current array, update global min and max for next iterations
             * minVal: Keep track of the smallest value seen so far
             * maxVal: Keep track of the largest value seen so far
             *
             * Example:
             * If current state: minVal = 1, maxVal = 3
             * Current array: [4,5]
             * After update: minVal = min(1,4) = 1, maxVal = max(3,5) = 5
             */</span>
            <span class="n">minVal</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minVal</span><span class="o">,</span> <span class="n">currentMin</span><span class="o">);</span>    <span class="c1">// Update global minimum</span>
            <span class="n">maxVal</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxVal</span><span class="o">,</span> <span class="n">currentMax</span><span class="o">);</span>    <span class="c1">// Update global maximum</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">maxDistance</span><span class="o">;</span>    <span class="c1">// Return the maximum distance found</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Example with three arrays</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">arrays1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>     <span class="c1">// First array</span>
        <span class="n">arrays1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>        <span class="c1">// Second array</span>
        <span class="n">arrays1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>     <span class="c1">// Third array</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">arrays1</span> <span class="o">+</span> <span class="s">" -&gt; Output: "</span> <span class="o">+</span> <span class="n">maxDistance</span><span class="o">(</span><span class="n">arrays1</span><span class="o">));</span> <span class="c1">// Expected: 4</span>

        <span class="c1">// Test Case 2: Minimum case with two arrays</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">arrays2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>           <span class="c1">// First array</span>
        <span class="n">arrays2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>           <span class="c1">// Second array</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">arrays2</span> <span class="o">+</span> <span class="s">" -&gt; Output: "</span> <span class="o">+</span> <span class="n">maxDistance</span><span class="o">(</span><span class="n">arrays2</span><span class="o">));</span> <span class="c1">// Expected: 0</span>

        <span class="c1">// Test Case 3: Example with increasing values</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">arrays3</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>        <span class="c1">// First array</span>
        <span class="n">arrays3</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">8</span><span class="o">));</span>     <span class="c1">// Second array</span>
        <span class="n">arrays3</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">12</span><span class="o">));</span>      <span class="c1">// Third array</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">arrays3</span> <span class="o">+</span> <span class="s">" -&gt; Output: "</span> <span class="o">+</span> <span class="n">maxDistance</span><span class="o">(</span><span class="n">arrays3</span><span class="o">));</span> <span class="c1">// Expected: 11</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given m arrays, where each array is sorted in ascending order. You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|. Return the maximum distance.]]></summary></entry><entry><title type="html">1750. Minimum Length of String After Deleting Similar Ends</title><link href="https://zhengstar94.github.io//blog/2025/MinimumLengthOfStringAfterDeletingSimilarEnds/" rel="alternate" type="text/html" title="1750. Minimum Length of String After Deleting Similar Ends"/><published>2025-02-18T00:00:00+00:00</published><updated>2025-02-18T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MinimumLengthOfStringAfterDeletingSimilarEnds</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MinimumLengthOfStringAfterDeletingSimilarEnds/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code> consisting only of characters <code class="language-plaintext highlighter-rouge">'a'</code>, <code class="language-plaintext highlighter-rouge">'b'</code>, and <code class="language-plaintext highlighter-rouge">'c'</code>. You are asked to apply the following algorithm on the string any number of times: <ol> <li>Pick a <strong>non-empty</strong> prefix from the string <code class="language-plaintext highlighter-rouge">s</code> where all the characters in the prefix are equal.</li> <li>Pick a <strong>non-empty</strong> suffix from the string <code class="language-plaintext highlighter-rouge">s</code> where all the characters in this suffix are equal.</li> <li>The prefix and the suffix should not intersect at any index.</li> <li>The characters from the prefix and suffix must be the same.</li> <li>Delete both the prefix and the suffix.</li> </ol> </li> <li>Return <em>the <strong>minimum length</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code> <em>after performing the above operation any number of times (possibly zero times)</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "ca"
Output: 2
Explanation: You can't remove any characters, so the string stays as is.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "cabaabac"
Output: 0
Explanation: An optimal sequence of operations is:
- Take prefix = "c" and suffix = "c" and remove them, s = "abaaba".
- Take prefix = "a" and suffix = "a" and remove them, s = "baab".
- Take prefix = "b" and suffix = "b" and remove them, s = "aa".
- Take prefix = "a" and suffix = "a" and remove them, s = "".
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aabccabba"
Output: 3
Explanation: An optimal sequence of operations is:
- Take prefix = "aa" and suffix = "a" and remove them, s = "bccabb".
- Take prefix = "b" and suffix = "bb" and remove them, s = "cca".
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/18
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumLengthOfStringAfterDeletingSimilarEnds</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minimumLength</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize two pointers</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Continue while pointers haven't met and characters at both ends are same</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">))</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">current</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">);</span>

            <span class="c1">// Move left pointer while same character continues</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">==</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Move right pointer while same character continues</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">)</span> <span class="o">==</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">right</span><span class="o">--;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return remaining length</span>
        <span class="k">return</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"ca"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">s1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s1</span><span class="o">));</span>  <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"cabaabac"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2: "</span> <span class="o">+</span> <span class="n">s2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span>  <span class="c1">// Expected output: 0</span>

        <span class="c1">// Test case 3</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"aabccabba"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 3: "</span> <span class="o">+</span> <span class="n">s3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s3</span><span class="o">));</span>  <span class="c1">// Expected output: 3</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="s">"bbbbbbbbbbbbbbbbbbb"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 4: "</span> <span class="o">+</span> <span class="n">s4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s4</span><span class="o">));</span>  <span class="c1">// Expected output: 0</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode TwoPointers"/><category term="Medium"/><summary type="html"><![CDATA[Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times: Pick a non-empty prefix from the string s where all the characters in the prefix are equal. Pick a non-empty suffix from the string s where all the characters in this suffix are equal. The prefix and the suffix should not intersect at any index. The characters from the prefix and suffix must be the same. Delete both the prefix and the suffix. Return the minimum length of s after performing the above operation any number of times (possibly zero times).]]></summary></entry><entry><title type="html">344. Reverse String</title><link href="https://zhengstar94.github.io//blog/2025/ReverseString/" rel="alternate" type="text/html" title="344. Reverse String"/><published>2025-02-18T00:00:00+00:00</published><updated>2025-02-18T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ReverseString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ReverseString/"><![CDATA[<ul> <li>Write a function that reverses a string. The input string is given as an array of characters <code class="language-plaintext highlighter-rouge">s</code>.</li> <li>You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a> with <code class="language-plaintext highlighter-rouge">O(1)</code> extra memory.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/18
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReverseString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">reverseString</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Swap characters from both ends until pointers meet in middle &lt;sup data-citation="3" className="inline select-none [&amp;&gt;a]:rounded-2xl [&amp;&gt;a]:border [&amp;&gt;a]:px-1.5 [&amp;&gt;a]:py-0.5 [&amp;&gt;a]:transition-colors shadow [&amp;&gt;a]:bg-ds-bg-subtle [&amp;&gt;a]:text-xs [&amp;&gt;svg]:w-4 [&amp;&gt;svg]:h-4 relative -top-[2px] citation-shimmer"&gt;&lt;a href="https://codegym.cc/groups/posts/1015-different-ways-to-reverse-a-string-in-java"&gt;3&lt;/a&gt;&lt;/sup&gt;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Swap characters at left and right pointers</span>
            <span class="kt">char</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
            <span class="n">s</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
            <span class="n">s</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>

            <span class="n">left</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">--;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Original string: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
        <span class="n">reverseString</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"After reverse: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">"umbrella"</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Original string: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str2</span><span class="o">);</span>
        <span class="n">reverseString</span><span class="o">(</span><span class="n">str2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"After reverse: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode TwoPointers"/><category term="Easy"/><summary type="html"><![CDATA[Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.]]></summary></entry><entry><title type="html">1287. Element Appearing More Than 25% In Sorted Array</title><link href="https://zhengstar94.github.io//blog/2025/ElementAppearingMoreThan25PercentInSortedArray/" rel="alternate" type="text/html" title="1287. Element Appearing More Than 25% In Sorted Array"/><published>2025-02-17T00:00:00+00:00</published><updated>2025-02-17T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ElementAppearingMoreThan25PercentInSortedArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ElementAppearingMoreThan25PercentInSortedArray/"><![CDATA[<ul> <li>Given an integer array <strong>sorted</strong> in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,1]
Output: 1
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/17
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElementAppearingMoreThan25PercentInSortedArray</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findSpecialInteger</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of input array</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Calculate quarter of array length</span>
        <span class="c1">// This is our window size as element must appear more than 25%</span>
        <span class="kt">int</span> <span class="n">quarter</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">4</span><span class="o">;</span>

        <span class="c1">// Iterate through array until (n - quarter)</span>
        <span class="c1">// This ensures we don't get ArrayIndexOutOfBounds when checking arr[i + quarter]</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">quarter</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// If current element equals element at quarter distance ahead</span>
            <span class="c1">// We found our answer as it spans more than 25% of array</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">quarter</span><span class="o">])</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return last element for special cases:</span>
        <span class="c1">// 1. When array length is very small (≤ 4)</span>
        <span class="c1">// 2. When all elements are the same</span>
        <span class="c1">// This works because array is sorted and answer must exist</span>
        <span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Element appears in middle of array</span>
        <span class="c1">// Expected output: 6 (appears 4 times, which is more than 25% of 9)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">input1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">10</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findSpecialInteger</span><span class="o">(</span><span class="n">input1</span><span class="o">));</span>

        <span class="c1">// Test case 2: Minimal array with two same elements</span>
        <span class="c1">// Expected output: 1 (appears 2 times, which is 100% of array)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">input2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findSpecialInteger</span><span class="o">(</span><span class="n">input2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Element appears at the beginning</span>
        <span class="c1">// Expected output: 2 (appears 4 times, which is more than 25% of 7)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">input3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findSpecialInteger</span><span class="o">(</span><span class="n">input3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.]]></summary></entry><entry><title type="html">(Review)1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</title><link href="https://zhengstar94.github.io//blog/2025/LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit/" rel="alternate" type="text/html" title="(Review)1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit"/><published>2025-02-16T00:00:00+00:00</published><updated>2025-02-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit/"><![CDATA[<ul> <li>Given an array of integers <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">limit</code>, return the size of the longest <strong>non-empty</strong> subarray such that the absolute difference between any two elements of this subarray is less than or equal to <code class="language-plaintext highlighter-rouge">limit</code><em>.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 &lt;= 4.
[8,2] with maximum absolute diff |8-2| = 6 &gt; 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 &gt; 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 &gt; 4.
[2] with maximum absolute diff |2-2| = 0 &lt;= 4.
[2,4] with maximum absolute diff |2-4| = 2 &lt;= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 &gt; 4.
[4] with maximum absolute diff |4-4| = 0 &lt;= 4.
[4,7] with maximum absolute diff |4-7| = 3 &lt;= 4.
[7] with maximum absolute diff |7-7| = 0 &lt;= 4. 
Therefore, the size of the longest subarray is 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 &lt;= 5.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow.DynamicSlidingWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">longestSubarray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Monotonic decreasing deque to maintain window maximum</span>
        <span class="c1">// Elements are stored in decreasing order, so first element is always the maximum</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">maxDeque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Monotonic increasing deque to maintain window minimum</span>
        <span class="c1">// Elements are stored in increasing order, so first element is always the minimum</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">minDeque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Left pointer of the sliding window</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Length of the longest valid subarray found so far</span>
        <span class="kt">int</span> <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Right pointer iterates through the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Maintain the monotonic decreasing property of maxDeque</span>
            <span class="c1">// Remove all elements smaller than the current element from the back</span>
            <span class="c1">// This ensures that maxDeque.peekFirst() always gives the maximum element</span>
            <span class="k">while</span> <span class="o">(!</span><span class="n">maxDeque</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">maxDeque</span><span class="o">.</span><span class="na">peekLast</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">maxDeque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">maxDeque</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]);</span>

            <span class="c1">// Maintain the monotonic increasing property of minDeque</span>
            <span class="c1">// Remove all elements larger than the current element from the back</span>
            <span class="c1">// This ensures that minDeque.peekFirst() always gives the minimum element</span>
            <span class="k">while</span> <span class="o">(!</span><span class="n">minDeque</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">minDeque</span><span class="o">.</span><span class="na">peekLast</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">minDeque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">minDeque</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]);</span>

            <span class="c1">// Shrink the window if the difference between max and min exceeds limit</span>
            <span class="c1">// Keep shrinking until the window becomes valid or empty</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">maxDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">()</span> <span class="o">-</span> <span class="n">minDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the leftmost element is the current maximum, remove it from maxDeque</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">==</span> <span class="n">maxDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">maxDeque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="c1">// If the leftmost element is the current minimum, remove it from minDeque</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">==</span> <span class="n">minDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">minDeque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="c1">// Move the left pointer to shrink the window</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Update the maximum length if current window is valid</span>
            <span class="c1">// Current window size is (right - left + 1)</span>
            <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">maxLen</span><span class="o">;</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Expected output: 2</span>
        <span class="c1">// Valid subarrays are [2,4] and [4,7] with max diff &lt;= 4</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">8</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">limit1</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">longestSubarray</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">limit1</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Expected output: 4</span>
        <span class="c1">// Longest valid subarray is [2,4,7,2] with max diff &lt;= 5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">limit2</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">longestSubarray</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">limit2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: Expected output: 3</span>
        <span class="c1">// Longest valid subarray contains equal elements (either [2,2,2] or [4,4,4])</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">limit3</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">longestSubarray</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">limit3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode DynamicSlidingWindowMax"/><category term="Medium"/><category term="SlideWindow"/><category term="Review"/><summary type="html"><![CDATA[Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.]]></summary></entry><entry><title type="html">1299. Replace Elements with Greatest Element on Right Side</title><link href="https://zhengstar94.github.io//blog/2025/ReplaceElementsWithGreatestElementOnRightSide/" rel="alternate" type="text/html" title="1299. Replace Elements with Greatest Element on Right Side"/><published>2025-02-16T00:00:00+00:00</published><updated>2025-02-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ReplaceElementsWithGreatestElementOnRightSide</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ReplaceElementsWithGreatestElementOnRightSide/"><![CDATA[<ul> <li>Given an array <code class="language-plaintext highlighter-rouge">arr</code>, replace every element in that array with the greatest element among the elements to its right, and replace the last element with <code class="language-plaintext highlighter-rouge">-1</code>.</li> <li>After doing so, return the array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --&gt; the greatest element to the right of index 0 is index 1 (18).
- index 1 --&gt; the greatest element to the right of index 1 is index 4 (6).
- index 2 --&gt; the greatest element to the right of index 2 is index 4 (6).
- index 3 --&gt; the greatest element to the right of index 3 is index 4 (6).
- index 4 --&gt; the greatest element to the right of index 4 is index 5 (1).
- index 5 --&gt; there are no elements to the right of index 5, so we put -1.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [400]
Output: [-1]
Explanation: There are no elements to the right of index 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReplaceElementsWithGreatestElementOnRightSide</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">replaceElements</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>  <span class="c1">// Get the length of input array</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>        <span class="c1">// Initialize max as -1 (will be the value for the last element)</span>

        <span class="c1">// Traverse array from right to left</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>    <span class="c1">// Store current element temporarily</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span>         <span class="c1">// Replace current element with maximum value seen so far</span>
            <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">temp</span><span class="o">);</span>  <span class="c1">// Update maximum value</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">arr</span><span class="o">;</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Array with multiple elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">17</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">replaceElements</span><span class="o">(</span><span class="n">arr1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span> <span class="c1">// Expected output: [18, 6, 6, 6, 1, -1]</span>

        <span class="c1">// Test Case 2: Array with single element</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">400</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">replaceElements</span><span class="o">(</span><span class="n">arr2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span> <span class="c1">// Expected output: [-1]</span>

        <span class="c1">// Test Case 3: Array with decreasing sequence</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">replaceElements</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result</span><span class="o">));</span> <span class="c1">// Expected output: [4, 3, 2, 1, -1]</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array.]]></summary></entry></feed>