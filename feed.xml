<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-20T06:03:52+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">blank</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">How to design Twitter</title><link href="https://zhengstar94.github.io//blog/2024/DesignTwitter/" rel="alternate" type="text/html" title="How to design Twitter"/><published>2024-11-19T00:00:00+00:00</published><updated>2024-11-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/DesignTwitter</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/DesignTwitter/"><![CDATA[<h2 id="understanding-the-problem-what-is-twitter">Understanding the Problem (What is Twitter)</h2> <p>Twitter is a microblogging platform where users can share short messages called tweets. These tweets can be seen by anyone who chooses to follow the user.</p> <h2 id="requirements">Requirements</h2> <h3 id="functional-requirements">Functional Requirements</h3> <ol> <li>Users can post, delete and interact with tweets</li> </ol> <ul> <li> <p>Create tweets with text (maximum 280 characters), images, and videos</p> </li> <li> <p>Delete their own tweets</p> </li> <li> <p>Retweet and quote other users’ tweets</p> </li> <li> <p>Reply to tweets to create conversations</p> </li> </ul> <ol> <li>Users can view different types of timeline feeds</li> </ol> <ul> <li> <p>Home timeline shows tweets from followed users in chronological order</p> </li> <li> <p>User profile timeline displays a specific user’s tweets</p> </li> <li> <p>Search timeline shows tweets matching specific queries</p> </li> <li> <p>Trending topics timeline shows popular hashtags and discussions</p> </li> </ul> <ol> <li>Users can perform social interactions</li> </ol> <ul> <li> <p>Follow/unfollow other users</p> </li> <li> <p>Like/unlike tweets</p> </li> <li> <p>Mention other users using @username</p> </li> <li> <p>Create and participate in hashtag discussions</p> </li> </ul> <ol> <li>Users can search and discover content</li> </ol> <ul> <li> <p>Search tweets by keywords, hashtags, or usernames</p> </li> <li> <p>Filter search results by time, popularity, or media type</p> </li> <li> <p>Discover trending topics and suggested users</p> </li> </ul> <h3 id="non-functional-requirements">Non-Functional Requirements</h3> <ol> <li>Consistency</li> </ol> <ul> <li> <p>Every read receives the most recent write or an error</p> </li> <li> <p>Sacrifice eventual consistency for:</p> <ul> <li> <p>Timeline feed updates</p> </li> <li> <p>Like counts and follower counts</p> </li> <li> <p>Tweet delivery to followers</p> </li> </ul> </li> <li> <p>Strong consistency required for:</p> <ul> <li> <p>Tweet posting</p> </li> <li> <p>User authentication</p> </li> </ul> </li> </ul> <ol> <li>Availability</li> </ol> <ul> <li> <p>Every request receives a (non-error) response</p> </li> <li> <p>System remains operational 24/7 with 99.99% uptime</p> </li> <li> <p>High scalability to handle:</p> <ul> <li> <p>Millions of concurrent users</p> </li> <li> <p>500K tweets per second</p> </li> </ul> </li> <li> <p>Low latency performance:</p> <ul> <li> <p>Timeline loading &lt; 200ms</p> </li> <li> <p>Tweet posting &lt; 100ms</p> </li> </ul> </li> </ul> <ol> <li>Partition Tolerance (Fault Tolerance)</li> </ol> <ul> <li> <p>System continues to operate despite network partitions</p> </li> <li> <p>Handles node failures without service disruption</p> </li> <li> <p>Data replication across multiple data centers</p> </li> <li> <p>Graceful degradation during partial system failures</p> </li> </ul> <h2 id="estimates-and-constraints">Estimates and Constraints</h2> <h3 id="assumption"><strong>Assumption:</strong></h3> <ul> <li> <p>200 million DAU, 100 million new tweets</p> </li> <li> <p>Each user: visit home timeline 5 times; other user timeline 3 times</p> </li> <li> <p>Each timeline/page has 20 tweets</p> </li> <li> <p>Each tweet has size 280 （140 characters） bytes, metadata 30 bytes</p> <ul> <li> <p>Per photo: 200KB, 20% tweets have images</p> </li> <li> <p>Per video: 2MB, 10% tweets have video, 30% videos will be watched</p> </li> </ul> </li> </ul> <h3 id="storage-estimate">Storage Estimate</h3> <ul> <li> <p>Write size daily:</p> <ul> <li> <p>Text</p> <ul> <li>100M new tweets * （280 + 30） Bytes/tweet = 31GB/day</li> </ul> </li> <li> <p>Image</p> <ul> <li>100M new tweets * 20% has image * 200 KB per image = 4TB/day</li> </ul> </li> <li> <p>Video</p> <ul> <li>100M new tweets * 10% has video * 2MB per video = 20TB/day</li> </ul> </li> </ul> </li> <li> <p>Total</p> <ul> <li>31GB + 4TB + 20TB = 24TB/day</li> </ul> </li> </ul> <h3 id="bandwidth-estimate">Bandwidth Estimate</h3> <h4 id="daily-read-tweets-volume"><strong>Daily Read Tweets Volume</strong></h4> <ul> <li>200M * （5 home visit +3 user visit） * 20 tweets/page = 32B tweets/day</li> </ul> <h4 id="daily-read-bandwidth"><strong>Daily Read Bandwidth</strong></h4> <ul> <li> <p>Text: 32B * 280 bytes / 86400 = 100MB/S</p> </li> <li> <p>Image: 32B * 20% tweets has image * 200 KB per image /86400 = 14GB/s</p> </li> <li> <p>Video: 32B * 10% tweets has video * 30% got watched * 2MB per video / 86400 =20GB/S</p> </li> <li> <p>Total: 35GB/s</p> </li> </ul> <h2 id="apis">APIs</h2> <h3 id="post-tweet">Post Tweet</h3> <p><strong>Request</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">POST</span><span class="w"> </span><span class="err">/tweets</span><span class="w">  
</span><span class="p">{</span><span class="w">  
</span><span class="nl">"user_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user_authentication_token"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">  
</span><span class="nl">"text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Hello, Twitter!"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"media_urls"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"https://example.com/image.jpg"</span><span class="p">],</span><span class="w">  
</span><span class="nl">"hashtags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"#Twitter"</span><span class="p">,</span><span class="w"> </span><span class="s2">"#Tech"</span><span class="p">],</span><span class="w">  
</span><span class="nl">"mentions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"@username"</span><span class="p">]</span><span class="w">  
</span><span class="p">}</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Response</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">  
</span><span class="nl">"tweet_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"unique_tweet_identifier"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-01T12:00:00Z"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"user_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"posting_user_id"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="delete-tweet">Delete Tweet</h3> <p><strong>Request</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">DELETE</span><span class="w"> </span><span class="err">/tweets/</span><span class="p">{</span><span class="err">tweet_id</span><span class="p">}</span><span class="w">  
</span><span class="p">{</span><span class="w">  
</span><span class="nl">"user_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user_authentication_token"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Response</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">  
</span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="s2">"deleted"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"tweet_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"deleted_tweet_identifier"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="likeunlike-tweet">Like/Unlike Tweet</h3> <p><strong>Request</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">POST</span><span class="w"> </span><span class="err">/tweets/</span><span class="p">{</span><span class="err">tweet_id</span><span class="p">}</span><span class="err">/like</span><span class="w">  
</span><span class="p">{</span><span class="w">  
</span><span class="nl">"user_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user_authentication_token"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"like"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">or</span><span class="w"> </span><span class="s2">"unlike"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Response</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">  
</span><span class="nl">"tweet_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"liked_tweet_identifier"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"like_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">42</span><span class="p">,</span><span class="w">  
</span><span class="nl">"user_liked"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="read-home-timeline">Read Home Timeline</h3> <p><strong>Request</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET</span><span class="w"> </span><span class="err">/timeline/home</span><span class="w">  
</span><span class="p">{</span><span class="w">  
</span><span class="nl">"user_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user_authentication_token"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"page_size"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w">  
</span><span class="nl">"page_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"optional_pagination_token"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Response</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">  
</span><span class="nl">"tweets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">  
</span><span class="err"> </span><span class="w">  </span><span class="p">{</span><span class="w">  
</span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="nl">"tweet_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tweet_identifier"</span><span class="p">,</span><span class="w">  
</span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="nl">"user_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"author_id"</span><span class="p">,</span><span class="w">  
</span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tweet content"</span><span class="p">,</span><span class="w">  
</span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="w"> </span><span class="err"> </span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-01T12:00:00Z"</span><span class="w">  
</span><span class="err"> </span><span class="w">  </span><span class="p">}</span><span class="w">  
</span><span class="p">],</span><span class="w">  
</span><span class="nl">"next_page_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pagination_token_for_next_page"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="read-user-timeline">Read User Timeline</h3> <p><strong>Request</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">GET</span><span class="w"> </span><span class="err">/timeline/user/</span><span class="p">{</span><span class="err">user_id</span><span class="p">}</span><span class="w">  
</span><span class="p">{</span><span class="w">  
</span><span class="nl">"user_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"user_authentication_token"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"page_size"</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w">  
</span><span class="nl">"page_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"optional_pagination_token"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p><strong>Response</strong></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">  
</span><span class="nl">"tweets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">  
</span><span class="p">{</span><span class="w">  
</span><span class="nl">"tweet_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tweet_identifier"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Tweet content"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-01T12:00:00Z"</span><span class="p">,</span><span class="w">  
</span><span class="nl">"media_urls"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"https://example.com/image.jpg"</span><span class="p">]</span><span class="w"> 
</span><span class="err"> </span><span class="w">  </span><span class="p">}</span><span class="w">  
</span><span class="p">],</span><span class="w">  
</span><span class="nl">"next_page_token"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pagination_token_for_next_page"</span><span class="w">  
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h2 id="high-level-system-design">High-level System Design</h2> <h3 id="scenario-1-post-tweets">Scenario 1: Post tweets</h3> <p>When a user posts a tweet, the request first goes through a load balancer to a Tweet Writer service. The Tweet Writer writes the tweet to the database and updates the cache.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/1-480.webp 480w,/assets/img/2024/twitter/1-800.webp 800w,/assets/img/2024/twitter/1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/1.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="scenario-2-user-timeline">Scenario 2: User Timeline</h3> <p>When a user visits another user’s profile, the request is routed to the Timeline Service via a load balancer. The Timeline Service fetches the timeline data from the cache and sends it to the user. Updates to the timeline (e.g., new tweets) are written to both the database and the cache to ensure real-time data.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/2-480.webp 480w,/assets/img/2024/twitter/2-800.webp 800w,/assets/img/2024/twitter/2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/2.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><img src="file:///Users/zhengxingxing/Library/Application%20Support/typora-user-images/image-20241119150012212.png?lastModify=1732026725" alt="image-20241119150012212"/></p> <h3 id="scenario-3-home-timeline">Scenario 3: Home Timeline</h3> <p>When a user opens their homepage, the request reaches the Timeline Service. The Timeline Service typically stores each user’s home timeline in the cache in advance, so it can quickly return the corresponding user’s timeline data directly from the cache. However, the challenge is how to efficiently update the home timeline in the cache.</p> <p>A commonly used strategy is <strong>Fan-out on Write</strong>. When a user posts a new Tweet, in addition to writing the Tweet to the database and cache, it also needs to be distributed to the home timeline cache of all followers. For example, if Bob posts a new Tweet, this Tweet will:</p> <ol> <li> <p>Be written to the database and Bob’s cached timeline;</p> </li> <li> <p>Retrieve Bob’s follower list (assuming there are 100 followers);</p> </li> <li> <p>Update the home timeline cache of each follower, inserting Bob’s new Tweet.</p> </li> </ol> <p>This mechanism ensures that the followers’ home timeline caches are updated in advance, so when they visit their homepage, no additional database queries are needed, significantly improving read efficiency. While this method may increase write latency, it is suitable for scenarios with high read frequency.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/3-480.webp 480w,/assets/img/2024/twitter/3-800.webp 800w,/assets/img/2024/twitter/3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/3.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="two-implementations-of-home-timeline">Two Implementations of Home Timeline</h3> <h4 id="method-1-pull-mode"><strong>Method 1: Pull Mode</strong></h4> <p><strong>How</strong></p> <ul> <li>On each request, fetch the latest tweets from the database for all followed users and merge them.</li> </ul> <p><strong>Pros</strong></p> <ul> <li><strong>High write efficiency</strong>: Only one database write per tweet.</li> </ul> <p><strong>Cons</strong></p> <ul> <li> <p>Slow reads: Requires O(N database queries, where NNN is the number of followees.</p> </li> <li> <p>Poor scalability as the number of followees increases.</p> </li> </ul> <hr/> <h4 id="method-2-push-mode"><strong>Method 2: Push Mode</strong></h4> <p><strong>How</strong></p> <ul> <li> <p>Maintain a feed list in cache for each user’s home timeline.</p> </li> <li> <p>Use <strong>Fan-out on Write</strong>: When a user posts a tweet, it is pushed to all followers’ feed lists.</p> </li> </ul> <p><strong>Pros</strong></p> <ul> <li>Fast reads: Cached timelines allow O(1) retrieval.</li> </ul> <p><strong>Cons</strong></p> <ul> <li> <p><strong>High Write Overhead:</strong></p> <ul> <li> <p>Each new tweet requires updating the feed list of all followers, with a time complexity of O(N). For users with a large number of followers, this imposes significant write pressure.</p> </li> <li> <p>To reduce write pressure, asynchronous task queues (Async Tasks) are typically introduced to handle the push operations.</p> </li> </ul> </li> <li> <p><strong>Delay in Showing Latest Tweets</strong>：The push mode requires time to write tweets into the feed lists of all followers. As a result, users may not immediately see the latest tweets, which falls under the scenario of <strong>Eventual Consistency</strong>.</p> </li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/4-480.webp 480w,/assets/img/2024/twitter/4-800.webp 800w,/assets/img/2024/twitter/4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/4.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="fan-out-on-write-的局限性"><strong>Fan-out on Write 的局限性</strong></h4> <p>For users with a large number of followers (e.g., more than 10,000), the <strong>Fan-out on Write</strong> method has significant performance bottlenecks and resource consumption issues.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/5-480.webp 480w,/assets/img/2024/twitter/5-800.webp 800w,/assets/img/2024/twitter/5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/5.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h4 id="hybrid-solution-for-home-timeline"><strong>Hybrid Solution for Home Timeline</strong></h4> <h5 id="design-concept"><strong>Design Concept</strong></h5> <p>By combining the advantages of <strong>Fan-out on Write</strong> and <strong>Fan-in on Read</strong>, the processing logic is differentiated based on the user’s popularity (number of followers or activity level) to optimize performance, reduce system overhead, and ensure a good user experience.</p> <hr/> <h5 id="specific-implementation"><strong>Specific Implementation</strong></h5> <ol> <li><strong>Non-Hot Users</strong></li> </ol> <ul> <li> <p><strong>Strategy</strong>: Use <strong>Fan-out on Write</strong> (Push model).</p> </li> <li> <p>Implementation:</p> <ul> <li> <p>When a non-hot user posts a new Tweet, the Tweet is pushed to the timeline cache of all their active followers.</p> </li> <li> <p>For inactive followers, no push is performed to avoid unnecessary cache updates.</p> </li> </ul> </li> <li> <p>Advantages:</p> <ul> <li> <p>Non-hot users have fewer followers, so the performance pressure of pushing is lower.</p> </li> <li> <p>Active followers can quickly read the latest content from non-hot users.</p> </li> </ul> </li> </ul> <ol> <li><strong>Hot Users</strong></li> </ol> <ul> <li> <p><strong>Strategy</strong>: Use <strong>Fan-in on Read</strong> (Pull model).</p> </li> <li> <p>Implementation:</p> <ul> <li> <p>When a hot user (e.g., a celebrity) posts a new Tweet, their followers’ timeline caches are not updated.</p> </li> <li> <p>When followers refresh their home timeline, the latest Tweets from the hot user are dynamically pulled from the hot user’s cache and merged with Tweets from non-hot users before being returned.</p> </li> </ul> </li> <li> <p>Advantages:</p> <ul> <li> <p>Avoid triggering a large number of push operations for each Tweet from hot users, significantly reducing write pressure.</p> </li> <li> <p>Maintain system stability under high-load scenarios.</p> </li> </ul> </li> </ul> <h5 id="workflow"><strong>Workflow</strong></h5> <ol> <li><strong>Tweet Posting for Non-Hot Users</strong></li> </ol> <ul> <li>Write to the database and cache, while pushing the Tweet to the timeline cache of active followers using <strong>Fan-out on Write</strong>.</li> </ul> <ol> <li><strong>Tweet Posting for Hot Users</strong></li> </ol> <ul> <li>Write to the database and the hot user’s cache timeline, but do not update their followers’ cache timelines.</li> </ul> <ol> <li><strong>User Refreshes Home Timeline</strong></li> </ol> <ul> <li> <p><strong>Non-Hot User’s Tweets</strong>: Directly read from the followers’ cache.</p> </li> <li> <p><strong>Hot User’s Tweets</strong>: Dynamically pull the latest Tweets from the hot user’s cache timeline and merge them with the Tweets from non-hot users before returning.</p> </li> </ul> <h5 id="exemplary-scenario"><strong>Exemplary Scenario</strong></h5> <ul> <li> <p><strong>Non-Hot User Posts a Tweet</strong>:</p> <ul> <li> <p>Suppose Alice has 100 followers. When she posts a Tweet, it is directly pushed to the caches of her 100 active followers.</p> </li> <li> <p>When followers refresh their home timelines, they can directly retrieve Alice’s latest Tweet from the cache.</p> </li> </ul> </li> <li> <p><strong>Hot User Posts a Tweet</strong>:</p> <ul> <li> <p>Suppose Bob is a celebrity with 100,000 followers. When he posts a Tweet, it is only stored in his own cache timeline and does not update his followers’ cache timelines.</p> </li> <li> <p>When followers refresh their home timelines, the latest Tweets from Bob are dynamically pulled from his cache, merged with other followers’ cached timelines, and then returned.</p> </li> </ul> </li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/6-480.webp 480w,/assets/img/2024/twitter/6-800.webp 800w,/assets/img/2024/twitter/6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/6.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="data-storage">Data Storage</h2> <h3 id="user-table">User Table</h3> <table> <thead> <tr> <th>userId</th> <th>Integer</th> </tr> </thead> <tbody> <tr> <td>name</td> <td>Varchar(100)</td> </tr> <tr> <td>email</td> <td>Varchar(100)</td> </tr> <tr> <td>creationTime</td> <td>DateTime</td> </tr> <tr> <td>lastLogin</td> <td>DateTime</td> </tr> <tr> <td>isHotUser</td> <td>Boolean</td> </tr> </tbody> </table> <h3 id="tweet-table">Tweet Table</h3> <table> <thead> <tr> <th>tweetId</th> <th>Integer</th> </tr> </thead> <tbody> <tr> <td>userId</td> <td>Integer</td> </tr> <tr> <td>Content</td> <td>Varchar(140)</td> </tr> <tr> <td>creationTime</td> <td>DateTime</td> </tr> <tr> <td>***</td> <td> </td> </tr> </tbody> </table> <h3 id="follower-table">Follower Table</h3> <table> <thead> <tr> <th>UserID</th> <th>Integer</th> </tr> </thead> <tbody> <tr> <td>FollowerId</td> <td>Integer</td> </tr> </tbody> </table> <ul> <li> <p>SQL database</p> <ul> <li>E.g., user table</li> </ul> </li> <li> <p>NoSQL database</p> <ul> <li>E.g., timelines</li> </ul> </li> <li> <p>File system</p> <ul> <li>Media file: image, audio, video</li> </ul> </li> </ul> <h2 id="scalability">Scalability</h2> <h3 id="sharing">Sharing</h3> <p>To address the massive data storage and query demands, Twitter’s architecture uses sharding technology to distribute data across multiple servers, enabling efficient system scaling.</p> <h4 id="why-sharding-is-needed"><strong>Why Sharding is Needed</strong></h4> <ul> <li> <p><strong>Massive Data</strong>:</p> <ul> <li> <p>Twitter generates approximately <strong>500 million tweets per day</strong>, about <strong>200 billion tweets per year</strong>, and around <strong>1 trillion tweets</strong> over 5 years, or even more.</p> </li> <li> <p>No single machine can store and process such a vast amount of data.</p> </li> </ul> </li> <li> <p><strong>Solution</strong>: The large tables are split into smaller pieces (called shards), which are distributed across different servers for storage and processing.</p> </li> </ul> <h4 id="sharding-methods">Sharding Methods</h4> <h5 id="1-sharding-by-creation-time"><strong>1. Sharding by Creation Time</strong></h5> <ul> <li> <p><strong>Implementation</strong>：</p> <ul> <li> <p>Shard data based on the tweet’s creation time, such as by day or week.</p> </li> <li> <p>Each shard stores data for a specific time period, allowing for quick identification of the shard needed for queries.</p> </li> </ul> </li> <li> <p><strong>Pros</strong>：</p> <ul> <li>During queries, only the relevant time period’s shard needs to be accessed, reducing unnecessary shard scans.</li> </ul> </li> <li> <p><strong>Cons</strong>：</p> <ul> <li> <p><strong>Cold and Hot Data Issues</strong>:</p> <ul> <li>Older shards have lower access frequency, resulting in low resource utilization, while newer shards experience high access and write pressures, creating hotspots.</li> </ul> </li> <li> <p><strong>Rapid Fill of New Shards</strong>:</p> <ul> <li>Newer shards may quickly reach their capacity limit due to high write volumes.</li> </ul> </li> </ul> </li> </ul> <h5 id="2-sharding-by-hashing-user-id"><strong>2. Sharding by Hashing User ID</strong></h5> <ul> <li> <p><strong>Implementation</strong>：</p> <ul> <li> <p>Hash the user ID to store all tweets from the same user in a single shard.</p> </li> <li> <p>Each shard can store data for about 100,000 users.</p> </li> </ul> </li> <li> <p><strong>Pros</strong>：</p> <ul> <li>Simple user timeline queries: Directly query the shard corresponding to the user’s ID.</li> </ul> </li> <li> <p><strong>Cons</strong>：</p> <ul> <li> <p>Complex Home Timeline Queries：</p> <ul> <li>A user’s follower list may be spread across multiple shards, requiring cross-shard queries for all followers’ tweets.</li> </ul> </li> <li> <p>Uneven Storage：</p> <ul> <li>Data volume for popular users (e.g., celebrities) is significantly higher than for regular users, which may cause certain shards to experience higher storage pressure.</li> </ul> </li> <li> <p>Hotspot Issues：</p> <ul> <li>High access volumes for popular users may make certain shards very busy, impacting performance.</li> </ul> </li> <li> <p>Availability Challenges：</p> <ul> <li>If a single shard stores too much data, its scalability and high availability may be affected.</li> </ul> </li> </ul> </li> </ul> <h5 id="3-sharding-by-hashing-tweet-id"><strong>3. Sharding by Hashing Tweet ID</strong></h5> <ul> <li> <p><strong>Implementation</strong>：</p> <ul> <li> <p>Hash the tweet ID to distribute tweets evenly across multiple shards.</p> </li> <li> <p>This ensures that high-activity users (such as celebrities) have their tweets distributed across different shards, preventing overloading a single shard.</p> </li> </ul> </li> <li> <p><strong>Pros</strong>：</p> <ul> <li> <p><strong>Even Data Distribution</strong>:</p> <ul> <li>Tweets are evenly distributed across all shards, reducing the load pressure on any single shard.</li> </ul> </li> <li> <p><strong>High Availability</strong>:</p> <ul> <li>The impact of a single shard failure is limited, improving overall system stability.</li> </ul> </li> </ul> </li> <li> <p><strong>Cons</strong>：</p> <ul> <li> <p><strong>Complex Timeline Queries</strong>:</p> <ul> <li>Constructing a user’s or home timeline requires querying across multiple shards for all relevant tweets, increasing query cost.</li> </ul> </li> <li> <p><strong>Cache Dependency</strong>:</p> <ul> <li>Efficient timeline queries rely heavily on robust caching to reduce shard access.</li> </ul> </li> </ul> </li> </ul> <h5 id="sharding-strategy-comparison"><strong>Sharding Strategy Comparison</strong></h5> <table> <thead> <tr> <th><strong>Sharding Method</strong></th> <th><strong>Advantages</strong></th> <th><strong>Disadvantages</strong></th> </tr> </thead> <tbody> <tr> <td><strong>Sharding by Creation Time</strong></td> <td>- Efficient querying for specific time periods</td> <td>- Cold and hot data issues cause resource waste</td> </tr> <tr> <td> </td> <td> </td> <td>- New shard write pressure creates hotspots</td> </tr> <tr> <td><strong>Sharding by Hashing User ID</strong></td> <td>- Simple user timeline queries</td> <td>- Home timeline requires querying across multiple shards</td> </tr> <tr> <td> </td> <td>- Data is localized for each user</td> <td>- Uneven storage, hotspot users cause load concentration</td> </tr> <tr> <td><strong>Sharding by Hashing Tweet ID</strong></td> <td>- Even data distribution</td> <td>- Complex timeline queries, requiring access to all shards</td> </tr> <tr> <td> </td> <td>- Reduces hotspot issues</td> <td>- Efficient queries rely on caching</td> </tr> </tbody> </table> <h3 id="caching"><strong>Caching</strong></h3> <h4 id="why-caching-is-necessary"><strong>Why Caching is Necessary？</strong></h4> <ul> <li> <p><strong>High Read Traffic in Social Networks</strong>:</p> <ul> <li>Users repeatedly view their timelines, which accounts for the majority of system access. Caching can effectively reduce read request latency while lowering the load on the database.</li> </ul> </li> <li> <p><strong>High Cost and Slow Speed of Distributed Queries</strong>:</p> <ul> <li>Data needs to be queried across multiple shards or databases, especially when generating a user’s home timeline. This involves significant computational effort and query overhead.</li> </ul> </li> </ul> <hr/> <h4 id="how-does-caching-work"><strong>How Does Caching Work?</strong></h4> <ul> <li> <p><strong>Storing Hot or Precomputed Data in Memory</strong>:</p> <ul> <li>Frequently accessed or precomputed data is stored in high-speed storage (such as Redis or Memcached), significantly reducing query latency.</li> </ul> </li> <li> <p><strong>Accelerating Read Operations</strong>:</p> <ul> <li>Compared to retrieving data from distributed storage systems, fetching data directly from memory is much faster, providing an almost real-time user experience.</li> </ul> </li> </ul> <h4 id="caching-in-timeline-service">Caching in Timeline Service</h4> <h5 id="1-user-timeline-cache"><strong>1. User Timeline Cache</strong></h5> <ul> <li> <p><strong>Mapping</strong>: <code class="language-plaintext highlighter-rouge">user_id -&gt; {tweet_id}</code></p> <ul> <li>Stores the IDs of all tweets published by the user.</li> </ul> </li> <li> <p><strong>Characteristics</strong>:</p> <ul> <li> <p>The cache size depends on the user’s activity level.</p> </li> <li> <p>Example：</p> <ul> <li> <p>Regular users: 1k–100k tweet IDs.</p> </li> <li> <p>Highly active users (e.g., Trump): Around 60k tweet IDs.</p> </li> </ul> </li> </ul> </li> </ul> <h5 id="2-home-timeline-cache"><strong>2. Home Timeline Cache</strong></h5> <ul> <li> <p><strong>Mapping</strong>: <code class="language-plaintext highlighter-rouge">user_id -&gt; {tweet_id}</code></p> <ul> <li>Stores the tweet IDs of all users the individual is following.</li> </ul> </li> <li> <p><strong>Characteristics</strong>:</p> <ul> <li> <p>Much larger than the user timeline cache since it aggregates tweets from multiple followed users.</p> </li> <li> <p>Requires an efficient caching strategy to handle updates and eviction.</p> </li> </ul> </li> </ul> <h5 id="3-tweet-content-cache"><strong>3. Tweet Content Cache</strong></h5> <ul> <li> <p><strong>Mapping</strong>: <code class="language-plaintext highlighter-rouge">tweet_id -&gt; tweet</code></p> <ul> <li>Stores the actual content of tweets, allowing multiple timelines to share this data.</li> </ul> </li> <li> <p><strong>Characteristics</strong>:</p> <ul> <li> <p>Provides reusable data, reducing redundant storage in the cache.</p> </li> <li> <p>Separates tweet content from timelines to reduce memory usage.</p> </li> </ul> </li> </ul> <h4 id="key-issues-in-caching"><strong>Key Issues in Caching</strong></h4> <h5 id="1-caching-strategies"><strong>1. Caching Strategies</strong></h5> <ul> <li> <p><strong>Eviction Policies</strong>:</p> <ul> <li> <p><strong>Least Recently Used (LRU)</strong>: Prioritize retaining the most recently accessed data.</p> </li> <li> <p><strong>Time-to-Live (TTL)</strong>: Set expiration times for data, automatically clearing old data to free up space.</p> </li> </ul> </li> <li> <p><strong>Cache Pre-warming</strong>:</p> <ul> <li>Preload hot timelines or tweets to reduce cache misses.</li> </ul> </li> <li> <p><strong>Write-through Cache</strong>:</p> <ul> <li>Update the cache simultaneously with database writes to ensure data consistency.</li> </ul> </li> </ul> <h5 id="2-cache-sharding"><strong>2. Cache Sharding</strong></h5> <ul> <li> <p><strong>Why Shard the Cache?</strong></p> <ul> <li> <p><strong>Scalability</strong>: A single cache instance cannot handle massive traffic.</p> </li> <li> <p><strong>Load Balancing</strong>: Prevent cache bottlenecks.</p> </li> </ul> </li> <li> <p><strong>How to Implement Cache Sharding?</strong></p> <ul> <li> <p><strong>Hash-based User ID Sharding</strong>: Distribute user timelines or home timelines across different cache shards.</p> </li> <li> <p><strong>Hash-based Tweet ID Sharding</strong>: Evenly distribute tweet content across multiple cache instances.</p> </li> </ul> </li> </ul> <h5 id="3-performance-optimization">3. Performance Optimization</h5> <ul> <li> <p><strong>High Read and Write Throughput</strong>:</p> <ul> <li> <p>Use memory systems optimized for high efficiency, such as Redis.</p> </li> <li> <p>Improve read performance through replication.</p> </li> </ul> </li> <li> <p><strong>Reduce Cache Misses</strong>:</p> <ul> <li>Employ prediction algorithms to pre-load data that users are likely to access.</li> </ul> </li> <li> <p><strong>Dynamic Monitoring and Scaling</strong>:</p> <ul> <li>Use monitoring tools to track cache hit rates, and dynamically adjust cache size or sharding strategies.</li> </ul> </li> </ul> <h2 id="chart">Chart</h2> <h3 id="1-tweet-flow-chart">1. Tweet Flow Chart</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/7-480.webp 480w,/assets/img/2024/twitter/7-800.webp 800w,/assets/img/2024/twitter/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/7.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="2-home-timeline-loading-process">2. Home Timeline Loading Process</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/8-480.webp 480w,/assets/img/2024/twitter/8-800.webp 800w,/assets/img/2024/twitter/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/8.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="3-data-fragmentation-strategy-diagram">3. Data fragmentation strategy diagram</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/9-480.webp 480w,/assets/img/2024/twitter/9-800.webp 800w,/assets/img/2024/twitter/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/9.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="4-cache-architecture-diagram">4. Cache architecture diagram</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/twitter/10-480.webp 480w,/assets/img/2024/twitter/10-800.webp 800w,/assets/img/2024/twitter/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/twitter/10.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="System Design New"/><category term="SystemDesign"/><summary type="html"><![CDATA[Understanding the Problem (What is Twitter)]]></summary></entry><entry><title type="html">14. Longest Common Prefix</title><link href="https://zhengstar94.github.io//blog/2024/LongestCommonPrefix/" rel="alternate" type="text/html" title="14. Longest Common Prefix"/><published>2024-11-19T00:00:00+00:00</published><updated>2024-11-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/LongestCommonPrefix</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/LongestCommonPrefix/"><![CDATA[<ul> <li>Write a function to find the longest common prefix string amongst an array of strings.</li> <li>If there is no common prefix, return an empty string <code class="language-plaintext highlighter-rouge">""</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: strs = [ "flower","flow","flight" ]
Output: "fl"
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: strs = [ "dog","racecar","car" ]
Output: ""
Explanation: There is no common prefix among the input strings.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(S) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/19
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongestCommonPrefix</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">longestCommonPrefix</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases: return empty string if array is null or empty</span>
        <span class="k">if</span><span class="o">(</span><span class="n">strs</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// If array contains only one string, return that string as the prefix</span>
        <span class="k">if</span><span class="o">(</span><span class="n">strs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c1">// Initialize prefix with the first string</span>
        <span class="nc">String</span> <span class="n">prefix</span> <span class="o">=</span> <span class="n">strs</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>

        <span class="c1">// Iterate through the remaining strings in the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">prefix</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="cm">/**
             * The indexOf(prefix) method returns the position where the prefix starts in the string
             * If prefix is found at the beginning of the string, indexOf returns 0
             * If prefix is not found at the beginning:
             * - Either prefix is not in the string at all (returns -1)
             * - Or prefix is found but not at the start (returns &gt; 0)
             * In both cases, we need to shorten the prefix
             */</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">strs</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">indexOf</span><span class="o">(</span><span class="n">prefix</span><span class="o">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="cm">/**
                 * Shorten the prefix by removing its last character:
                 * - substring(0, prefix.length() - 1) creates a new string
                 * - Starting from index 0 (inclusive)
                 * - Ending at prefix.length() - 1 (exclusive)
                 * Example:
                 * If prefix = "flower", new prefix will be "flowe"
                 * This process continues until either:
                 * 1. The shortened prefix is found at the start of current string
                 * 2. Or prefix becomes empty string
                 */</span>
                <span class="n">prefix</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">prefix</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

                <span class="c1">// If prefix becomes empty, there is no common prefix</span>
                <span class="k">if</span><span class="o">(</span><span class="n">prefix</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the final common prefix found</span>
        <span class="k">return</span> <span class="n">prefix</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: strings with common prefix "fl"</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"flower"</span><span class="o">,</span> <span class="s">"flow"</span><span class="o">,</span> <span class="s">"flight"</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>  <span class="c1">// Expected output: "fl"</span>

        <span class="c1">// Test case 2: strings with no common prefix</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"dog"</span><span class="o">,</span> <span class="s">"racecar"</span><span class="o">,</span> <span class="s">"car"</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>  <span class="c1">// Expected output: ""</span>

        <span class="c1">// Test case 3: empty array</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>  <span class="c1">// Expected output: ""</span>

        <span class="c1">// Test case 4: array with single string</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test4</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"single"</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 4: "</span> <span class="o">+</span> <span class="n">longestCommonPrefix</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>  <span class="c1">// Expected output: "single"</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><summary type="html"><![CDATA[Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string "".]]></summary></entry><entry><title type="html">1768. Merge Strings Alternately</title><link href="https://zhengstar94.github.io//blog/2024/MergeStringsAlternately/" rel="alternate" type="text/html" title="1768. Merge Strings Alternately"/><published>2024-11-18T00:00:00+00:00</published><updated>2024-11-18T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MergeStringsAlternately</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MergeStringsAlternately/"><![CDATA[<ul> <li>You are given two strings <code class="language-plaintext highlighter-rouge">word1</code> and <code class="language-plaintext highlighter-rouge">word2</code>. Merge the strings by adding letters in alternating order, starting with <code class="language-plaintext highlighter-rouge">word1</code>. If a string is longer than the other, append the additional letters onto the end of the merged string.</li> <li>Return <em>the merged string.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "ab", word2 = "pqrs"
Output: "apbqrs"
Explanation: Notice that as word2 is longer, "rs" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "abcd", word2 = "pq"
Output: "apbqcd"
Explanation: Notice that as word1 is longer, "cd" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m + n) time | O(m + n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/18
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MergeStringsAlternately</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">mergeAlternately</span><span class="o">(</span><span class="nc">String</span> <span class="n">word1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">word2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// StringBuilder is used for efficient string concatenation</span>
        <span class="nc">StringBuilder</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="c1">// Two pointers to track current position in each string</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// pointer for word1</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// pointer for word2</span>

        <span class="c1">// Process both strings until we reach the end of either string</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">word1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">word2</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
            <span class="c1">// Append current character from word1 and increment pointer</span>
            <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">word1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">++));</span>
            <span class="c1">// Append current character from word2 and increment pointer</span>
            <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">word2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">++));</span>
        <span class="o">}</span>

        <span class="c1">// Append remaining characters from word1 (if any)</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">word1</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
            <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">word1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">++));</span>
        <span class="o">}</span>

        <span class="c1">// Append remaining characters from word2 (if any)</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">word2</span><span class="o">.</span><span class="na">length</span><span class="o">()){</span>
            <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">word2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">++));</span>
        <span class="o">}</span>

        <span class="c1">// Convert StringBuilder to String and return</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Equal length strings</span>
        <span class="nc">String</span> <span class="n">word1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2</span> <span class="o">=</span> <span class="s">"pqr"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">mergeAlternately</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 - Equal length strings:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: word1 = "</span> <span class="o">+</span> <span class="n">word1</span> <span class="o">+</span> <span class="s">", word2 = "</span> <span class="o">+</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: apbqcr"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: Second string is longer</span>
        <span class="n">word1</span> <span class="o">=</span> <span class="s">"ab"</span><span class="o">;</span>
        <span class="n">word2</span> <span class="o">=</span> <span class="s">"pqrs"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">mergeAlternately</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 - Second string is longer:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: word1 = "</span> <span class="o">+</span> <span class="n">word1</span> <span class="o">+</span> <span class="s">", word2 = "</span> <span class="o">+</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: apbqrs"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: First string is longer</span>
        <span class="n">word1</span> <span class="o">=</span> <span class="s">"abcd"</span><span class="o">;</span>
        <span class="n">word2</span> <span class="o">=</span> <span class="s">"pq"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">mergeAlternately</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 - First string is longer:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: word1 = "</span> <span class="o">+</span> <span class="n">word1</span> <span class="o">+</span> <span class="s">", word2 = "</span> <span class="o">+</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: apbqcd"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Empty string case</span>
        <span class="n">word1</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">word2</span> <span class="o">=</span> <span class="s">"pqr"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result4</span> <span class="o">=</span> <span class="n">mergeAlternately</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4 - First string is empty:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: word1 = "</span> <span class="o">+</span> <span class="n">word1</span> <span class="o">+</span> <span class="s">", word2 = "</span> <span class="o">+</span> <span class="n">word2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">result4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: pqr"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string. Return the merged string.]]></summary></entry><entry><title type="html">986. Interval List Intersections</title><link href="https://zhengstar94.github.io//blog/2024/IntervalListIntersections/" rel="alternate" type="text/html" title="986. Interval List Intersections"/><published>2024-11-17T00:00:00+00:00</published><updated>2024-11-17T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/IntervalListIntersections</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/IntervalListIntersections/"><![CDATA[<ul> <li>You are given two lists of closed intervals, <code class="language-plaintext highlighter-rouge">firstList</code> and <code class="language-plaintext highlighter-rouge">secondList</code>, where <code class="language-plaintext highlighter-rouge">firstList[i] = [starti, endi]</code> and <code class="language-plaintext highlighter-rouge">secondList[j] = [startj, endj]</code>. Each list of intervals is pairwise <strong>disjoint</strong> and in <strong>sorted order</strong>.</li> <li>Return <em>the intersection of these two interval lists</em>.</li> <li>A <strong>closed interval</strong> <code class="language-plaintext highlighter-rouge">[a, b]</code> (with <code class="language-plaintext highlighter-rouge">a &lt;= b</code>) denotes the set of real numbers <code class="language-plaintext highlighter-rouge">x</code> with <code class="language-plaintext highlighter-rouge">a &lt;= x &lt;= b</code>.</li> <li>The <strong>intersection</strong> of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of <code class="language-plaintext highlighter-rouge">[1, 3]</code> and <code class="language-plaintext highlighter-rouge">[2, 4]</code> is <code class="language-plaintext highlighter-rouge">[2, 3]</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: firstList = [ [0,2],[5,10],[13,23],[24,25] ], secondList = [ [1,5],[8,12],[15,24],[25,26] ]
Output: [ [1,2],[5,5],[8,10],[15,23],[24,24],[25,25] ]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: firstList = [ [1,3],[5,9] ], secondList = []
Output: []
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n + m) time | O(n + m) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/17
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntervalListIntersections</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">intervalIntersection</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">firstList</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">secondList</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// ArrayList to store intersection intervals</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">// Two pointers to traverse both lists</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// pointer for firstList</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// pointer for secondList</span>

        <span class="c1">// Continue until we reach the end of either list</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">firstList</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">secondList</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Extract start and end points of current intervals</span>
            <span class="kt">int</span> <span class="n">start1</span> <span class="o">=</span> <span class="n">firstList</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>   <span class="c1">// start of interval from first list</span>
            <span class="kt">int</span> <span class="n">end1</span> <span class="o">=</span> <span class="n">firstList</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>     <span class="c1">// end of interval from first list</span>

            <span class="kt">int</span> <span class="n">start2</span> <span class="o">=</span> <span class="n">secondList</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>   <span class="c1">// start of interval from second list</span>
            <span class="kt">int</span> <span class="n">end2</span> <span class="o">=</span> <span class="n">secondList</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>     <span class="c1">// end of interval from second list</span>

            <span class="c1">// Find the intersection points</span>
            <span class="c1">// Intersection start is the maximum of both starts</span>
            <span class="kt">int</span> <span class="n">intersectStart</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">start1</span><span class="o">,</span> <span class="n">start2</span><span class="o">);</span>
            <span class="c1">// Intersection end is the minimum of both ends</span>
            <span class="kt">int</span> <span class="n">intersectEnd</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">end1</span><span class="o">,</span> <span class="n">end2</span><span class="o">);</span>

            <span class="c1">// If we have a valid intersection (start &lt;= end)</span>
            <span class="c1">// add it to our result list</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">intersectStart</span> <span class="o">&lt;=</span> <span class="n">intersectEnd</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">intersectStart</span><span class="o">,</span> <span class="n">intersectEnd</span><span class="o">});</span>
            <span class="o">}</span>

            <span class="c1">// Move the pointer of the interval that ends first</span>
            <span class="c1">// This is crucial for not missing any potential intersections</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">end1</span> <span class="o">&lt;</span> <span class="n">end2</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>  <span class="c1">// first interval ends earlier, move to next interval in first list</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">j</span><span class="o">++;</span>  <span class="c1">// second interval ends earlier or at same time, move to next interval in second list</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Convert ArrayList to array and return</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()][]);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Multiple intersections</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">firstList1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span><span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">10</span><span class="o">},</span> <span class="o">{</span><span class="mi">13</span><span class="o">,</span><span class="mi">23</span><span class="o">},</span> <span class="o">{</span><span class="mi">24</span><span class="o">,</span><span class="mi">25</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">secondList1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">5</span><span class="o">},</span> <span class="o">{</span><span class="mi">8</span><span class="o">,</span><span class="mi">12</span><span class="o">},</span> <span class="o">{</span><span class="mi">15</span><span class="o">,</span><span class="mi">24</span><span class="o">},</span> <span class="o">{</span><span class="mi">25</span><span class="o">,</span><span class="mi">26</span> <span class="o">}</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"firstList = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">firstList1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"secondList = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">secondList1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Intersection Result = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">intervalIntersection</span><span class="o">(</span><span class="n">firstList1</span><span class="o">,</span> <span class="n">secondList1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: Empty list scenario</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">firstList2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">9</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">secondList2</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"firstList = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">firstList2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"secondList = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">secondList2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Intersection Result = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">intervalIntersection</span><span class="o">(</span><span class="n">firstList2</span><span class="o">,</span> <span class="n">secondList2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Complete overlap scenario</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">firstList3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">4</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">7</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">secondList3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">4</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">7</span> <span class="o">}</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 (Complete Overlap):"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"firstList = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">firstList3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"secondList = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">secondList3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Intersection Result = "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">intervalIntersection</span><span class="o">(</span><span class="n">firstList3</span><span class="o">,</span> <span class="n">secondList3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order. Return the intersection of these two interval lists. A closed interval [a, b] (with a &lt;= b) denotes the set of real numbers x with a &lt;= x &lt;= b. The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].]]></summary></entry><entry><title type="html">1868. Product of Two Run-Length Encoded Arrays</title><link href="https://zhengstar94.github.io//blog/2024/ProductOfTwoRunLengthEncodedArrays/" rel="alternate" type="text/html" title="1868. Product of Two Run-Length Encoded Arrays"/><published>2024-11-17T00:00:00+00:00</published><updated>2024-11-17T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ProductOfTwoRunLengthEncodedArrays</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ProductOfTwoRunLengthEncodedArrays/"><![CDATA[<ul> <li><strong>Run-length encoding</strong> is a compression algorithm that allows for an integer array <code class="language-plaintext highlighter-rouge">nums</code> with many segments of <strong>consecutive repeated</strong> numbers to be represented by a (generally smaller) 2D array <code class="language-plaintext highlighter-rouge">encoded</code>. Each <code class="language-plaintext highlighter-rouge">encoded[i] = [vali, freqi]</code> describes the <code class="language-plaintext highlighter-rouge">ith</code> segment of repeated numbers in <code class="language-plaintext highlighter-rouge">nums</code> where <code class="language-plaintext highlighter-rouge">vali</code> is the value that is repeated <code class="language-plaintext highlighter-rouge">freqi</code> times. <ul> <li>For example, <code class="language-plaintext highlighter-rouge">nums = [1,1,1,2,2,2,2,2]</code> is represented by the <strong>run-length encoded</strong> array <code class="language-plaintext highlighter-rouge">encoded = [ [1,3],[2,5] ]</code>. Another way to read this is “three <code class="language-plaintext highlighter-rouge">1</code>’s followed by five <code class="language-plaintext highlighter-rouge">2</code>’s”.</li> </ul> </li> <li>The <strong>product</strong> of two run-length encoded arrays <code class="language-plaintext highlighter-rouge">encoded1</code> and <code class="language-plaintext highlighter-rouge">encoded2</code> can be calculated using the following steps: <ol> <li><strong>Expand</strong> both <code class="language-plaintext highlighter-rouge">encoded1</code> and <code class="language-plaintext highlighter-rouge">encoded2</code> into the full arrays <code class="language-plaintext highlighter-rouge">nums1</code> and <code class="language-plaintext highlighter-rouge">nums2</code> respectively.</li> <li>Create a new array <code class="language-plaintext highlighter-rouge">prodNums</code> of length <code class="language-plaintext highlighter-rouge">nums1.length</code> and set <code class="language-plaintext highlighter-rouge">prodNums[i] = nums1[i] * nums2[i]</code>.</li> <li><strong>Compress</strong> <code class="language-plaintext highlighter-rouge">prodNums</code> into a run-length encoded array and return it.</li> </ol> </li> <li>You are given two <strong>run-length encoded</strong> arrays <code class="language-plaintext highlighter-rouge">encoded1</code> and <code class="language-plaintext highlighter-rouge">encoded2</code> representing full arrays <code class="language-plaintext highlighter-rouge">nums1</code> and <code class="language-plaintext highlighter-rouge">nums2</code> respectively. Both <code class="language-plaintext highlighter-rouge">nums1</code> and <code class="language-plaintext highlighter-rouge">nums2</code> have the <strong>same length</strong>. Each <code class="language-plaintext highlighter-rouge">encoded1[i] = [vali, freqi]</code> describes the <code class="language-plaintext highlighter-rouge">ith</code> segment of <code class="language-plaintext highlighter-rouge">nums1</code>, and each <code class="language-plaintext highlighter-rouge">encoded2[j] = [valj, freqj]</code> describes the <code class="language-plaintext highlighter-rouge">jth</code> segment of <code class="language-plaintext highlighter-rouge">nums2</code>.</li> <li>Return <em>the <strong>product</strong> of</em> <code class="language-plaintext highlighter-rouge">encoded1</code> <em>and</em> <code class="language-plaintext highlighter-rouge">encoded2</code>.</li> <li><strong>Note:</strong> Compression should be done such that the run-length encoded array has the <strong>minimum</strong> possible length.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: encoded1 = [ [1,3],[2,3] ], encoded2 = [ [6,3],[3,3] ]
Output: [ [6,6] ]
Explanation: encoded1 expands to [1,1,1,2,2,2] and encoded2 expands to [6,6,6,3,3,3].
prodNums = [6,6,6,6,6,6], which is compressed into the run-length encoded array [ [6,6] ].
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: encoded1 = [ [1,3],[2,1],[3,2] ], encoded2 = [ [2,3],[3,3] ]
Output: [ [2,3],[6,1],[9,2] ]
Explanation: encoded1 expands to [1,1,1,2,3,3] and encoded2 expands to [2,2,2,3,3,3].
prodNums = [2,2,2,6,9,9], which is compressed into the run-length encoded array [ [2,3],[6,1],[9,2] ].
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(m) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/17
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductOfTwoRunLengthEncodedArrays</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">findRLEArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded2</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>      <span class="c1">// Pointer for traversing encoded1</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>      <span class="c1">// Pointer for traversing encoded2</span>
        <span class="kt">int</span> <span class="n">pos1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// Remaining frequency count in current segment of encoded1</span>
        <span class="kt">int</span> <span class="n">pos2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// Remaining frequency count in current segment of encoded2</span>

        <span class="c1">// Process both arrays until we reach the end of either array</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">encoded1</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">encoded2</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Get current values from both arrays</span>
            <span class="kt">int</span> <span class="n">val1</span> <span class="o">=</span> <span class="n">encoded1</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>    <span class="c1">// Current value from encoded1</span>
            <span class="kt">int</span> <span class="n">val2</span> <span class="o">=</span> <span class="n">encoded2</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>    <span class="c1">// Current value from encoded2</span>

            <span class="c1">// If pos1 is 0, get new frequency from encoded1</span>
            <span class="k">if</span><span class="o">(</span><span class="n">pos1</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                <span class="n">pos1</span> <span class="o">=</span> <span class="n">encoded1</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
            <span class="o">}</span>

            <span class="c1">// If pos2 is 0, get new frequency from encoded2</span>
            <span class="k">if</span><span class="o">(</span><span class="n">pos2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                <span class="n">pos2</span> <span class="o">=</span> <span class="n">encoded2</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>
            <span class="o">}</span>

            <span class="c1">// Calculate the product of current values and the overlap length</span>
            <span class="kt">int</span> <span class="n">product</span> <span class="o">=</span> <span class="n">val1</span> <span class="o">*</span> <span class="n">val2</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">overlap</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">pos1</span><span class="o">,</span> <span class="n">pos2</span><span class="o">);</span>   <span class="c1">// Get minimum frequency between two current segments</span>

            <span class="c1">// Handle the result:</span>
            <span class="c1">// If result is empty OR current product is different from the last product in result</span>
            <span class="k">if</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">!=</span> <span class="n">product</span><span class="o">){</span>
                <span class="c1">// Add new entry with current product and overlap frequency</span>
                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">product</span><span class="o">,</span> <span class="n">overlap</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// If current product equals last product in result, merge frequencies</span>
                <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">last</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                <span class="c1">// Update frequency by adding the overlap</span>
                <span class="c1">// last.get(1) gets current frequency, overlap adds new frequency</span>
                <span class="n">last</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">last</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">overlap</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="c1">// Update remaining frequencies</span>
            <span class="n">pos1</span> <span class="o">-=</span> <span class="n">overlap</span><span class="o">;</span>
            <span class="n">pos2</span> <span class="o">-=</span> <span class="n">overlap</span><span class="o">;</span>

            <span class="c1">// Move pointer i if we've used up current segment in encoded1</span>
            <span class="k">if</span><span class="o">(</span><span class="n">pos1</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Move pointer j if we've used up current segment in encoded2</span>
            <span class="k">if</span><span class="o">(</span><span class="n">pos2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                <span class="n">j</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Basic case with same length arrays</span>
        <span class="c1">// Expected result: [ [6,6] ] (as 1×6=6 three times, and 2×3=6 three times)</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">}</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"encoded1: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">encoded1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"encoded2: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">encoded2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">findRLEArray</span><span class="o">(</span><span class="n">encoded1</span><span class="o">,</span> <span class="n">encoded2</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Different length arrays</span>
        <span class="c1">// Expected result: [ [2,3], [6,1], [9,2] ]</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded4</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">}</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"encoded1: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">encoded3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"encoded2: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">encoded4</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">findRLEArray</span><span class="o">(</span><span class="n">encoded3</span><span class="o">,</span> <span class="n">encoded4</span><span class="o">));</span>

        <span class="c1">// Test Case 3: Case with same products requiring merging</span>
        <span class="c1">// Expected result: [ [6,5], [4,1] ]</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded5</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">1</span><span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">encoded6</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">}</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest Case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"encoded1: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">encoded5</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"encoded2: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">deepToString</span><span class="o">(</span><span class="n">encoded6</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">findRLEArray</span><span class="o">(</span><span class="n">encoded5</span><span class="o">,</span> <span class="n">encoded6</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[Run-length encoding is a compression algorithm that allows for an integer array nums with many segments of consecutive repeated numbers to be represented by a (generally smaller) 2D array encoded. Each encoded[i] = [vali, freqi] describes the ith segment of repeated numbers in nums where vali is the value that is repeated freqi times. For example, nums=[1,1,1,2,2,2,2,2] is represented by the run-length encoded array encoded=[ [1,3],[2,5] ]. Another way to read this is “three 1’s followed by five 2’s”. The product of two run-length encoded arrays encoded1 and encoded2 can be calculated using the following steps: Expand both encoded1 and encoded2 into the full arrays nums1 and nums2 respectively. Create a new array prodNums of length nums1.length and set prodNums[i] = nums1[i] * nums2[i]. Compress prodNums into a run-length encoded array and return it. You are given two run-length encoded arrays encoded1 and encoded2 representing full arrays nums1 and nums2 respectively. Both nums1 and nums2 have the same length. Each encoded1[i] = [vali, freqi] describes the ith segment of nums1, and each encoded2[j] = [valj, freqj] describes the jth segment of nums2. Return the product of encoded1 and encoded2. Note: Compression should be done such that the run-length encoded array has the minimum possible length.]]></summary></entry><entry><title type="html">443. String Compression</title><link href="https://zhengstar94.github.io//blog/2024/StringCompression/" rel="alternate" type="text/html" title="443. String Compression"/><published>2024-11-16T00:00:00+00:00</published><updated>2024-11-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/StringCompression</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/StringCompression/"><![CDATA[<ul> <li>Given an array of characters <code class="language-plaintext highlighter-rouge">chars</code>, compress it using the following algorithm:</li> <li>Begin with an empty string <code class="language-plaintext highlighter-rouge">s</code>. For each group of <strong>consecutive repeating characters</strong> in <code class="language-plaintext highlighter-rouge">chars</code>: <ul> <li>If the group’s length is <code class="language-plaintext highlighter-rouge">1</code>, append the character to <code class="language-plaintext highlighter-rouge">s</code>.</li> <li>Otherwise, append the character followed by the group’s length.</li> </ul> </li> <li>The compressed string <code class="language-plaintext highlighter-rouge">s</code> <strong>should not be returned separately</strong>, but instead, be stored <strong>in the input character array <code class="language-plaintext highlighter-rouge">chars</code></strong>. Note that group lengths that are <code class="language-plaintext highlighter-rouge">10</code> or longer will be split into multiple characters in <code class="language-plaintext highlighter-rouge">chars</code>.</li> <li>After you are done <strong>modifying the input array,</strong> return <em>the new length of the array</em>.</li> <li>You must write an algorithm that uses only constant extra space.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: chars = [ "a","a","b","b","c","c","c" ]
Output: Return 6, and the first 6 characters of the input array should be: [ "a","2","b","2","c","3" ]
Explanation: The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: chars = [ "a" ]
Output: Return 1, and the first character of the input array should be: [ "a" ]
Explanation: The only group is "a", which remains uncompressed since it's a single character.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: chars = [ "a","b","b","b","b","b","b","b","b","b","b","b","b" ]
Output: Return 4, and the first 4 characters of the input array should be: [ "a","b","1","2" ].
Explanation: The groups are "a" and "bbbbbbbbbbbb". This compresses to "ab12".
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringCompression</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">compress</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">chars</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// writeIndex: points to the position where we should write next character</span>
        <span class="c1">// index: points to the current character being processed</span>
        <span class="kt">int</span> <span class="n">writeIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Process each character in the array</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">chars</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Store the current character for consecutive count</span>
            <span class="kt">char</span> <span class="n">currentChar</span> <span class="o">=</span> <span class="n">chars</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

            <span class="c1">// Count consecutive occurrences of the current character</span>
            <span class="c1">// Key Logic: Keep moving index forward as long as we see the same character</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">chars</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">chars</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">==</span> <span class="n">currentChar</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">index</span><span class="o">++;</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Write the character at writeIndex position and increment writeIndex</span>
            <span class="n">chars</span><span class="o">[</span><span class="n">writeIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">currentChar</span><span class="o">;</span>

            <span class="c1">// If count &gt; 1, we need to write the count after the character</span>
            <span class="c1">// Important: Handle multi-digit numbers correctly</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Convert count to string to handle multi-digit numbers</span>
                <span class="nc">String</span> <span class="n">countStr</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
                <span class="c1">// Write each digit of the count individually</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">countStr</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">chars</span><span class="o">[</span><span class="n">writeIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the length of the compressed array</span>
        <span class="k">return</span> <span class="n">writeIndex</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Multiple characters with different frequencies</span>
        <span class="c1">// Expected output: "a2b2c3"</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[]{</span> <span class="sc">'a'</span><span class="o">,</span><span class="sc">'a'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'c'</span><span class="o">,</span><span class="sc">'c'</span><span class="o">,</span><span class="sc">'c'</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Before compression: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>
        <span class="kt">int</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">compress</span><span class="o">(</span><span class="n">test1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Compressed length: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After compression: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">test1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">result1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: Single character</span>
        <span class="c1">// Expected output: "a"</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[]{</span> <span class="sc">'a'</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Before compression: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>
        <span class="kt">int</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">compress</span><span class="o">(</span><span class="n">test2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Compressed length: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After compression: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">test2</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">result2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Character with double-digit frequency</span>
        <span class="c1">// Expected output: "ab12"</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[]{</span> <span class="sc">'a'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span><span class="o">,</span><span class="sc">'b'</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Before compression: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>
        <span class="kt">int</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">compress</span><span class="o">(</span><span class="n">test3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Compressed length: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After compression: "</span> <span class="o">+</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">test3</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">result3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[Given an array of characters chars, compress it using the following algorithm: Begin with an empty string s. For each group of consecutive repeating characters in chars: If the group’s length is 1, append the character to s. Otherwise, append the character followed by the group’s length. The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars. After you are done modifying the input array, return the new length of the array. You must write an algorithm that uses only constant extra space.]]></summary></entry><entry><title type="html">26. Remove Duplicates from Sorted Array</title><link href="https://zhengstar94.github.io//blog/2024/RemoveDuplicatesFromSortedArray/" rel="alternate" type="text/html" title="26. Remove Duplicates from Sorted Array"/><published>2024-11-14T00:00:00+00:00</published><updated>2024-11-14T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/RemoveDuplicatesFromSortedArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/RemoveDuplicatesFromSortedArray/"><![CDATA[<ul> <li> <p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>. Then return <em>the number of unique elements in</em> <code class="language-plaintext highlighter-rouge">nums</code>.</p> </li> <li> <p>Consider the number of unique elements of <code class="language-plaintext highlighter-rouge">nums</code> to be <code class="language-plaintext highlighter-rouge">k</code>, to get accepted, you need to do the following things:</p> <ul> <li>Change the array <code class="language-plaintext highlighter-rouge">nums</code> such that the first <code class="language-plaintext highlighter-rouge">k</code> elements of <code class="language-plaintext highlighter-rouge">nums</code> contain the unique elements in the order they were present in <code class="language-plaintext highlighter-rouge">nums</code> initially. The remaining elements of <code class="language-plaintext highlighter-rouge">nums</code> are not important as well as the size of <code class="language-plaintext highlighter-rouge">nums</code>.</li> <li>Return <code class="language-plaintext highlighter-rouge">k</code>.</li> </ul> </li> <li> <p><strong>Custom Judge:</strong></p> <p>The judge will test your solution with the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length
  
int k = removeDuplicates(nums); // Calls your implementation
  
assert k == expectedNums.length;
for (int i = 0; i &lt; k; i++) {
    assert nums[i] == expectedNums[i];
}
</code></pre></div> </div> <p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/14
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoveDuplicatesFromSortedArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">removeDuplicates</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// If the array is null or has no elements, return 0 as there are no elements to process</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Initialize a variable k to track the position of the next unique element; start from 1 as the first element is always unique</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Loop through the array starting from the second element</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// If the current element is not equal to the previous one, it is unique</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                <span class="c1">// Place the unique element at the position k, then increment k</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">k</span><span class="o">++]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the count of unique elements, which is stored in k</span>
        <span class="k">return</span> <span class="n">k</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test array with sorted elements including duplicates</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>

        <span class="c1">// Call removeDuplicates to get the count of unique elements and modify the array in place</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">removeDuplicates</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Unique count: "</span> <span class="o">+</span> <span class="n">k</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Modified array: "</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.]]></summary></entry><entry><title type="html">16. 3Sum Closest</title><link href="https://zhengstar94.github.io//blog/2024/ThreeSumClosest/" rel="alternate" type="text/html" title="16. 3Sum Closest"/><published>2024-11-13T00:00:00+00:00</published><updated>2024-11-13T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ThreeSumClosest</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ThreeSumClosest/"><![CDATA[<ul> <li>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> of length <code class="language-plaintext highlighter-rouge">n</code> and an integer <code class="language-plaintext highlighter-rouge">target</code>, find three integers in <code class="language-plaintext highlighter-rouge">nums</code> such that the sum is closest to <code class="language-plaintext highlighter-rouge">target</code>.</li> <li>Return <em>the sum of the three integers</em>.</li> <li>You may assume that each input would have exactly one solution.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/13
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreeSumClosest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">threeSumClosest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Sort the array first to use two-pointer technique</span>
        <span class="c1">// This allows us to move pointers based on sum comparison</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>

        <span class="c1">// Initialize result with first three numbers</span>
        <span class="c1">// This ensures we have a valid sum to start with</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>

        <span class="c1">// Iterate through the array, fixing the first number</span>
        <span class="c1">// We stop at length-2 because we need at least 2 more numbers after i</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="c1">// Skip duplicates for the first number to avoid duplicate combinations</span>
            <span class="c1">// This optimization reduces unnecessary calculations</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]){</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Initialize two pointers:</span>
            <span class="c1">// left: starts right after current number i</span>
            <span class="c1">// right: starts from the end of array</span>
            <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

            <span class="c1">// Use two pointers to find the other two numbers</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">){</span>
                <span class="c1">// Calculate current sum of three numbers</span>
                <span class="kt">int</span> <span class="n">currentSum</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>

                <span class="c1">// If we find an exact match, we can return immediately</span>
                <span class="c1">// as this is the closest possible sum to target</span>
                <span class="k">if</span><span class="o">(</span><span class="n">currentSum</span> <span class="o">==</span> <span class="n">target</span><span class="o">){</span>
                    <span class="k">return</span> <span class="n">currentSum</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// Update result if current sum is closer to target than previous result</span>
                <span class="c1">// Using absolute difference to compare distances to target</span>
                <span class="k">if</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">currentSum</span> <span class="o">-</span> <span class="n">target</span><span class="o">)</span> <span class="o">&lt;</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">result</span> <span class="o">-</span> <span class="n">target</span><span class="o">)){</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="n">currentSum</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// If current sum is less than target, we need a larger sum</span>
                <span class="c1">// So move left pointer to the right to get larger numbers</span>
                <span class="k">if</span><span class="o">(</span><span class="n">currentSum</span> <span class="o">&lt;</span> <span class="n">target</span><span class="o">){</span>
                    <span class="n">left</span><span class="o">++;</span>

                    <span class="c1">// Skip duplicates for the second number</span>
                    <span class="c1">// This optimization avoids duplicate combinations</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">==</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]){</span>
                        <span class="n">left</span><span class="o">++;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="c1">// If current sum is greater than target, we need a smaller sum</span>
                <span class="c1">// So move right pointer to the left to get smaller numbers</span>
                <span class="k">else</span><span class="o">{</span>
                    <span class="n">right</span><span class="o">--;</span>

                    <span class="c1">// Skip duplicates for the third number</span>
                    <span class="c1">// This optimization avoids duplicate combinations</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">==</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]){</span>
                        <span class="n">right</span><span class="o">--;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// Return the closest sum found</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case</span>
        <span class="c1">// nums = [ -1, 2, 1, -4 ], target = 1</span>
        <span class="c1">// Expected output: 2 (sum of -1 + 1 + 2)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">4</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Print input array, target value, and result</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input array: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">nums</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Target value: "</span> <span class="o">+</span> <span class="n">target</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Closest three sum: "</span> <span class="o">+</span> <span class="n">threeSumClosest</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">target</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.]]></summary></entry><entry><title type="html">88.Merge Sorted Array</title><link href="https://zhengstar94.github.io//blog/2024/MergeSortedArray/" rel="alternate" type="text/html" title="88.Merge Sorted Array"/><published>2024-11-12T00:00:00+00:00</published><updated>2024-11-12T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MergeSortedArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MergeSortedArray/"><![CDATA[<ul> <li>You are given two integer arrays <code class="language-plaintext highlighter-rouge">nums1</code> and <code class="language-plaintext highlighter-rouge">nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code class="language-plaintext highlighter-rouge">m</code> and <code class="language-plaintext highlighter-rouge">n</code>, representing the number of elements in <code class="language-plaintext highlighter-rouge">nums1</code> and <code class="language-plaintext highlighter-rouge">nums2</code> respectively.</li> <li><strong>Merge</strong> <code class="language-plaintext highlighter-rouge">nums1</code> and <code class="language-plaintext highlighter-rouge">nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</li> <li>The final sorted array should not be returned by the function, but instead be <em>stored inside the array</em> <code class="language-plaintext highlighter-rouge">nums1</code>. To accommodate this, <code class="language-plaintext highlighter-rouge">nums1</code> has a length of <code class="language-plaintext highlighter-rouge">m + n</code>, where the first <code class="language-plaintext highlighter-rouge">m</code> elements denote the elements that should be merged, and the last <code class="language-plaintext highlighter-rouge">n</code> elements are set to <code class="language-plaintext highlighter-rouge">0</code> and should be ignored. <code class="language-plaintext highlighter-rouge">nums2</code> has a length of <code class="language-plaintext highlighter-rouge">n</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m+n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/12
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MergeSortedArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize pointers:</span>
        <span class="c1">// p1 points to the last valid element in nums1</span>
        <span class="kt">int</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="c1">// p2 points to the last element in nums2</span>
        <span class="kt">int</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="c1">// p points to the last position in the merged array</span>
        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Compare elements from both arrays and place them in correct position</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">p1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">p2</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums1</span><span class="o">[</span><span class="n">p1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">nums2</span><span class="o">[</span><span class="n">p2</span><span class="o">])</span> <span class="o">{</span>
                <span class="c1">// If element from nums1 is larger, place it at the end</span>
                <span class="n">nums1</span><span class="o">[</span><span class="n">p</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums1</span><span class="o">[</span><span class="n">p1</span><span class="o">];</span>
                <span class="n">p1</span><span class="o">--;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// If element from nums2 is larger or equal, place it at the end</span>
                <span class="n">nums1</span><span class="o">[</span><span class="n">p</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums2</span><span class="o">[</span><span class="n">p2</span><span class="o">];</span>
                <span class="n">p2</span><span class="o">--;</span>
            <span class="o">}</span>
            <span class="c1">// Move the merger pointer one position back</span>
            <span class="n">p</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="c1">// If there are remaining elements in nums2, copy them to the beginning of nums1</span>
        <span class="c1">// Note: if p1 &gt;= 0, no action needed as elements are already in place</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">nums1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">p2</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Regular case with equal length arrays</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>  <span class="c1">// Array with extra space at end</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>  <span class="c1">// Number of elements in nums1</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>  <span class="c1">// Number of elements in nums2</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Before merge nums1: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"nums2: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>

        <span class="n">merge</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">nums2</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"After merge: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: Edge case where second array is empty</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums4</span> <span class="o">=</span> <span class="o">{};</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Before merge nums1: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"nums2: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums4</span><span class="o">);</span>

        <span class="n">merge</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">nums4</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"After merge: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Edge case where first array is empty</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums6</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">};</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Before merge nums1: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums5</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"nums2: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums6</span><span class="o">);</span>

        <span class="n">merge</span><span class="o">(</span><span class="n">nums5</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">nums6</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"After merge: "</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums5</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Helper method to print array contents in a formatted way
     *
     * @param arr The array to be printed
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.]]></summary></entry><entry><title type="html">680.Valid Palindrome II</title><link href="https://zhengstar94.github.io//blog/2024/ValidPalindromeII/" rel="alternate" type="text/html" title="680.Valid Palindrome II"/><published>2024-11-11T00:00:00+00:00</published><updated>2024-11-11T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ValidPalindromeII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ValidPalindromeII/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code>, return <code class="language-plaintext highlighter-rouge">true</code> <em>if the</em> <code class="language-plaintext highlighter-rouge">s</code> <em>can be palindrome after deleting <strong>at most one</strong> character from it</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aba"
Output: true
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abc"
Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/11/11
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidPalindromeII</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">validPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize two pointers, left starts from beginning, right starts from end</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Keep checking characters from both ends moving towards center</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">){</span>
            <span class="c1">// If characters at left and right pointers don't match</span>
            <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">)){</span>
                <span class="c1">// Try two possibilities:</span>
                <span class="c1">// 1. Remove character at left pointer (check substring from left+1 to right)</span>
                <span class="c1">// 2. Remove character at right pointer (check substring from left to right-1)</span>
                <span class="k">return</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">right</span><span class="o">)</span> <span class="o">||</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="c1">// Move pointers towards center if characters match</span>
            <span class="n">left</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">--;</span>
        <span class="o">}</span>
        <span class="c1">// If we get here, string is already a palindrome</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Compare characters from both ends moving towards center</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">)){</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// Move pointers towards center if characters match</span>
            <span class="n">left</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">--;</span>
        <span class="o">}</span>
        <span class="c1">// If we get here, substring is a palindrome</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Already a palindrome</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">validPalindrome</span><span class="o">(</span><span class="s">"aba"</span><span class="o">));</span>  <span class="c1">// Should print: true</span>

        <span class="c1">// Test case 2: Can become palindrome by removing one character</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">validPalindrome</span><span class="o">(</span><span class="s">"abca"</span><span class="o">));</span> <span class="c1">// Should print: true</span>

        <span class="c1">// Test case 3: Cannot become palindrome by removing one character</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">validPalindrome</span><span class="o">(</span><span class="s">"abd"</span><span class="o">));</span>  <span class="c1">// Should print: false</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[Given a string s, return true if the s can be palindrome after deleting at most one character from it.]]></summary></entry></feed>