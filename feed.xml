<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-10T23:59:30+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">3456. Find Special Substring of Length K</title><link href="https://zhengstar94.github.io//blog/2025/FindSpecialSubstringOfLengthK/" rel="alternate" type="text/html" title="3456. Find Special Substring of Length K"/><published>2025-04-10T00:00:00+00:00</published><updated>2025-04-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/FindSpecialSubstringOfLengthK</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/FindSpecialSubstringOfLengthK/"><![CDATA[<ul> <li>You are given a string <code class="language-plaintext highlighter-rouge">s</code> and an integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>Determine if there exists a substring of length <strong>exactly</strong> <code class="language-plaintext highlighter-rouge">k</code> in <code class="language-plaintext highlighter-rouge">s</code> that satisfies the following conditions: <ul> <li>The substring consists of <strong>only one distinct character</strong> (e.g., <code class="language-plaintext highlighter-rouge">"aaa"</code> or <code class="language-plaintext highlighter-rouge">"bbb"</code>).</li> <li>If there is a character <strong>immediately before</strong> the substring, it must be different from the character in the substring.</li> <li>If there is a character <strong>immediately after</strong> the substring, it must also be different from the character in the substring.</li> </ul> </li> <li>Return <code class="language-plaintext highlighter-rouge">true</code> if such a substring exists. Otherwise, return <code class="language-plaintext highlighter-rouge">false</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aaabaaa", k = 3

Output: true

Explanation:

The substring s[4..6] == "aaa" satisfies the conditions.

It has a length of 3.
All characters are the same.
The character before "aaa" is 'b', which is different from 'a'.
There is no character after "aaa".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abc", k = 2

Output: false

Explanation:

There is no substring of length 2 that consists of one distinct character and satisfies the conditions.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.GroupedLoop</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindSpecialSubstringOfLengthK</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">hasSpecialSubstring</span><span class="o">(</span><span class="nc">String</span> <span class="no">S</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Convert string to char array for easier manipulation</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="no">S</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="c1">// Get the length of the string</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="c1">// Initialize pointer for traversing the string</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Outer loop: process each group of consecutive same characters</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Mark the start of current group</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>

            <span class="c1">// Inner loop: find the end of current group of same characters</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">s</span><span class="o">[</span><span class="n">start</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Calculate the length of current group</span>
            <span class="kt">int</span> <span class="n">groupLength</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>

            <span class="c1">// Check if current group length matches required length k</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">groupLength</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Check character before the group (if exists)</span>
                <span class="c1">// Skip if previous character is same as group character</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">[</span><span class="n">start</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">s</span><span class="o">[</span><span class="n">start</span><span class="o">])</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// Check character after the group (if exists)</span>
                <span class="c1">// Skip if next character is same as group character</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">s</span><span class="o">[</span><span class="n">start</span><span class="o">])</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// Found valid special substring</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// No valid special substring found</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"aaabaaa"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s1</span> <span class="o">+</span> <span class="s">"\", k = "</span> <span class="o">+</span> <span class="n">k1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected output: true"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual output: "</span> <span class="o">+</span> <span class="n">hasSpecialSubstring</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s2</span> <span class="o">+</span> <span class="s">"\", k = "</span> <span class="o">+</span> <span class="n">k2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected output: false"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual output: "</span> <span class="o">+</span> <span class="n">hasSpecialSubstring</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode GroupedLoop"/><category term="Easy"/><summary type="html"><![CDATA[You are given a string s and an integer k. Determine if there exists a substring of length exactly k in s that satisfies the following conditions: The substring consists of only one distinct character (e.g., "aaa" or "bbb"). If there is a character immediately before the substring, it must be different from the character in the substring. If there is a character immediately after the substring, it must also be different from the character in the substring. Return true if such a substring exists. Otherwise, return false.]]></summary></entry><entry><title type="html">2414. Length of the Longest Alphabetical Continuous Substring</title><link href="https://zhengstar94.github.io//blog/2025/LengthOfTheLongestAlphabeticalContinuousSubstring/" rel="alternate" type="text/html" title="2414. Length of the Longest Alphabetical Continuous Substring"/><published>2025-04-09T00:00:00+00:00</published><updated>2025-04-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/LengthOfTheLongestAlphabeticalContinuousSubstring</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/LengthOfTheLongestAlphabeticalContinuousSubstring/"><![CDATA[<ul> <li>An <strong>alphabetical continuous string</strong> is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string <code class="language-plaintext highlighter-rouge">"abcdefghijklmnopqrstuvwxyz"</code>. <ul> <li>For example, <code class="language-plaintext highlighter-rouge">"abc"</code> is an alphabetical continuous string, while <code class="language-plaintext highlighter-rouge">"acb"</code> and <code class="language-plaintext highlighter-rouge">"za"</code> are not.</li> </ul> </li> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code> consisting of lowercase letters only, return the <em>length of the <strong>longest</strong> alphabetical continuous substring.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abacaba"
Output: 2
Explanation: There are 4 distinct continuous substrings: "a", "b", "c" and "ab".
"ab" is the longest continuous substring.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abcde"
Output: 5
Explanation: "abcde" is the longest continuous substring.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.GroupedLoop</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LengthOfTheLongestAlphabeticalContinuousSubstring</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">longestContinuousSubstring</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Initialize variables</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>          <span class="c1">// Length of the string</span>
        <span class="kt">int</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>           <span class="c1">// Track maximum length found</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>                   <span class="c1">// Current position in string</span>

        <span class="c1">// Process string in groups</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>           <span class="c1">// Start of current group</span>

            <span class="c1">// Extend the current group while characters are consecutive</span>
            <span class="c1">// i + 1 &lt; n ensures we don't access beyond string bounds</span>
            <span class="c1">// charAt(i + 1) == charAt(i) + 1 checks if next char is consecutive</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">){</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Calculate length of current group</span>
            <span class="c1">// Add 1 to include the starting character</span>
            <span class="kt">int</span> <span class="n">groupLength</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

            <span class="c1">// Update maximum length if current group is longer</span>
            <span class="n">maxLength</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLength</span><span class="o">,</span> <span class="n">groupLength</span><span class="o">);</span>

            <span class="c1">// Move to start of next group</span>
            <span class="n">i</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">maxLength</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Multiple continuous substrings of different lengths</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"abacaba"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: "</span> <span class="o">+</span> <span class="n">test1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 2"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">longestContinuousSubstring</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: Perfect continuous string</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"abcde"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2: "</span> <span class="o">+</span> <span class="n">test2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 5"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">longestContinuousSubstring</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Single character</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"a"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3: "</span> <span class="o">+</span> <span class="n">test3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 1"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">longestContinuousSubstring</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Descending order string</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"zyxw"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 4: "</span> <span class="o">+</span> <span class="n">test4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 1"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">longestContinuousSubstring</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 5: Multiple continuous segments</span>
        <span class="nc">String</span> <span class="n">test5</span> <span class="o">=</span> <span class="s">"abcdeijkl"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 5: "</span> <span class="o">+</span> <span class="n">test5</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 5"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">longestContinuousSubstring</span><span class="o">(</span><span class="n">test5</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode GroupedLoop"/><category term="Medium"/><summary type="html"><![CDATA[An alphabetical continuous string is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string "abcdefghijklmnopqrstuvwxyz". For example, "abc" is an alphabetical continuous string, while "acb" and "za" are not. Given a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.]]></summary></entry><entry><title type="html">1869. Longer Contiguous Segments of Ones than Zeros</title><link href="https://zhengstar94.github.io//blog/2025/LongerContiguousSegmentsOfOnesThanZeros/" rel="alternate" type="text/html" title="1869. Longer Contiguous Segments of Ones than Zeros"/><published>2025-04-09T00:00:00+00:00</published><updated>2025-04-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/LongerContiguousSegmentsOfOnesThanZeros</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/LongerContiguousSegmentsOfOnesThanZeros/"><![CDATA[<ul> <li>Given a binary string <code class="language-plaintext highlighter-rouge">s</code>, return <code class="language-plaintext highlighter-rouge">true</code> <em>if the <strong>longest</strong> contiguous segment of</em> <code class="language-plaintext highlighter-rouge">1</code>‘<em>s is <strong>strictly longer</strong> than the <strong>longest</strong> contiguous segment of</em> <code class="language-plaintext highlighter-rouge">0</code>‘<em>s in</em> <code class="language-plaintext highlighter-rouge">s</code>, or return <code class="language-plaintext highlighter-rouge">false</code> <em>otherwise</em>. <ul> <li>For example, in <code class="language-plaintext highlighter-rouge">s = "110100010"</code> the longest continuous segment of <code class="language-plaintext highlighter-rouge">1</code>s has length <code class="language-plaintext highlighter-rouge">2</code>, and the longest continuous segment of <code class="language-plaintext highlighter-rouge">0</code>s has length <code class="language-plaintext highlighter-rouge">3</code>.</li> </ul> </li> <li>Note that if there are no <code class="language-plaintext highlighter-rouge">0</code>’s, then the longest continuous segment of <code class="language-plaintext highlighter-rouge">0</code>’s is considered to have a length <code class="language-plaintext highlighter-rouge">0</code>. The same applies if there is no <code class="language-plaintext highlighter-rouge">1</code>’s.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "1101"
Output: true
Explanation:
The longest contiguous segment of 1s has length 2: "1101"
The longest contiguous segment of 0s has length 1: "1101"
The segment of 1s is longer, so return true.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "111000"
Output: false
Explanation:
The longest contiguous segment of 1s has length 3: "111000"
The longest contiguous segment of 0s has length 3: "111000"
The segment of 1s is not longer, so return false.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "110100010"
Output: false
Explanation:
The longest contiguous segment of 1s has length 2: "110100010"
The longest contiguous segment of 0s has length 3: "110100010"
The segment of 1s is not longer, so return false.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.GroupedLoop</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongerContiguousSegmentsOfOnesThanZeros</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">checkZeroOnes</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of input string</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// Variables to track the maximum consecutive counts of 1's and 0's</span>
        <span class="kt">int</span> <span class="n">maxOnes</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">maxZeros</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Index for traversing the string</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Process the string using grouped loop pattern</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Mark the start position of current group</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>

            <span class="c1">// Get the character that defines current group (either '0' or '1')</span>
            <span class="kt">char</span> <span class="n">currentChar</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>

            <span class="c1">// Continue while we see the same character</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">currentChar</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Calculate the length of current continuous group</span>
            <span class="kt">int</span> <span class="n">groupLength</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>

            <span class="c1">// Update the appropriate maximum count based on current character</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">currentChar</span> <span class="o">==</span> <span class="sc">'1'</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">maxOnes</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxOnes</span><span class="o">,</span> <span class="n">groupLength</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">maxZeros</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxZeros</span><span class="o">,</span> <span class="n">groupLength</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return true if longest segment of 1's is strictly longer than 0's</span>
        <span class="k">return</span> <span class="n">maxOnes</span> <span class="o">&gt;</span> <span class="n">maxZeros</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Basic case with mixed 1's and 0's</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"1101"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: "</span> <span class="o">+</span> <span class="n">test1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: true"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">checkZeroOnes</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: Equal length segments</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"11000"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2: "</span> <span class="o">+</span> <span class="n">test2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: false"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">checkZeroOnes</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Single character</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"1"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3: "</span> <span class="o">+</span> <span class="n">test3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: true"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">checkZeroOnes</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Alternating pattern</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"101010"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 4: "</span> <span class="o">+</span> <span class="n">test4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: false"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">checkZeroOnes</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 5: Long continuous sequence</span>
        <span class="nc">String</span> <span class="n">test5</span> <span class="o">=</span> <span class="s">"111000111111"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 5: "</span> <span class="o">+</span> <span class="n">test5</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: true"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">checkZeroOnes</span><span class="o">(</span><span class="n">test5</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode GroupedLoop"/><category term="Easy"/><summary type="html"><![CDATA[Given a binary string s, return true if the longest contiguous segment of 1‘s is strictly longer than the longest contiguous segment of 0‘s in s, or return false otherwise. For example, in s="110100010" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3. Note that if there are no 0’s, then the longest continuous segment of 0’s is considered to have a length 0. The same applies if there is no 1’s.]]></summary></entry><entry><title type="html">3375. Minimum Operations to Make Array Values Equal to K</title><link href="https://zhengstar94.github.io//blog/2025/MinimumOperationsToMakeArrayValuesEqualToK/" rel="alternate" type="text/html" title="3375. Minimum Operations to Make Array Values Equal to K"/><published>2025-04-09T00:00:00+00:00</published><updated>2025-04-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MinimumOperationsToMakeArrayValuesEqualToK</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MinimumOperationsToMakeArrayValuesEqualToK/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>An integer <code class="language-plaintext highlighter-rouge">h</code> is called <strong>valid</strong> if all values in the array that are <strong>strictly greater</strong> than <code class="language-plaintext highlighter-rouge">h</code> are <em>identical</em>.</li> <li>For example, if <code class="language-plaintext highlighter-rouge">nums = [10, 8, 10, 8]</code>, a <strong>valid</strong> integer is <code class="language-plaintext highlighter-rouge">h = 9</code> because all <code class="language-plaintext highlighter-rouge">nums[i] &gt; 9</code> are equal to 10, but 5 is not a <strong>valid</strong> integer.</li> <li>You are allowed to perform the following operation on <code class="language-plaintext highlighter-rouge">nums</code>: <ul> <li>Select an integer <code class="language-plaintext highlighter-rouge">h</code> that is <em>valid</em> for the <strong>current</strong> values in <code class="language-plaintext highlighter-rouge">nums</code>.</li> <li>For each index <code class="language-plaintext highlighter-rouge">i</code> where <code class="language-plaintext highlighter-rouge">nums[i] &gt; h</code>, set <code class="language-plaintext highlighter-rouge">nums[i]</code> to <code class="language-plaintext highlighter-rouge">h</code>.</li> </ul> </li> <li>Return the <strong>minimum</strong> number of operations required to make every element in <code class="language-plaintext highlighter-rouge">nums</code> <strong>equal</strong> to <code class="language-plaintext highlighter-rouge">k</code>. If it is impossible to make all elements equal to <code class="language-plaintext highlighter-rouge">k</code>, return -1.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [5,2,5,4,5], k = 2

Output: 2

Explanation:

The operations can be performed in order using valid integers 4 and then 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,2], k = 2

Output: -1

Explanation:

It is impossible to make all the values equal to 2.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [9,7,5,3], k = 1

Output: 4

Explanation:

The operations can be performed using valid integers in the order 7, 5, 3, and 1.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumOperationsToMakeArrayValuesEqualToK</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minOperations</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Find the minimum value in the array</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">nums</span><span class="o">).</span><span class="na">min</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">();</span>

        <span class="c1">// If k is greater than the minimum value, it's impossible to make all elements equal to k</span>
        <span class="c1">// because we can only decrease values, never increase them</span>
        <span class="k">if</span><span class="o">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="n">min</span><span class="o">){</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Count the number of distinct elements in the array</span>
        <span class="c1">// This represents the base number of operations needed</span>
        <span class="kt">int</span> <span class="n">distinctCount</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">nums</span><span class="o">).</span><span class="na">distinct</span><span class="o">().</span><span class="na">count</span><span class="o">();</span>

        <span class="c1">// If k equals the minimum value, we need one less operation</span>
        <span class="c1">// because the minimum value is already at the target</span>
        <span class="k">return</span> <span class="n">distinctCount</span> <span class="o">-</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">min</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Multiple operations needed</span>
        <span class="c1">// Expected: 2 operations to make all elements equal to 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">minOperations</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test Case 2: Impossible case (contains element smaller than k)</span>
        <span class="c1">// Expected: -1 as we can't increase 1 to become 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">minOperations</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span> <span class="c1">// Expected output: -1</span>

        <span class="c1">// Test Case 3: Multiple distinct values</span>
        <span class="c1">// Expected: 4 operations to make all elements equal to 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">minOperations</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">k3</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>

        <span class="c1">// Test Case 4: All elements already equal</span>
        <span class="c1">// Expected: 0 operations as all elements are already equal to k</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k4</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4 Result: "</span> <span class="o">+</span> <span class="n">minOperations</span><span class="o">(</span><span class="n">nums4</span><span class="o">,</span> <span class="n">k4</span><span class="o">));</span> <span class="c1">// Expected output: 0</span>

        <span class="c1">// Test Case 5: Single element</span>
        <span class="c1">// Expected: 1 operation to reduce 10 to 5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k5</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 5 Result: "</span> <span class="o">+</span> <span class="n">minOperations</span><span class="o">(</span><span class="n">nums5</span><span class="o">,</span> <span class="n">k5</span><span class="o">));</span> <span class="c1">// Expected output: 1</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given an integer array nums and an integer k. An integer h is called valid if all values in the array that are strictly greater than h are identical. For example, if nums=[10, 8, 10, 8], a valid integer is h=9 because all nums[i] &gt; 9 are equal to 10, but 5 is not a valid integer. You are allowed to perform the following operation on nums: Select an integer h that is valid for the current values in nums. For each index i where nums[i] &gt; h, set nums[i] to h. Return the minimum number of operations required to make every element in nums equal to k. If it is impossible to make all elements equal to k, return -1.]]></summary></entry><entry><title type="html">1446. Consecutive Characters</title><link href="https://zhengstar94.github.io//blog/2025/ConsecutiveCharacters/" rel="alternate" type="text/html" title="1446. Consecutive Characters"/><published>2025-04-08T00:00:00+00:00</published><updated>2025-04-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ConsecutiveCharacters</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ConsecutiveCharacters/"><![CDATA[<ul> <li>The <strong>power</strong> of the string is the maximum length of a non-empty substring that contains only one unique character.</li> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code>, return <em>the <strong>power</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "leetcode"
Output: 2
Explanation: The substring "ee" is of length 2 with the character 'e' only.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abbcccddddeeeeedcba"
Output: 5
Explanation: The substring "eeeee" is of length 5 with the character 'e' only.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.GroupedLoop</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConsecutiveCharacters</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maxPower</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get string length</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="c1">// Track maximum consecutive count found</span>
        <span class="kt">int</span> <span class="n">maxCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Current position in string</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Process string using group cycle pattern</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Mark start of current group</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="c1">// Get character for current group</span>
            <span class="kt">char</span> <span class="n">currentChar</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>

            <span class="c1">// Extend group while same character continues</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">currentChar</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Calculate length of current group</span>
            <span class="kt">int</span> <span class="n">groupLength</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
            <span class="c1">// Update maximum count if current group is longer</span>
            <span class="n">maxCount</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxCount</span><span class="o">,</span> <span class="n">groupLength</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">maxCount</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: String with two consecutive 'e's</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">maxPower</span><span class="o">(</span><span class="s">"leetcode"</span><span class="o">));</span>  <span class="c1">// Expected: 2 (ee)</span>

        <span class="c1">// Test case 2: String with multiple groups of increasing length</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">maxPower</span><span class="o">(</span><span class="s">"abbcccddddeeeee"</span><span class="o">));</span>  <span class="c1">// Expected: 5 (eeeee)</span>

        <span class="c1">// Test case 3: Edge case - single character</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">maxPower</span><span class="o">(</span><span class="s">"a"</span><span class="o">));</span>  <span class="c1">// Expected: 1</span>

        <span class="c1">// Test case 4: Edge case - no consecutive characters</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 4: "</span> <span class="o">+</span> <span class="n">maxPower</span><span class="o">(</span><span class="s">"abc"</span><span class="o">));</span>  <span class="c1">// Expected: 1</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode GroupedLoop"/><category term="Easy"/><summary type="html"><![CDATA[The power of the string is the maximum length of a non-empty substring that contains only one unique character. Given a string s, return the power of s.]]></summary></entry><entry><title type="html">3396. Minimum Number of Operations to Make Elements in Array Distinct</title><link href="https://zhengstar94.github.io//blog/2025/MinimumNumberOfOperationsToMakeElementsInArrayDistinct/" rel="alternate" type="text/html" title="3396. Minimum Number of Operations to Make Elements in Array Distinct"/><published>2025-04-08T00:00:00+00:00</published><updated>2025-04-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MinimumNumberOfOperationsToMakeElementsInArrayDistinct</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MinimumNumberOfOperationsToMakeElementsInArrayDistinct/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code>. You need to ensure that the elements in the array are <strong>distinct</strong>. To achieve this, you can perform the following operation any number of times: <ul> <li>Remove 3 elements from the beginning of the array. If the array has fewer than 3 elements, remove all remaining elements.</li> </ul> </li> <li><strong>Note</strong> that an empty array is considered to have distinct elements. Return the <strong>minimum</strong> number of operations needed to make the elements in the array distinct.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3,4,2,3,3,5,7]
Output: 2

Explanation:

In the first operation, the first 3 elements are removed, resulting in the array [4, 2, 3, 3, 5, 7].
In the second operation, the next 3 elements are removed, resulting in the array [3, 5, 7], which has distinct elements.
Therefore, the answer is 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,5,6,4,4]
Output: 2

Explanation:
In the first operation, the first 3 elements are removed, resulting in the array [4, 4].
In the second operation, all remaining elements are removed, resulting in an empty array.
Therefore, the answer is 2.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [6,7,8,9]
Output: 0

Explanation:
The array already contains distinct elements. Therefore, the answer is 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumNumberOfOperationsToMakeElementsInArrayDistinct</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minimumOperations</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// HashSet to store unique elements seen so far</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Traverse array from end to start</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="c1">// Try to add current element to set</span>
            <span class="c1">// seen.add() returns false if element already exists</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="c1">// When duplicate found:</span>
                <span class="c1">// i/3 + 1 calculates ceiling of (i+1)/3</span>
                <span class="c1">// This gives minimum operations needed to remove elements up to index i</span>
                <span class="k">return</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// Return 0 if no duplicates found</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Array with multiple duplicates</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">7</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">minimumOperations</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span> <span class="c1">// Expected: 2</span>

        <span class="c1">// Test case 2: Array with duplicates near end</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">4</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">minimumOperations</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span> <span class="c1">// Expected: 2</span>

        <span class="c1">// Test case 3: Array with no duplicates</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">minimumOperations</span><span class="o">(</span><span class="n">nums3</span><span class="o">));</span> <span class="c1">// Expected: 0</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given an integer array nums. You need to ensure that the elements in the array are distinct. To achieve this, you can perform the following operation any number of times: Remove 3 elements from the beginning of the array. If the array has fewer than 3 elements, remove all remaining elements. Note that an empty array is considered to have distinct elements. Return the minimum number of operations needed to make the elements in the array distinct.]]></summary></entry><entry><title type="html">Group cycle</title><link href="https://zhengstar94.github.io//blog/2025/GroupCycle/" rel="alternate" type="text/html" title="Group cycle"/><published>2025-04-07T00:00:00+00:00</published><updated>2025-04-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/GroupCycle</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/GroupCycle/"><![CDATA[<h2 id="group-cycle">Group cycle</h2> <h3 id="core-concept">Core Concept</h3> <p>Group cycle is a powerful algorithmic technique specifically designed for handling problems that require dividing arrays or sequences into several groups and applying the same logical processing to each group. This pattern is particularly effective when dealing with data that has segmented characteristics, significantly simplifying code structure and improving readability.</p> <p>When we face problems that require dividing continuous elements into different groups according to specific conditions, the group cycle pattern provides a clear solution. Unlike traditional single-layer loops, group cycle uses a double-layer loop structure, with outer and inner loops each having their own responsibilities:</p> <ol> <li><strong>Outer Loop</strong>: Responsible for two key tasks <ul> <li>Inter-group preparation: Recording the starting position of each group</li> <li>Post-group statistics: Updating global results after processing a group (e.g., maximum values, counts, etc.)</li> </ul> </li> <li><strong>Inner Loop</strong>: Focuses on single group processing <ul> <li>Determining the current group’s boundary: Finding where the group ends</li> <li>Applying intra-group processing logic: Executing required operations on the elements of the current group</li> </ul> </li> </ol> <p>The key advantage of this structure lies in its clear logic and well-defined boundaries, especially that it doesn’t require special processing for the last group of data, which is often a common source of errors in coding.</p> <h3 id="example-problem">Example Problem</h3> <h4 id="problem-description">Problem Description</h4> <p>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">threshold</code>, we need to find the longest subarray that satisfies the following conditions:</p> <ol> <li>The first element of the subarray must be even</li> <li>The parity of adjacent elements in the subarray must alternate (one odd, one even)</li> <li>All elements in the subarray must not exceed the threshold We need to return the length of the longest subarray that satisfies these conditions.</li> </ol> <p><strong>Example:</strong></p> <ul> <li><strong>Input:</strong> nums = [3,2,5,4], threshold = 5</li> <li><strong>Output:</strong> 3</li> <li><strong>Explanation:</strong> The longest subarray that satisfies the conditions is [2,5,4], with a length of 3.</li> </ul> <h4 id="algorithm-implementation">Algorithm Implementation</h4> <p>Using group cycle to solve this problem, we implement the following:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">longestAlternatingSubarray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">threshold</span> <span class="o">||</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">++;</span> <span class="c1">// Skip elements that don't meet the initial conditions</span>
            <span class="k">continue</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="c1">// Record the starting position of this group</span>
        <span class="n">i</span><span class="o">++;</span> <span class="c1">// Starting position already meets requirements, start judging from next position</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">threshold</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="c1">// From start to i-1 is a subarray that meets the requirements (and cannot be extended further)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h4 id="execution-step-analysis">Execution Step Analysis</h4> <p>Using the example input nums = [3,2,5,4], threshold = 5, the execution process is as follows:</p> <ol> <li><strong>Initialization</strong>: n = 4, ans = 0, i = 0</li> <li><strong>First Outer Loop</strong>: <ul> <li>nums[0] = 3, is odd, doesn’t meet initial condition (must be even)</li> <li>i++ → i = 1, continue to next iteration</li> </ul> </li> <li><strong>Second Outer Loop</strong>: <ul> <li>nums[1] = 2, is even and ≤ threshold, meets initial condition</li> <li>Record start = 1</li> <li>i++ → i = 2, enter inner loop</li> <li>Inner loop: <ul> <li>Check nums[2] = 5: ≤ threshold and has different parity from nums[1] (5 is odd, 2 is even)</li> <li>Meets condition, i++ → i = 3</li> <li>Check nums[3] = 4: ≤ threshold and has different parity from nums[2] (4 is even, 5 is odd)</li> <li>Meets condition, i++ → i = 4</li> <li>i = 4 is beyond array range, inner loop ends</li> </ul> </li> <li>Calculate subarray length: i - start = 4 - 1 = 3</li> <li>Update ans = max(0, 3) = 3</li> </ul> </li> <li><strong>Loop End</strong>: i = 4 ≥ n = 4, outer loop ends</li> <li><strong>Return Result</strong>: ans = 3</li> </ol> <h3 id="complexity-analysis">Complexity Analysis</h3> <ol> <li><strong>Time Complexity: O(n)</strong> <ul> <li>Although the code has nested loops, each element is visited at most once</li> <li>The outer loop variable i doesn’t simply increment, but jumps based on inner loop results</li> <li>All elements are processed only once in total, so the time complexity is O(n)</li> </ul> </li> <li><strong>Space Complexity: O(1)</strong> <ul> <li>Only uses a few variables (ans, i, start) to track state</li> <li>No additional data structures related to input size are used</li> </ul> </li> </ol> <h3 id="key-advantages">Key Advantages</h3> <ol> <li><strong>Clear Logic</strong> <ul> <li>Outer loop is responsible for finding suitable subarray starting points</li> <li>Inner loop is responsible for extending the subarray until it can’t be extended further</li> <li>Maximum length is updated immediately after group processing is complete</li> </ul> </li> <li><strong>Concise Code</strong> <ul> <li>No need for additional markers or complex condition judgments</li> <li>Naturally handles subarray boundaries through the concept of groups</li> </ul> </li> <li><strong>Avoids Common Errors</strong> <ul> <li>No need to specially process the last group of elements</li> <li>Boundary conditions are built into the loop structure</li> </ul> </li> <li><strong>Completed in One Pass</strong> <ul> <li>A single scan can find the answer, no need for repeated processing</li> <li>Ensures algorithm efficiency</li> </ul> </li> </ol> <h3 id="universal-pattern-of-group-cycle">Universal Pattern of Group Cycle</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">groupCycle</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        
        <span class="c1">// Inner loop: determine how far the current group can extend</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="cm">/* condition for continuing current group */</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">++;</span>
        <span class="o">}</span>
        
        <span class="c1">// Elements from index 'start' to 'i - 1' form one group</span>
        <span class="c1">// You can process the group here, for example:</span>
        <span class="c1">// int groupLength = i - start;</span>
        
        <span class="c1">// No need to do i++ here — the index has already been advanced inside the inner loop</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>The beauty of this pattern lies in the fact that the outer loop doesn’t simply increment the index step by step—instead, it jumps forward based on the result of the inner loop. This ensures that each element is processed exactly once, while maintaining both clarity and efficiency in the code.</p> <h3 id="best-practices">Best Practices</h3> <ol> <li><strong>Clearly Define Group Boundary Conditions</strong> <ul> <li>Clearly specify under what circumstances a new group starts</li> <li>Clearly specify under what circumstances the current group ends</li> </ul> </li> <li><strong>Skip Elements That Don’t Meet Conditions Early</strong> <ul> <li>Check and skip elements that can’t be group starting points in the outer loop</li> <li>Reduce unnecessary calculations and checks</li> </ul> </li> <li><strong>Correctly Increment Loop Variables</strong> <ul> <li>Distinguish between direct incrementation (i++) and condition-based incrementation</li> <li>Increment loop variables at appropriate times to avoid missing or duplicate processing</li> </ul> </li> <li><strong>Correctly Calculate Group Length</strong> <ul> <li>Group length is the end position minus the start position</li> <li>Update the answer immediately after group processing is complete</li> </ul> </li> <li><strong>Reasonably Use the Continue Statement</strong> <ul> <li>Use continue to skip conditions that don’t meet requirements</li> <li>Maintain the clarity of loop logic</li> </ul> </li> </ol> <h3 id="application-scenarios">Application Scenarios</h3> <p>The group cycle technique is applicable to various algorithmic problems, especially those involving data with segmented characteristics:</p> <ol> <li><strong>Processing Consecutive Identical Elements</strong> <ul> <li>Calculate the longest sequence of consecutive identical characters</li> <li>Compress consecutive repeated elements (e.g., AAABBC → 3A2B1C)</li> </ul> </li> <li><strong>Peak-Valley Analysis</strong> <ul> <li>Find peaks and valleys in arrays</li> <li>Analyze trend changes in time series data such as stock prices</li> </ul> </li> <li><strong>Interval Property Problems</strong> <ul> <li>Find the longest/shortest intervals that satisfy specific conditions</li> <li>Process sequences with alternating characteristics (such as odd-even alternating, up-down alternating)</li> </ul> </li> <li><strong>Pattern Recognition</strong> <ul> <li>Identify specific patterns or regularities in sequences</li> <li>Find substrings that satisfy specific rules in strings</li> </ul> </li> <li><strong>Sequence Segmentation Processing</strong> <ul> <li>Divide sequences into multiple segments with similar properties</li> <li>Apply different processing logic to different segments</li> </ul> </li> </ol> <h3 id="key-considerations">Key Considerations</h3> <p>When applying the group cycle technique, consider the following key factors:</p> <ol> <li><strong>Group Definition</strong> <ul> <li>Clearly define group start conditions: What kind of elements can serve as starting points for groups?</li> <li>Clearly define group end conditions: Under what circumstances does the current group end?</li> <li>These definitions directly determine the conditions and structure of the loop</li> </ul> </li> <li><strong>Handling Boundary Cases</strong> <ul> <li>Empty array processing: The algorithm needs to correctly handle cases where the input is empty</li> <li>Single element processing: Determine whether a valid group can be formed when the array has only one element</li> <li>No satisfying groups exist: Ensure the algorithm returns an appropriate default value (such as 0)</li> </ul> </li> <li><strong>Index Management</strong> <ul> <li>Index updates for inner and outer loops need to be correct, avoiding skipping elements or processing duplicates</li> <li>Pay special attention to index handling after the group’s starting position is confirmed</li> </ul> </li> <li><strong>Condition Optimization</strong> <ul> <li>The order of condition judgments may affect performance, especially the application of short-circuit logic</li> <li>In the inner loop, check conditions that are easier to fail first to end unnecessary calculations early</li> </ul> </li> <li><strong>Scalability</strong> <ul> <li>Consider whether the algorithm is easy to extend to similar problems or more complex variants</li> <li>Analysis of the universality and specificity of grouping conditions</li> </ul> </li> </ol> <h3 id="summary">Summary</h3> <p>Group cycle is an efficient algorithmic technique for handling sequence segmentation problems. Its core idea is to divide sequences into multiple continuous groups through clearly defined inter-group and intra-group logic, and apply unified processing to each group. The main features of this technique include:</p> <ol> <li><strong>Clear Structure</strong>: The outer loop is responsible for inter-group management and result updates, while the inner loop focuses on single group processing and boundary determination, with clear responsibilities.</li> <li><strong>High Efficiency</strong>: Despite using nested loops, each element is processed at most once, ensuring linear time complexity.</li> <li><strong>Concise Boundary Handling</strong>: Naturally handles boundary conditions through the loop structure, avoiding common boundary errors.</li> <li><strong>Wide Application Range</strong>: From simple processing of consecutive identical elements to complex pattern recognition, group cycle provides elegant solutions.</li> </ol>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[Group cycle]]></summary></entry><entry><title type="html">2760. Longest Even Odd Subarray With Threshold</title><link href="https://zhengstar94.github.io//blog/2025/LongestEvenOddSubarrayWithThreshold/" rel="alternate" type="text/html" title="2760. Longest Even Odd Subarray With Threshold"/><published>2025-04-07T00:00:00+00:00</published><updated>2025-04-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/LongestEvenOddSubarrayWithThreshold</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/LongestEvenOddSubarrayWithThreshold/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">threshold</code>.</li> <li>Find the length of the <strong>longest subarray</strong> of <code class="language-plaintext highlighter-rouge">nums</code> starting at index <code class="language-plaintext highlighter-rouge">l</code> and ending at index <code class="language-plaintext highlighter-rouge">r</code> <code class="language-plaintext highlighter-rouge">(0 &lt;= l &lt;= r &lt; nums.length)</code> that satisfies the following conditions: <ul> <li><code class="language-plaintext highlighter-rouge">nums[l] % 2 == 0</code></li> <li>For all indices <code class="language-plaintext highlighter-rouge">i</code> in the range <code class="language-plaintext highlighter-rouge">[l, r - 1]</code>, <code class="language-plaintext highlighter-rouge">nums[i] % 2 != nums[i + 1] % 2</code></li> <li>For all indices <code class="language-plaintext highlighter-rouge">i</code> in the range <code class="language-plaintext highlighter-rouge">[l, r]</code>, <code class="language-plaintext highlighter-rouge">nums[i] &lt;= threshold</code></li> </ul> </li> <li>Return *an integer denoting the length of the longest such subarray.**</li> <li><strong>*Note:</strong> A <strong>subarray</strong> is a contiguous non-empty sequence of elements within an array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,2,5,4], threshold = 5
Output: 3
Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 3 =&gt; [2,5,4]. This subarray satisfies the conditions.
Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2], threshold = 2
Output: 1
Explanation: In this example, we can select the subarray that starts at l = 1 and ends at r = 1 =&gt; [2]. 
It satisfies all the conditions and we can show that 1 is the maximum possible achievable length.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,3,4,5], threshold = 4
Output: 3
Explanation: In this example, we can select the subarray that starts at l = 0 and ends at r = 2 =&gt; [2,3,4]. 
It satisfies all the conditions.
Hence, the answer is the length of the subarray, 3. We can show that 3 is the maximum possible achievable length.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.GroupedLoop</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongestEvenOddSubarrayWithThreshold</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">longestAlternatingSubarray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">threshold</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>    <span class="c1">// Length of input array</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>            <span class="c1">// Variable to store the maximum length found</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>              <span class="c1">// Loop counter/pointer</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Skip numbers that are either above threshold or not even</span>
            <span class="c1">// as they cannot be the start of a valid subarray</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">threshold</span> <span class="o">||</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Found a valid starting position (even number within threshold)</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>      <span class="c1">// Mark the start of current valid subarray</span>
            <span class="n">i</span><span class="o">++;</span>                <span class="c1">// Move to next position as start is already validated</span>

            <span class="c1">// Extend the subarray as long as conditions are met:</span>
            <span class="c1">// 1. Within array bounds</span>
            <span class="c1">// 2. Current element &lt;= threshold</span>
            <span class="c1">// 3. Current element has different parity than previous element</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span>
                    <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">threshold</span> <span class="o">&amp;&amp;</span>
                    <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Update the maximum length if current subarray is longer</span>
            <span class="c1">// i-start gives the length of current valid subarray</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="n">i</span> <span class="o">-</span> <span class="n">start</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: [3,2,5,4], threshold=5</span>
        <span class="c1">// Expected output: 3, because subarray [2,5,4] satisfies:</span>
        <span class="c1">// - Starts with even number 2</span>
        <span class="c1">// - 2 and 5 have different parity, 5 and 4 have different parity</span>
        <span class="c1">// - All numbers &lt;= 5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">4</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">longestAlternatingSubarray</span><span class="o">(</span><span class="n">test1</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>  <span class="c1">// Output: 3</span>

        <span class="c1">// Test Case 2: [1,2], threshold=2</span>
        <span class="c1">// Expected output: 1, because only [2] satisfies conditions</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">longestAlternatingSubarray</span><span class="o">(</span><span class="n">test2</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>  <span class="c1">// Output: 1</span>

        <span class="c1">// Test Case 3: [2,3,4,5], threshold=4</span>
        <span class="c1">// Expected output: 3, because subarray [2,3,4] satisfies:</span>
        <span class="c1">// - Starts with even number 2</span>
        <span class="c1">// - 2 and 3 have different parity, 3 and 4 have different parity</span>
        <span class="c1">// - All numbers &lt;= 4</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">longestAlternatingSubarray</span><span class="o">(</span><span class="n">test3</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>  <span class="c1">// Output: 3</span>

        <span class="c1">// Additional Test Cases</span>
        <span class="c1">// Test empty array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test4</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Empty Array Test Result: "</span> <span class="o">+</span> <span class="n">longestAlternatingSubarray</span><span class="o">(</span><span class="n">test4</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>  <span class="c1">// Output: 0</span>

        <span class="c1">// Test single even element</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Single Even Element Test Result: "</span> <span class="o">+</span> <span class="n">longestAlternatingSubarray</span><span class="o">(</span><span class="n">test5</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>  <span class="c1">// Output: 1</span>

        <span class="c1">// Test array with no valid elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test6</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">7</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"No Valid Elements Test Result: "</span> <span class="o">+</span> <span class="n">longestAlternatingSubarray</span><span class="o">(</span><span class="n">test6</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>  <span class="c1">// Output: 0</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode GroupedLoop"/><category term="Easy"/><summary type="html"><![CDATA[You are given a 0-indexed integer array nums and an integer threshold. Find the length of the longest subarray of nums starting at index l and ending at index r (0 &lt;= l &lt;= r &lt; nums.length) that satisfies the following conditions: nums[l] % 2== 0 For all indices i in the range [l, r - 1], nums[i] % 2 != nums[i + 1] % 2 For all indices i in the range [l, r], nums[i] &lt;= threshold Return *an integer denoting the length of the longest such subarray.** *Note: A subarray is a contiguous non-empty sequence of elements within an array.]]></summary></entry><entry><title type="html">2444. Count Subarrays With Fixed Bounds</title><link href="https://zhengstar94.github.io//blog/2025/CountSubarraysWithFixedBounds/" rel="alternate" type="text/html" title="2444. Count Subarrays With Fixed Bounds"/><published>2025-04-06T00:00:00+00:00</published><updated>2025-04-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountSubarraysWithFixedBounds</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountSubarraysWithFixedBounds/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code> and two integers <code class="language-plaintext highlighter-rouge">minK</code> and <code class="language-plaintext highlighter-rouge">maxK</code>.</li> <li>A <strong>fixed-bound subarray</strong> of <code class="language-plaintext highlighter-rouge">nums</code> is a subarray that satisfies the following conditions: <ul> <li>Return <em>the <strong>number</strong> of fixed-bound subarrays</em>.</li> <li>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</li> </ul> </li> <li>Return <em>the <strong>number</strong> of fixed-bound subarrays</em>.</li> <li>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer.ThreePointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountSubarraysWithFixedBounds</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">countSubarrays</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">minK</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxK</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Store the final count of valid subarrays</span>
        <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// lastOutOfBound: Index of the last element that was out of bounds [minK, maxK]</span>
        <span class="c1">// Initially -1 indicating no out-of-bounds element found yet</span>
        <span class="kt">int</span> <span class="n">lastOutOfBound</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>

        <span class="c1">// lastMin: Index of the last occurrence of minK</span>
        <span class="c1">// lastMax: Index of the last occurrence of maxK</span>
        <span class="c1">// Initially -1 indicating no valid minK or maxK found yet</span>
        <span class="kt">int</span> <span class="n">lastMin</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">lastMax</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Iterate through each element in the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Check if current element is within bounds [minK, maxK]</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">minK</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">maxK</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Update lastMin if we find minK</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">minK</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">lastMin</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// Update lastMax if we find maxK</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">maxK</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">lastMax</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// If we have found both minK and maxK</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">lastMin</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">lastMax</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Calculate new valid subarrays:</span>
                    <span class="c1">// Take the minimum of lastMin and lastMax (earliest position we must include)</span>
                    <span class="c1">// Subtract lastOutOfBound (position we can't include)</span>
                    <span class="c1">// Use Math.max to ensure we don't add negative values</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">lastMin</span><span class="o">,</span> <span class="n">lastMax</span><span class="o">)</span> <span class="o">-</span> <span class="n">lastOutOfBound</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// If current element is out of bounds:</span>
                <span class="c1">// 1. Update lastOutOfBound to current position</span>
                <span class="c1">// 2. Reset lastMin and lastMax as we need to find new occurrences</span>
                <span class="n">lastOutOfBound</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="n">lastMin</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">lastMax</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Array with multiple valid subarrays</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">minK1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">maxK1</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">countSubarrays</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">minK1</span><span class="o">,</span> <span class="n">maxK1</span><span class="o">));</span> <span class="c1">// Expected: 2</span>
        <span class="c1">// Valid subarrays: [1,3,5], [1,3,5,2]</span>

        <span class="c1">// Test Case 2: Array with all elements equal</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">minK2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">maxK2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">countSubarrays</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">minK2</span><span class="o">,</span> <span class="n">maxK2</span><span class="o">));</span> <span class="c1">// Expected: 10</span>
        <span class="c1">// All possible subarrays are valid</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode ThreePointers"/><category term="Medium"/><category term="TwoPointers"/><summary type="html"><![CDATA[You are given an integer array nums and two integers minK and maxK. A fixed-bound subarray of nums is a subarray that satisfies the following conditions: Return the number of fixed-bound subarrays. A subarray is a contiguous part of an array. Return the number of fixed-bound subarrays. A subarray is a contiguous part of an array.]]></summary></entry><entry><title type="html">795. Number of Subarrays with Bounded Maximum</title><link href="https://zhengstar94.github.io//blog/2025/NumberOfSubarraysWithBoundedMaximum/" rel="alternate" type="text/html" title="795. Number of Subarrays with Bounded Maximum"/><published>2025-04-06T00:00:00+00:00</published><updated>2025-04-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/NumberOfSubarraysWithBoundedMaximum</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/NumberOfSubarraysWithBoundedMaximum/"><![CDATA[<ul> <li>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> and two integers <code class="language-plaintext highlighter-rouge">left</code> and <code class="language-plaintext highlighter-rouge">right</code>, return <em>the number of contiguous non-empty <strong>subarrays</strong> such that the value of the maximum array element in that subarray is in the range</em> <code class="language-plaintext highlighter-rouge">[left, right]</code>.</li> <li>The test cases are generated so that the answer will fit in a <strong>32-bit</strong> integer.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,4,3], left = 2, right = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,9,2,5,6], left = 2, right = 8
Output: 7
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer.ThreePointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/04/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberOfSubarraysWithBoundedMaximum</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">numSubarrayBoundedMax</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// stores final count of valid subarrays</span>
        <span class="kt">int</span> <span class="n">lastInvalidPos</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>  <span class="c1">// position of last element &gt; right</span>
        <span class="kt">int</span> <span class="n">lastValid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>  <span class="c1">// position of last element &gt;= left</span>

        <span class="c1">// Iterate through array once</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// If current element exceeds right boundary</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">right</span><span class="o">){</span>
                <span class="n">lastInvalidPos</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// If current element is within or above left boundary</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">left</span><span class="o">){</span>
                <span class="n">lastValid</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Add count of valid subarrays ending at current position</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">lastValid</span> <span class="o">-</span> <span class="n">lastInvalidPos</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">left1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span>
                <span class="n">numSubarrayBoundedMax</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">left1</span><span class="o">,</span> <span class="n">right1</span><span class="o">));</span> <span class="c1">// Expected output: 3</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">left2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right2</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span>
                <span class="n">numSubarrayBoundedMax</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">left2</span><span class="o">,</span> <span class="n">right2</span><span class="o">));</span> <span class="c1">// Expected output: 7</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode ThreePointers"/><category term="Medium"/><category term="TwoPointers"/><summary type="html"><![CDATA[Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right]. The test cases are generated so that the answer will fit in a 32-bit integer.]]></summary></entry></feed>