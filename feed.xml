<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-11T01:24:55+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">231. Power of Two</title><link href="https://zhengstar94.github.io//blog/2025/PowerOfTwo/" rel="alternate" type="text/html" title="231. Power of Two"/><published>2025-08-09T00:00:00+00:00</published><updated>2025-08-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/PowerOfTwo</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/PowerOfTwo/"><![CDATA[<ul> <li>Given an integer <code class="language-plaintext highlighter-rouge">n</code>, return <em><code class="language-plaintext highlighter-rouge">true</code> if it is a power of two. Otherwise, return <code class="language-plaintext highlighter-rouge">false</code></em>.</li> <li>An integer <code class="language-plaintext highlighter-rouge">n</code> is a power of two, if there exists an integer <code class="language-plaintext highlighter-rouge">x</code> such that <code class="language-plaintext highlighter-rouge">n == 2^x</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 1
Output: true
Explanation: 2^0 = 1
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 16
Output: true
Explanation: 2^4 = 16
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 3
Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PowerOfTwo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPowerOfTwo</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// First, check if n is greater than 0.</span>
        <span class="c1">// Then, use bitwise AND to check if n has only one '1' in its binary representation.</span>
        <span class="c1">// For any power of two, n &amp; (n - 1) will be 0.</span>
        <span class="c1">// Example: n = 8 (1000), n - 1 = 7 (0111), 1000 &amp; 0111 = 0000</span>
        <span class="k">return</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases to verify the function</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">isPowerOfTwo</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>   <span class="c1">// true, because 1 = 2^0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">isPowerOfTwo</span><span class="o">(</span><span class="mi">16</span><span class="o">));</span>  <span class="c1">// true, because 16 = 2^4</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">isPowerOfTwo</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>   <span class="c1">// false, because 3 is not a power of two</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[Given an integer n, return true if it is a power of two. Otherwise, return false. An integer n is a power of two, if there exists an integer x such that n== 2^x.]]></summary></entry><entry><title type="html">3477. Fruits Into Baskets II</title><link href="https://zhengstar94.github.io//blog/2025/FruitsIntoBasketsII/" rel="alternate" type="text/html" title="3477. Fruits Into Baskets II"/><published>2025-08-05T00:00:00+00:00</published><updated>2025-08-05T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/FruitsIntoBasketsII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/FruitsIntoBasketsII/"><![CDATA[<ul> <li>You are given two arrays of integers, <code class="language-plaintext highlighter-rouge">fruits</code> and <code class="language-plaintext highlighter-rouge">baskets</code>, each of length <code class="language-plaintext highlighter-rouge">n</code>, where <code class="language-plaintext highlighter-rouge">fruits[i]</code> represents the <strong>quantity</strong> of the <code class="language-plaintext highlighter-rouge">ith</code> type of fruit, and <code class="language-plaintext highlighter-rouge">baskets[j]</code> represents the <strong>capacity</strong> of the <code class="language-plaintext highlighter-rouge">jth</code> basket.</li> <li>From left to right, place the fruits according to these rules: <ul> <li>Each fruit type must be placed in the <strong>leftmost available basket</strong> with a capacity <strong>greater than or equal</strong> to the quantity of that fruit type.</li> <li>Each basket can hold <strong>only one</strong> type of fruit.</li> <li>If a fruit type <strong>cannot be placed</strong> in any basket, it remains <strong>unplaced</strong>.</li> </ul> </li> <li>Return the number of fruit types that remain unplaced after all possible allocations are made.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: fruits = [4,2,5], baskets = [3,5,4]
Output: 1
Explanation:
- fruits[0] = 4 is placed in baskets[1] = 5.
- fruits[1] = 2 is placed in baskets[0] = 3.
- fruits[2] = 5 cannot be placed in baskets[2] = 4.
Since one fruit type remains unplaced, we return 1.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: fruits = [3,6,1], baskets = [6,4,7]
Output: 0
Explanation:
- fruits[0] = 3 is placed in baskets[0] = 6.
- fruits[1] = 6 cannot be placed in baskets[1] = 4 (insufficient capacity) but can be placed in the next available basket, baskets[2] = 7.
- fruits[2] = 1 is placed in baskets[1] = 4.
Since all fruits are successfully placed, we return 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/05
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FruitsIntoBasketsII</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">unplacedFruits</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">fruits</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">baskets</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">fruits</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="c1">// Number of fruit types (and baskets, since arrays are the same length)</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">used</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">];</span> <span class="c1">// used[j] indicates whether basket j has already been used</span>
        <span class="kt">int</span> <span class="n">unplaced</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Counter for fruit types that could not be placed</span>

        <span class="c1">// Iterate over each fruit type</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">boolean</span> <span class="n">placed</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Flag to check if current fruit type has been placed</span>

            <span class="c1">// Try to find the first available basket for the current fruit type</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// Check if basket j is unused and has enough capacity for fruits[i]</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">used</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">baskets</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">fruits</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
                    <span class="n">used</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// Mark this basket as used</span>
                    <span class="n">placed</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>  <span class="c1">// Mark this fruit type as placed</span>
                    <span class="k">break</span><span class="o">;</span>          <span class="c1">// Stop searching for baskets for this fruit type</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// If no suitable basket was found, increment the unplaced counter</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">placed</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">unplaced</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the total number of unplaced fruit types</span>
        <span class="k">return</span> <span class="n">unplaced</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">fruits1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">baskets1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
        <span class="c1">// Expected output: 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">unplacedFruits</span><span class="o">(</span><span class="n">fruits1</span><span class="o">,</span> <span class="n">baskets1</span><span class="o">));</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">fruits2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">baskets2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="c1">// Expected output: 0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">unplacedFruits</span><span class="o">(</span><span class="n">fruits2</span><span class="o">,</span> <span class="n">baskets2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Easy"/><summary type="html"><![CDATA[You are given two arrays of integers, fruits and baskets, each of length n, where fruits[i] represents the quantity of the ith type of fruit, and baskets[j] represents the capacity of the jth basket. From left to right, place the fruits according to these rules: Each fruit type must be placed in the leftmost available basket with a capacity greater than or equal to the quantity of that fruit type. Each basket can hold only one type of fruit. If a fruit type cannot be placed in any basket, it remains unplaced. Return the number of fruit types that remain unplaced after all possible allocations are made.]]></summary></entry><entry><title type="html">1995. Count Special Quadruplets</title><link href="https://zhengstar94.github.io//blog/2025/CountSpecialQuadruplets/" rel="alternate" type="text/html" title="1995. Count Special Quadruplets"/><published>2025-08-03T00:00:00+00:00</published><updated>2025-08-03T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountSpecialQuadruplets</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountSpecialQuadruplets/"><![CDATA[<ul> <li>Given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">nums</code>, return <em>the number of <strong>distinct</strong> quadruplets</em> <code class="language-plaintext highlighter-rouge">(a, b, c, d)</code> <em>such that:</em> <ul> <li><code class="language-plaintext highlighter-rouge">nums[a] + nums[b] + nums[c] == nums[d]</code>, and</li> <li><code class="language-plaintext highlighter-rouge">a &lt; b &lt; c &lt; d</code></li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3,6]
Output: 1
Explanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,3,6,4,5]
Output: 0
Explanation: There are no such quadruplets in [3,3,6,4,5].
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,1,1,3,5]
Output: 4
Explanation: The 4 quadruplets that satisfy the requirement are:
- (0, 1, 2, 3): 1 + 1 + 1 == 3
- (0, 1, 3, 4): 1 + 1 + 3 == 5
- (0, 2, 3, 4): 1 + 1 + 3 == 5
- (1, 2, 3, 4): 1 + 1 + 3 == 5
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.HashTable</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/03
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountSpecialQuadruplets</span> <span class="o">{</span>

    <span class="cm">/**
     * Counts the number of distinct quadruplets (a, b, c, d) such that:
     * nums[a] + nums[b] + nums[c] == nums[d] and a &lt; b &lt; c &lt; d
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countQuadruplets</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// This HashMap will store the count of each possible value of (nums[d] - nums[b+1])</span>
        <span class="c1">// for all valid d and fixed b. The key is the difference, the value is the count.</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">cnt</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Loop for b from n-3 down to 1.</span>
        <span class="c1">// Why n-3? Because we need at least two elements after b: one for c (which is b+1), one for d (which is at least b+2).</span>
        <span class="c1">// Why down to 1? Because a must be less than b, so b cannot be 0.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">3</span><span class="o">;</span> <span class="n">b</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">;</span> <span class="o">--</span><span class="n">b</span><span class="o">)</span> <span class="o">{</span>

            <span class="c1">// For each b, we want to consider all possible d &gt; b+1 (so c = b+1, d &gt; c).</span>
            <span class="c1">// For each such d, we calculate nums[d] - nums[b+1] and count its occurrences.</span>
            <span class="c1">// This is because the original equation can be rearranged as:</span>
            <span class="c1">// nums[a] + nums[b] = nums[d] - nums[c], where c = b+1.</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="o">++</span><span class="n">d</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">d</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">b</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
                <span class="c1">// Increment the count for this difference in the map.</span>
                <span class="n">cnt</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">diff</span><span class="o">,</span> <span class="n">cnt</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">diff</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="c1">// Now, for all a &lt; b, we check if nums[a] + nums[b] matches any previously seen difference.</span>
            <span class="c1">// If so, it means there exists at least one (c, d) pair such that</span>
            <span class="c1">// nums[a] + nums[b] + nums[c] == nums[d] with a &lt; b &lt; c &lt; d.</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">;</span> <span class="o">++</span><span class="n">a</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">cnt</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">b</span><span class="o">],</span> <span class="mi">0</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">6</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">countQuadruplets</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span> <span class="c1">// Output: 1</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">countQuadruplets</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span> <span class="c1">// Output: 0</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">countQuadruplets</span><span class="o">(</span><span class="n">nums3</span><span class="o">));</span> <span class="c1">// Output: 4</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode HashTable"/><category term="Easy"/><summary type="html"><![CDATA[Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that: nums[a] + nums[b] + nums[c] == nums[d], and a &lt; b &lt; c &lt; d]]></summary></entry><entry><title type="html">1031. Maximum Sum of Two Non-Overlapping Subarrays</title><link href="https://zhengstar94.github.io//blog/2025/MaximumSumOfTwoNonOverlappingSubarrays/" rel="alternate" type="text/html" title="1031. Maximum Sum of Two Non-Overlapping Subarrays"/><published>2025-08-03T00:00:00+00:00</published><updated>2025-08-03T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MaximumSumOfTwoNonOverlappingSubarrays</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MaximumSumOfTwoNonOverlappingSubarrays/"><![CDATA[<ul> <li>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code> and two integers <code class="language-plaintext highlighter-rouge">firstLen</code> and <code class="language-plaintext highlighter-rouge">secondLen</code>, return <em>the maximum sum of elements in two non-overlapping <strong>subarrays</strong> with lengths</em> <code class="language-plaintext highlighter-rouge">firstLen</code> <em>and</em> <code class="language-plaintext highlighter-rouge">secondLen</code>.</li> <li>The array with length <code class="language-plaintext highlighter-rouge">firstLen</code> could occur before or after the array with length <code class="language-plaintext highlighter-rouge">secondLen</code>, but they have to be non-overlapping.</li> <li>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/03
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumSumOfTwoNonOverlappingSubarrays</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maxSumTwoNoOverlap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">firstLen</span><span class="o">,</span> <span class="kt">int</span> <span class="n">secondLen</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Try both possible orders: firstLen before secondLen, and secondLen before firstLen.</span>
        <span class="c1">// Return the maximum result from both orders.</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span>
                <span class="n">maxSum</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">firstLen</span><span class="o">,</span> <span class="n">secondLen</span><span class="o">),</span>
                <span class="n">maxSum</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">secondLen</span><span class="o">,</span> <span class="n">firstLen</span><span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maxSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="no">L</span><span class="o">,</span> <span class="kt">int</span> <span class="no">M</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="c1">// prefix[i] stores the sum of nums[0] to nums[i-1].</span>
        <span class="c1">// This allows us to quickly calculate the sum of any subarray in O(1) time.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">prefix</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">prefix</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">maxL</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// The maximum sum of any subarray of length L that ends before the current M-length window.</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// The overall maximum sum of two non-overlapping subarrays.</span>

        <span class="c1">// Start from i = L + M, so that both L-length and M-length subarrays are fully within the range.</span>
        <span class="c1">// i represents the right boundary (exclusive) of the current M-length subarray.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="no">L</span> <span class="o">+</span> <span class="no">M</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Calculate the sum of the L-length subarray that ends right before the current M-length subarray.</span>
            <span class="c1">// prefix[i - M] - prefix[i - M - L] gives the sum of nums[(i-M-L) ... (i-M-1)].</span>
            <span class="c1">// We keep track of the maximum such sum seen so far in maxL.</span>
            <span class="n">maxL</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxL</span><span class="o">,</span> <span class="n">prefix</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="no">M</span><span class="o">]</span> <span class="o">-</span> <span class="n">prefix</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="no">M</span> <span class="o">-</span> <span class="no">L</span><span class="o">]);</span>

            <span class="c1">// Calculate the sum of the current M-length subarray: nums[(i-M) ... (i-1)].</span>
            <span class="c1">// prefix[i] - prefix[i - M] gives this sum.</span>
            <span class="c1">// Add it to maxL (the best L-length subarray sum before this window) to get the total sum.</span>
            <span class="c1">// Update res if this total sum is greater than the previous maximum.</span>
            <span class="n">res</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="n">maxL</span> <span class="o">+</span> <span class="n">prefix</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">prefix</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="no">M</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">4</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maxSumTwoNoOverlap</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span> <span class="c1">// Output: 20</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maxSumTwoNoOverlap</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span> <span class="c1">// Output: 29</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">8</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maxSumTwoNoOverlap</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span> <span class="c1">// Output: 31</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Medium"/><summary type="html"><![CDATA[Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen. The array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping. A subarray is a contiguous part of an array.]]></summary></entry><entry><title type="html">3185. Count Pairs That Form a Complete Day II</title><link href="https://zhengstar94.github.io//blog/2025/CountPairsThatFormACompleteDayII/" rel="alternate" type="text/html" title="3185. Count Pairs That Form a Complete Day II"/><published>2025-08-02T00:00:00+00:00</published><updated>2025-08-02T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountPairsThatFormACompleteDayII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountPairsThatFormACompleteDayII/"><![CDATA[<ul> <li>Given an integer array <code class="language-plaintext highlighter-rouge">hours</code> representing times in <strong>hours</strong>, return an integer denoting the number of pairs <code class="language-plaintext highlighter-rouge">i</code>, <code class="language-plaintext highlighter-rouge">j</code> where <code class="language-plaintext highlighter-rouge">i &lt; j</code> and <code class="language-plaintext highlighter-rouge">hours[i] + hours[j]</code> forms a <strong>complete day</strong>.</li> <li>A <strong>complete day</strong> is defined as a time duration that is an <strong>exact</strong> <strong>multiple</strong> of 24 hours.</li> <li>For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: hours = [12,12,30,24,24]

Output: 2

Explanation: The pairs of indices that form a complete day are (0, 1) and (3, 4).
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: hours = [72,48,24,3]

Output: 3

Explanation: The pairs of indices that form a complete day are (0, 1), (0, 2), and (1, 2).
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/02
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountPairsThatFormACompleteDayII</span> <span class="o">{</span>
    <span class="cm">/**
     * Counts the number of index pairs (i, j) such that i &lt; j and hours[i] + hours[j] is a multiple of 24.
     *
     * @param hours An array where each element represents a duration in hours.
     * @return The number of valid index pairs forming a complete day.
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">countCompleteDayPairs</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">hours</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="no">H</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span> <span class="c1">// The number of hours in a complete day</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>     <span class="c1">// To store the final count of valid pairs</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">cnt</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">H</span><span class="o">];</span> <span class="c1">// cnt[r] stores how many times remainder r has appeared so far</span>

        <span class="c1">// Iterate through each hour in the input array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">:</span> <span class="n">hours</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Step 1: Calculate the remainder of the current hour when divided by 24</span>
            <span class="kt">int</span> <span class="n">rem</span> <span class="o">=</span> <span class="n">t</span> <span class="o">%</span> <span class="no">H</span><span class="o">;</span>

            <span class="c1">// Step 2: Calculate the required remainder for a valid pair</span>
            <span class="c1">// If rem + pairRem == 24 or rem + pairRem == 0 (i.e., divisible by 24)</span>
            <span class="c1">// For rem == 0, pairRem should also be 0</span>
            <span class="kt">int</span> <span class="n">pairRem</span> <span class="o">=</span> <span class="o">(</span><span class="no">H</span> <span class="o">-</span> <span class="n">rem</span><span class="o">)</span> <span class="o">%</span> <span class="no">H</span><span class="o">;</span>

            <span class="c1">// Step 3: Add the number of previously seen elements with the required remainder</span>
            <span class="c1">// This counts all valid pairs where the previous element's remainder is pairRem</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">cnt</span><span class="o">[</span><span class="n">pairRem</span><span class="o">];</span>

            <span class="c1">// Step 4: Increment the count for the current remainder</span>
            <span class="c1">// This is done after counting to ensure i &lt; j (current element only pairs with previous ones)</span>
            <span class="n">cnt</span><span class="o">[</span><span class="n">rem</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">hours1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">12</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="mi">24</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">hours2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">72</span><span class="o">,</span> <span class="mi">48</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="c1">// Expected output: 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">countCompleteDayPairs</span><span class="o">(</span><span class="n">hours1</span><span class="o">));</span>
        <span class="c1">// Expected output: 3</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">countCompleteDayPairs</span><span class="o">(</span><span class="n">hours2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i &lt; j and hours[i] + hours[j] forms a complete day. A complete day is defined as a time duration that is an exact multiple of 24 hours. For example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.]]></summary></entry><entry><title type="html">2905. Find Indices With Index and Value Difference II</title><link href="https://zhengstar94.github.io//blog/2025/FindIndicesWithIndexAndValueDifferenceII/" rel="alternate" type="text/html" title="2905. Find Indices With Index and Value Difference II"/><published>2025-08-01T00:00:00+00:00</published><updated>2025-08-01T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/FindIndicesWithIndexAndValueDifferenceII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/FindIndicesWithIndexAndValueDifferenceII/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">nums</code> having length <code class="language-plaintext highlighter-rouge">n</code>, an integer <code class="language-plaintext highlighter-rouge">indexDifference</code>, and an integer <code class="language-plaintext highlighter-rouge">valueDifference</code>.</li> <li>Your task is to find <strong>two</strong> indices <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">j</code>, both in the range <code class="language-plaintext highlighter-rouge">[0, n - 1]</code>, that satisfy the following conditions: <ul> <li><code class="language-plaintext highlighter-rouge">abs(i - j) &gt;= indexDifference</code>, and</li> <li><code class="language-plaintext highlighter-rouge">abs(nums[i] - nums[j]) &gt;= valueDifference</code></li> </ul> </li> <li>Return <em>an integer array</em> <code class="language-plaintext highlighter-rouge">answer</code>, <em>where</em> <code class="language-plaintext highlighter-rouge">answer = [i, j]</code> <em>if there are two such indices</em>, <em>and</em> <code class="language-plaintext highlighter-rouge">answer = [-1, -1]</code> <em>otherwise</em>. If there are multiple choices for the two indices, return <em>any of them</em>.</li> <li><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">j</code> may be <strong>equal</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4
Output: [0,3]
Explanation: In this example, i = 0 and j = 3 can be selected.
abs(0 - 3) &gt;= 2 and abs(nums[0] - nums[3]) &gt;= 4.
Hence, a valid answer is [0,3].
[3,0] is also a valid answer.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1], indexDifference = 0, valueDifference = 0
Output: [0,0]
Explanation: In this example, i = 0 and j = 0 can be selected.
abs(0 - 0) &gt;= 0 and abs(nums[0] - nums[0]) &gt;= 0.
Hence, a valid answer is [0,0].
Other valid answers are [0,1], [1,0], and [1,1].
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3], indexDifference = 2, valueDifference = 4
Output: [-1,-1]
Explanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.
Hence, [-1,-1] is returned.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/01
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindIndicesWithIndexAndValueDifferenceII</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findIndices</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indexDifference</span><span class="o">,</span> <span class="kt">int</span> <span class="n">valueDifference</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// maxIdx: stores the index of the current maximum value in the sliding window</span>
        <span class="kt">int</span> <span class="n">maxIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// minIdx: stores the index of the current minimum value in the sliding window</span>
        <span class="kt">int</span> <span class="n">minIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Start j from indexDifference to ensure abs(i - j) &gt;= indexDifference</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">indexDifference</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// i is the left boundary of the window for current j</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">indexDifference</span><span class="o">;</span>

            <span class="c1">// If the new left boundary value is greater than the current max, update maxIdx</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">maxIdx</span><span class="o">]){</span>
                <span class="n">maxIdx</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// If the new left boundary value is less than the current min, update minIdx</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">minIdx</span><span class="o">]){</span>
                <span class="n">minIdx</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Check if the difference between the current max in the window and nums[j] </span>
            <span class="c1">// is at least valueDifference. If so, return the pair.</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">maxIdx</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">valueDifference</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">maxIdx</span><span class="o">,</span> <span class="n">j</span><span class="o">};</span>
            <span class="o">}</span>

            <span class="c1">// Check if the difference between nums[j] and the current min in the window</span>
            <span class="c1">// is at least valueDifference. If so, return the pair.</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">minIdx</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">valueDifference</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">minIdx</span><span class="o">,</span> <span class="n">j</span><span class="o">};</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If no such pair is found, return [-1, -1]</span>
        <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">indexDifference1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">valueDifference1</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="c1">// Example 1: Should print [0, 3] or [3, 0] (any valid pair)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">findIndices</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">indexDifference1</span><span class="o">,</span> <span class="n">valueDifference1</span><span class="o">)));</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">indexDifference2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">valueDifference2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Example 2: Should print [0, 0] or [1, 1] or any valid pair</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">findIndices</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">indexDifference2</span><span class="o">,</span> <span class="n">valueDifference2</span><span class="o">)));</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">indexDifference3</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">valueDifference3</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="c1">// Example 3: Should print [-1, -1] (no valid pair)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">findIndices</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">indexDifference3</span><span class="o">,</span> <span class="n">valueDifference3</span><span class="o">)));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Medium"/><summary type="html"><![CDATA[You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference. Your task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions: abs(i - j) &gt;= indexDifference, and abs(nums[i] - nums[j]) &gt;= valueDifference Return an integer array answer, where answer=[i, j] if there are two such indices, and answer=[-1, -1] otherwise. If there are multiple choices for the two indices, return any of them. Note: i and j may be equal.]]></summary></entry><entry><title type="html">3584. Maximum Product of First and Last Elements of a Subsequence</title><link href="https://zhengstar94.github.io//blog/2025/MaximumProductOfFirstAndLastElementsOfASubsequence/" rel="alternate" type="text/html" title="3584. Maximum Product of First and Last Elements of a Subsequence"/><published>2025-08-01T00:00:00+00:00</published><updated>2025-08-01T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MaximumProductOfFirstAndLastElementsOfASubsequence</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MaximumProductOfFirstAndLastElementsOfASubsequence/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">m</code>.</li> <li>Return the <strong>maximum</strong> product of the first and last elements of any <strong>subsequence</strong> of <code class="language-plaintext highlighter-rouge">nums</code> of size <code class="language-plaintext highlighter-rouge">m</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [-1,-9,2,3,-2,-3,1], m = 1

Output: 81

Explanation:

The subsequence [-9] has the largest product of the first and last elements: -9 * -9 = 81. Therefore, the answer is 81.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,3,-5,5,6,-4], m = 3

Output: 20

Explanation:

The subsequence [-5, 6, -4] has the largest product of the first and last elements.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,-1,2,-6,5,2,-5,7], m = 2

Output: 35

Explanation:

The subsequence [5, 7] has the largest product of the first and last elements.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n - m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/01
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumProductOfFirstAndLastElementsOfASubsequence</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">maximumProduct</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize the answer to the smallest possible value.</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="nc">Long</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        <span class="c1">// min will keep track of the minimum value among all possible "first" elements for the current window.</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
        <span class="c1">// max will keep track of the maximum value among all possible "first" elements for the current window.</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>

        <span class="c1">// Iterate over all possible positions for the last element of the subsequence.</span>
        <span class="c1">// i is the index of the current "last" element of the subsequence.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// y is the candidate for the "first" element of the subsequence.</span>
            <span class="c1">// For each i, the possible "first" elements are nums[0] to nums[i - m + 1].</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

            <span class="c1">// Update min and max to always reflect the smallest and largest possible "first" elements so far.</span>
            <span class="n">min</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
            <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>

            <span class="c1">// x is the current "last" element of the subsequence.</span>
            <span class="kt">long</span> <span class="n">x</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>

            <span class="c1">// Calculate the product of the current "last" element with both the minimum and maximum "first" elements.</span>
            <span class="c1">// This is necessary because both large positive and large negative numbers can yield the largest product.</span>
            <span class="kt">long</span> <span class="n">productWithMin</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">min</span><span class="o">;</span>
            <span class="kt">long</span> <span class="n">productWithMax</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">max</span><span class="o">;</span>

            <span class="c1">// Update the answer with the maximum product found so far.</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">productWithMin</span><span class="o">,</span> <span class="n">productWithMax</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// Return the maximum product found.</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">9</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="c1">// Example 1: Should print 81</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maximumProduct</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">m1</span><span class="o">));</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="o">-</span><span class="mi">4</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="c1">// Example 2: Should print 20</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maximumProduct</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">m2</span><span class="o">));</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">6</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m3</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="c1">// Example 3: Should print 35</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maximumProduct</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">m3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Medium"/><summary type="html"><![CDATA[You are given an integer array nums and an integer m. Return the maximum product of the first and last elements of any subsequence of nums of size m.]]></summary></entry><entry><title type="html">118. Pascal’s Triangle</title><link href="https://zhengstar94.github.io//blog/2025/ShortestPathInBinaryMatrix/" rel="alternate" type="text/html" title="118. Pascal’s Triangle"/><published>2025-08-01T00:00:00+00:00</published><updated>2025-08-01T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ShortestPathInBinaryMatrix</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ShortestPathInBinaryMatrix/"><![CDATA[<ul> <li>Given an integer <code class="language-plaintext highlighter-rouge">numRows</code>, return the first numRows of <strong>Pascal’s triangle</strong>.</li> <li>In <strong>Pascal’s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: numRows = 5
Output: [ [ 1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1 ] ]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: numRows = 1
Output: [ [ 1 ] ]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(numRows<span class="p">^</span>2) time | O(numRows<span class="p">^</span>2) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @Author zhengxingxing
 * @Date 2025/08/01
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PascalTriangle</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">generate</span><span class="o">(</span><span class="kt">int</span> <span class="n">numRows</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// This list will store all rows of Pascal's Triangle.</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Loop through each row index from 0 to numRows - 1.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numRows</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Create a new list to represent the current row.</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">row</span>  <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

            <span class="c1">// Loop through each element in the current row.</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// The first and last elements of each row are always 1.</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="n">i</span><span class="o">){</span>
                    <span class="n">row</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// Each inner element is the sum of the two elements directly above it</span>
                    <span class="c1">// from the previous row: result.get(i - 1).get(j - 1) and result.get(i - 1).get(j)</span>
                    <span class="n">row</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c1">// Add the completed row to the result list.</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">row</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// Return the complete Pascal's Triangle.</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">numRows1</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">numRows2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="c1">// Test case 1: Generate 5 rows of Pascal's Triangle.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"numRows = 5: "</span> <span class="o">+</span> <span class="n">generate</span><span class="o">(</span><span class="n">numRows1</span><span class="o">));</span>
        <span class="c1">// Test case 2: Generate 1 row of Pascal's Triangle.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"numRows = 1: "</span> <span class="o">+</span> <span class="n">generate</span><span class="o">(</span><span class="n">numRows2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[Given an integer numRows, return the first numRows of Pascal’s triangle. In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:]]></summary></entry><entry><title type="html">Twitter Database Read and Write and Sharding System Design Detailed Guide</title><link href="https://zhengstar94.github.io//blog/2025/TwitterDatabaseReadAndWriteAndShardingSystemDesignDetailedGuide/" rel="alternate" type="text/html" title="Twitter Database Read and Write and Sharding System Design Detailed Guide"/><published>2025-08-01T00:00:00+00:00</published><updated>2025-08-01T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/TwitterDatabaseReadAndWriteAndShardingSystemDesignDetailedGuide</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/TwitterDatabaseReadAndWriteAndShardingSystemDesignDetailedGuide/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>The database is the foundational infrastructure of social platforms like Twitter/X, responsible for storing massive user data, tweets, and relationship graphs. Facing billions of DAU and hundreds of millions of daily tweets, the read/write operations are extremely unbalanced (read/write ratio 100:1), with data hotspots (e.g., celebrity tweets) and cross-query complexity becoming major bottlenecks. This article systematically introduces the architecture schemes for database read/write and sharding, trade-offs, engineering implementation details, and common interview follow-up questions, based on hybrid storage (SQL for users, NoSQL for tweets, Graph DB for relationships) and sharding strategies, aiming to achieve high throughput, low latency, and high availability.</p> <hr/> <h2 id="1-requirements-and-challenges">1. Requirements and Challenges</h2> <ul> <li><strong>Massive Data Scale</strong>: Daily writes of 24 TB+ (text, media), PB-level storage over 5 years; total accounts 15 billion, tweets in trillions.</li> <li><strong>Read/Write Imbalance</strong>: Read operations dominate (e.g., timeline aggregation requires cross-user queries), write operations require strong consistency (e.g., tweet posting).</li> <li><strong>Hotspot Issues</strong>: Celebrity user data concentration, single shard load &gt;80%; new data hotspots cause IO contention.</li> <li><strong>Low Latency and Consistency</strong>: Queries &lt;100 ms, strong consistency scenarios (e.g., authentication) allow no delay, eventual consistency (e.g., follower counts) can tolerate second-level delays.</li> <li><strong>Fault Tolerance</strong>: Continue operating during node failures or network partitions, with data replication across data centers.</li> </ul> <hr/> <h2 id="2-scheme-comparison-and-trade-offs">2. Scheme Comparison and Trade-offs</h2> <h3 id="21-sharding-by-creation-time">2.1 Sharding by Creation Time</h3> <ul> <li><strong>Principle</strong>: Distribute data to different shards based on tweet creation time (e.g., by day/week), similar to archiving file cabinets by date, facilitating time-range queries.</li> <li><strong>Advantages</strong>: Efficient time queries, only accessing a few shards; easy to archive historical data.</li> <li><strong>Disadvantages</strong>: Uneven hot/cold distribution, high write pressure on new shards (hotspots), resource waste on old shards.</li> </ul> <h3 id="22-sharding-by-user-id-hash">2.2 Sharding by User ID Hash</h3> <ul> <li><strong>Principle</strong>: Hash user ID (e.g., Murmur 3), store same-user data in the same shard, similar to classifying phone books by name initials.</li> <li><strong>Advantages</strong>: Localized user timeline queries, simple implementation.</li> <li><strong>Disadvantages</strong>: Homepage timeline requires cross-shard aggregation; hot users cause uneven shards, severe hotspots.</li> </ul> <h3 id="23-sharding-by-tweet-id-hash">2.3 Sharding by Tweet ID Hash</h3> <ul> <li><strong>Principle</strong>: Hash tweet ID to distribute data evenly, similar to randomly assigning lottery numbers to avoid concentration.</li> <li><strong>Advantages</strong>: Even data distribution, reduced hotspots; high availability, minimal fault impact.</li> <li><strong>Disadvantages</strong>: Timeline aggregation requires accessing multiple shards, high query cost (relies on caching).</li> </ul> <p>Comparison Table:</p> <table> <thead> <tr> <th>Sharding Scheme</th> <th>Advantages</th> <th>Disadvantages</th> <th>Applicable Scenario Comparison</th> </tr> </thead> <tbody> <tr> <td><strong>By Creation Time</strong></td> <td>- Efficient time queries<br/>- Easy historical data archiving</td> <td>- New shard hotspots, resource waste<br/>- Frequent creation for quick filling</td> <td>Suitable for historical data analysis, but poor for real-time read/write.</td> </tr> <tr> <td><strong>By User ID Hash</strong></td> <td>- Localized user timeline<br/>- Simple implementation</td> <td>- Many cross-shard homepage queries<br/>- Uneven hot users, severe hotspots</td> <td>Superior to time sharding in user queries, but poor large-scale scaling.</td> </tr> <tr> <td><strong>By Tweet ID Hash</strong></td> <td>- Even data distribution<br/>- Reduced hotspots, high availability</td> <td>- Complex timeline queries, requires strong caching support</td> <td>Best for large-scale: Balanced with caching for high read performance.</td> </tr> </tbody> </table> <hr/> <h2 id="3-recommended-architecture-sharding-by-tweet-id-hash--readwrite-separation">3. Recommended Architecture: Sharding by Tweet ID Hash + Read/Write Separation</h2> <h3 id="31-storage-selection">3.1 Storage Selection</h3> <ul> <li><strong>SQL (MySQL)</strong>: User profiles, authentication (strong consistency).</li> <li><strong>NoSQL (Cassandra)</strong>: Tweet storage (high throughput).</li> <li><strong>Graph DB (Neo 4 j)</strong>: Follow relationships (graph queries).</li> <li><strong>Object Storage (S 3)</strong>: Media files.</li> </ul> <h3 id="32-sharding-mechanism">3.2 Sharding Mechanism</h3> <ul> <li>Use consistent hash ring (1024 shards), with tweet ID as the key for even distribution.</li> <li>Tool: Vitess as the sharding routing layer, supporting automatic rebalancing.</li> </ul> <h3 id="33-readwrite-separation">3.3 Read/Write Separation</h3> <ul> <li>Master DB (Cassandra) dedicated to writes, consistency level QUORUM.</li> <li>Slave DB (MySQL replicas) for multiple reads, consistency level ONE; asynchronous replication tools like Debezium + Kafka to sync changes (latency &lt;1 s).</li> </ul> <h3 id="34-fault-tolerance-and-rebalancing">3.4 Fault Tolerance and Rebalancing</h3> <ul> <li>Multi-AZ deployment, Vitess automatic failover (&lt;10 s).</li> <li>Rebalancing script monitors load hourly (&gt;70% triggers), gradual data migration.</li> </ul> <p>The following is a simplified architecture diagram of the recommended architecture (Mermaid syntax):</p> <pre><code class="language-mermaid">graph TD
    A["Client Request"] --&gt; B["API Gateway"]
    B --&gt; C["Timeline/Tweet Service"]
    C --&gt; D{"Read/Write?"}
    D --&gt;|"Write"| E["Master DB: Cassandra (QUORUM Consistency)"]
    D --&gt;|"Read"| F["Slave DB: MySQL Replica (ONE Consistency)"]
    E --&gt; G["Kafka: Asynchronous Replication Changes"]
    G --&gt; F
    H["Vitess: Sharding Routing + Rebalancing"] -.-&gt; E
    H -.-&gt; F
    I["S3: Media Storage"] -.-&gt; C
    J["Neo4j: Relationship Graph"] -.-&gt; C
    K["Prometheus: Monitoring Load"] -.-&gt; H
</code></pre> <p>This diagram shows the overall process of read/write separation and sharding routing.</p> <hr/> <h2 id="4-key-data-structures-and-processes">4. Key Data Structures and Processes</h2> <h3 id="41-table-design">4.1 Table Design</h3> <ul> <li> <p><strong>User Table (MySQL)</strong>: | Field | Type | Description | |————–|————–|——————————| | userId | BIGINT | User ID (Primary Key) | | name | VARCHAR (100)| Username | | email | VARCHAR (100)| Email | | creationTime | DATETIME | Creation Time | | lastLogin | DATETIME | Last Login | | isHotUser | BOOLEAN | Whether Hot User |</p> </li> <li> <p><strong>Tweet Table (Cassandra)</strong>: | Field | Type | Description | |————–|————–|——————————| | tweetId | BIGINT | Tweet ID (Partition Key) | | userId | BIGINT | Author ID | | content | VARCHAR (280)| Content | | creationTime | TIMESTAMP | Creation Time (Clustering Key) |</p> </li> <li> <p><strong>Follow Table (Neo 4 j)</strong>: Nodes as User, relationships as FOLLOWS.</p> </li> </ul> <h3 id="42-tweet-write-and-read-process">4.2 Tweet Write and Read Process</h3> <p>The following is the process sequence diagram (Mermaid syntax):</p> <pre><code class="language-mermaid">sequenceDiagram
    participant Client as Client
    participant Service as Tweet Service
    participant Vitess as Vitess Routing
    participant MainDB as Master DB (Cassandra)
    participant SlaveDB as Slave DB (MySQL)
    participant Kafka as Kafka Replication

    Client-&gt;&gt;Service: Post Tweet
    Service-&gt;&gt;Vitess: Calculate Shard (Tweet ID Hash)
    Vitess-&gt;&gt;MainDB: Write to Master DB
    MainDB--&gt;&gt;Vitess: Confirm
    Vitess-&gt;&gt;Kafka: Send Change Event
    Kafka-&gt;&gt;SlaveDB: Asynchronous Replication to Slave DB

    Client-&gt;&gt;Service: Query Timeline
    Service-&gt;&gt;Vitess: Route to Shards
    Vitess-&gt;&gt;SlaveDB: Read from Slave DB
    SlaveDB--&gt;&gt;Vitess: Return Data
    Vitess--&gt;&gt;Service: Aggregate Results
    Service--&gt;&gt;Client: Return
</code></pre> <h4 id="java-code-example-writing-tweet">Java Code Example (Writing Tweet)</h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Handle write in tweet service (sharding by tweet ID hash)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertTweet</span><span class="o">(</span><span class="kt">long</span> <span class="n">tweetId</span><span class="o">,</span> <span class="kt">long</span> <span class="n">userId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">content</span><span class="o">,</span> <span class="nc">Timestamp</span> <span class="n">creationTime</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Calculate hash shard</span>
    <span class="kt">long</span> <span class="n">hash</span> <span class="o">=</span> <span class="nc">MurmurHash3</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">tweetId</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">shard</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">hash</span> <span class="o">%</span> <span class="n">numShards</span><span class="o">);</span>

    <span class="c1">// Insert using Vitess or Cassandra client</span>
    <span class="nc">PreparedStatement</span> <span class="n">stmt</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">prepare</span><span class="o">(</span><span class="s">"INSERT INTO tweets (tweetId, userId, content, creationTime) VALUES (?, ?, ?, ?)"</span><span class="o">);</span>
    <span class="nc">BoundStatement</span> <span class="n">bound</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">tweetId</span><span class="o">,</span> <span class="n">userId</span><span class="o">,</span> <span class="n">content</span><span class="o">,</span> <span class="n">creationTime</span><span class="o">);</span>
    <span class="n">session</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">bound</span><span class="o">);</span>  <span class="c1">// QUORUM consistency</span>

    <span class="c1">// Asynchronously deliver to Kafka for replication</span>
    <span class="n">kafkaProducer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProducerRecord</span><span class="o">&lt;&gt;(</span><span class="s">"tweet_changes"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">tweetId</span><span class="o">),</span> <span class="n">serializeTweet</span><span class="o">(</span><span class="n">tweetId</span><span class="o">,</span> <span class="n">userId</span><span class="o">,</span> <span class="n">content</span><span class="o">)));</span>
<span class="o">}</span>
</code></pre></div></div> <h4 id="java-code-example-reading-tweet">Java Code Example (Reading Tweet)</h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Handle read in timeline service (from slave DB)</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tweet</span><span class="o">&gt;</span> <span class="nf">queryTweetsByUser</span><span class="o">(</span><span class="kt">long</span> <span class="n">userId</span><span class="o">,</span> <span class="kt">long</span> <span class="n">sinceTime</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Vitess routes to relevant shards</span>
    <span class="nc">QueryBuilder</span> <span class="n">qb</span> <span class="o">=</span> <span class="nc">QueryBuilder</span><span class="o">.</span><span class="na">select</span><span class="o">().</span><span class="na">from</span><span class="o">(</span><span class="s">"tweets"</span><span class="o">);</span>
    <span class="n">qb</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">eq</span><span class="o">(</span><span class="s">"userId"</span><span class="o">,</span> <span class="n">userId</span><span class="o">)).</span><span class="na">and</span><span class="o">(</span><span class="n">gt</span><span class="o">(</span><span class="s">"creationTime"</span><span class="o">,</span> <span class="n">sinceTime</span><span class="o">));</span>
    <span class="nc">ResultSet</span> <span class="n">results</span> <span class="o">=</span> <span class="n">vitessSession</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">qb</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>

    <span class="c1">// Convert to Tweet list</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tweet</span><span class="o">&gt;</span> <span class="n">tweets</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Row</span> <span class="n">row</span> <span class="o">:</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">tweets</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Tweet</span><span class="o">(</span><span class="n">row</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"tweetId"</span><span class="o">),</span> <span class="n">row</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"content"</span><span class="o">),</span> <span class="n">row</span><span class="o">.</span><span class="na">getTimestamp</span><span class="o">(</span><span class="s">"creationTime"</span><span class="o">)));</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">tweets</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h2 id="5-performance-optimization-and-engineering-details">5. Performance Optimization and Engineering Details</h2> <ul> <li><strong>Index Optimization</strong>: Cassandra secondary indexes (creationTime + userId), reducing scans.</li> <li><strong>Asynchronous Replication</strong>: Debezium captures changes, Kafka buffering, latency &lt;1 s.</li> <li><strong>Rebalancing</strong>: Vitess moveTables for gradual migration, rate-limited &lt;1 GB/min to avoid interruptions.</li> <li><strong>Media Processing</strong>: Asynchronous upload to S 3, CDN pre-warming for hot files.</li> <li><strong>Monitoring</strong>: Grafana tracks IO/CPU, shard load, alerts &gt;80% to trigger autoscaling.</li> </ul> <hr/> <h2 id="6-high-frequency-interview-follow-ups-and-real-engineering-pitfalls">6. High-Frequency Interview Follow-Ups and Real Engineering Pitfalls</h2> <h3 id="high-frequency-follow-ups">High-Frequency Follow-Ups</h3> <ul> <li>How to detect and migrate hotspot shards? (Monitor load, Vitess automatic rebalancing)</li> <li>How to ensure consistency under read/write separation? (QUORUM writes, ONE reads + asynchronous replication)</li> <li>How to dynamically adjust shard count with data growth? (Consistent hash ring expansion, virtual nodes for evenness)</li> </ul> <h3 id="engineering-pitfalls">Engineering Pitfalls</h3> <ul> <li>Replication latency peaks &gt;5 s, causing dirty reads; solution: Prioritize high-priority changes, monitor lag.</li> <li>Rebalancing interrupts service; solution: Dual-write synchronization, test with Chaos Engineering.</li> <li>High index maintenance overhead; solution: Periodic rebuilds, test query plans.</li> </ul> <h3 id="common-misconceptions">Common Misconceptions</h3> <ul> <li>Using only user ID sharding, ignoring hotspots leading to single-shard crashes.</li> <li>No read/write separation, writes drag down read performance.</li> <li>Ignoring cross-data center replication, data loss during network partitions.</li> </ul> <hr/> <h2 id="7-summary">7. Summary</h2> <p>Twitter database read/write and sharding are key to handling massive data. Through sharding by tweet ID hash + read/write separation + asynchronous replication architecture, balanced load, low latency, and high availability can be achieved. Engineering focuses on sharding routing (Vitess), consistency management (QUORUM/ONE), and monitoring degradation to avoid hotspots and fault risks. In practice, combine with caching (e.g., Redis) and message queues (e.g., Kafka) to support overall system scaling.</p>]]></content><author><name></name></author><category term="System Design Other"/><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Twitter Notification and Real-Time Push System Design Detailed Guide</title><link href="https://zhengstar94.github.io//blog/2025/TwitterNotificationAndReal-TimePushSystemDesignDetailedGuide/" rel="alternate" type="text/html" title="Twitter Notification and Real-Time Push System Design Detailed Guide"/><published>2025-08-01T00:00:00+00:00</published><updated>2025-08-01T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/TwitterNotificationAndReal-TimePushSystemDesignDetailedGuide</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/TwitterNotificationAndReal-TimePushSystemDesignDetailedGuide/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Notifications and real-time pushes are key interactive mechanisms in Twitter/X social platforms, used to handle events such as likes, @mentions, and replies, ensuring users receive updates promptly. Facing billions of DAU and daily billions of interactions, the system must support high-concurrency pushes, low-latency delivery, and high availability. This article systematically introduces the architecture schemes for notification pushes, trade-offs, engineering implementation details, and common interview follow-up questions, based on asynchronous decoupling (Kafka) and real-time communication (WebSocket), aiming to balance resource consumption and user experience.</p> <hr/> <h2 id="1-requirements-and-challenges">1. Requirements and Challenges</h2> <ul> <li> <p><strong>High-Frequency Interactions</strong>: Billions of notifications daily (such as likes/@), with peak TPS in the tens of thousands; hot events can trigger millions of pushes instantly.</p> </li> <li> <p><strong>Real-Time Performance</strong>: Delivery latency &lt;1 s, with frequent mobile reconnections (&gt;10% users).</p> </li> <li> <p><strong>Resource Contention</strong>: Long connections consume memory (each &gt;1 KB), peak CPU &gt;80%; queue backlogs lead to losses.</p> </li> <li> <p><strong>Consistency and Filtering</strong>: Eventual consistency can tolerate second-level delays, but active users must be distinguished to avoid invalid pushes.</p> </li> <li> <p><strong>Fault Tolerance</strong>: Limit rates and degrade during DDoS attacks or network partitions; support multi-channels (Web/mobile).</p> </li> </ul> <hr/> <h2 id="2-scheme-comparison-and-trade-offs">2. Scheme Comparison and Trade-offs</h2> <h3 id="21-websocket-push-mode">2.1 WebSocket (Push Mode)</h3> <ul> <li> <p><strong>Principle</strong>: Establish a persistent bidirectional connection where the server actively pushes notifications, similar to a real-time phone call: once there’s a message, the system directly “calls” the user’s connection.</p> </li> <li> <p><strong>Advantages</strong>: Real-time low latency (&lt;1 s), efficient bandwidth usage.</p> </li> <li> <p><strong>Disadvantages</strong>: Complex connection management, high memory/CPU under high concurrency; high reconnection overhead on disconnections.</p> </li> </ul> <h3 id="22-polling-pull-mode">2.2 Polling (Pull Mode)</h3> <ul> <li> <p><strong>Principle</strong>: The client periodically polls the server for new notifications, similar to checking a mailbox: the user asks “Any new messages?” every few seconds.</p> </li> <li> <p><strong>Advantages</strong>: Simple implementation, no need for long connections.</p> </li> <li> <p><strong>Disadvantages</strong>: High latency (average &gt; interval time), bandwidth waste (many empty polls); unsuitable for real-time scenarios.</p> </li> </ul> <h3 id="23-hybrid-mode-push--pull">2.3 Hybrid Mode (Push + Pull)</h3> <ul> <li> <p><strong>Principle</strong>: Use push (WebSocket) for online users, and pull (FCM/APNS fallback) for offline/mobile, similar to smart mail: instant notifications when online, batch delivery when offline.</p> </li> <li> <p><strong>Advantages</strong>: Balances real-time and resources, reduces invalid pushes.</p> </li> <li> <p><strong>Disadvantages</strong>: Complex multi-channel management, consistency challenges.</p> </li> </ul> <p>Comparison Table:</p> <table> <thead> <tr> <th>Scheme</th> <th>Advantages</th> <th>Disadvantages</th> <th>Applicable Scenario Comparison</th> </tr> </thead> <tbody> <tr> <td><strong>WebSocket</strong></td> <td>- Real-time delivery &lt;1 s<br/>- Low bandwidth consumption</td> <td>- High connection memory<br/>- High DDoS risk</td> <td>Superior to Polling in interaction-intensive scenarios, but requires rate limiting for high-concurrency scaling.</td> </tr> <tr> <td><strong>Polling</strong></td> <td>- Simple implementation, stateless<br/>- Easy fault tolerance</td> <td>- High latency (&gt; a few seconds)<br/>- High bandwidth/server pressure</td> <td>Suitable for low-frequency notifications, but poor real-time performance, not recommended as primary.</td> </tr> <tr> <td><strong>Hybrid Mode</strong></td> <td>- Balances online/offline<br/>- Resource optimization, delivery &gt;99%</td> <td>- Complex implementation, multi-channel synchronization<br/>- Filtering logic overhead</td> <td>Best for large-scale: Reduces pressure by 50% compared to pure push, high real-time performance.</td> </tr> </tbody> </table> <hr/> <h2 id="3-recommended-architecture-websocket-combined-with-kafka-asynchronous-push">3. Recommended Architecture: WebSocket Combined with Kafka Asynchronous Push</h2> <h3 id="31-notification-type-classification">3.1 Notification Type Classification</h3> <ul> <li> <p>Distinguish high-priority (@mentions/replies) and low-priority (likes), prioritize hot notifications.</p> </li> <li> <p>Prioritize pushes for active users (Redis online status, TTL=5 min).</p> </li> </ul> <h3 id="32-asynchronous-push">3.2 Asynchronous Push</h3> <ul> <li> <p>After interaction triggers, deliver to Kafka queue; consumers filter and batch push.</p> </li> <li> <p>Merge notifications (e.g., “5 people liked”) to reduce frequency.</p> </li> </ul> <h3 id="33-multi-channel-delivery">3.3 Multi-Channel Delivery</h3> <ul> <li> <p>Web/App: WebSocket as the main channel.</p> </li> <li> <p>Mobile: Fallback to FCM/APNS.</p> </li> </ul> <h3 id="34-rate-limiting-and-degradation">3.4 Rate Limiting and Degradation</h3> <ul> <li> <p>Redis token bucket rate limiting (1000/min/user).</p> </li> <li> <p>Batch merge pushes every 5 s during high load.</p> </li> </ul> <p>The following is a simplified architecture diagram of the recommended architecture (Mermaid syntax):</p> <pre><code class="language-mermaid">graph TD
    A["Interaction Event (Like/@)"] --&gt; B["Notification Service"]
    B --&gt; C["Kafka: Asynchronous Queue"]
    C --&gt; D["Consumer: Filter Active Users + Merge Notifications"]
    D --&gt; E{"Online?"}
    E --&gt;|"Yes"| F["WebSocket: Real-time Push"]
    E --&gt;|"No"| G["FCM/APNS: Mobile Push"]
    H["Redis: Online Status + Rate Limiting"] -.-&gt; D
    H -.-&gt; F
    I["Prometheus: Monitoring Delivery Rate"] -.-&gt; G
    I -.-&gt; F
</code></pre> <p>This diagram shows the overall process from event triggering to delivery.</p> <hr/> <h2 id="4-key-data-structures-and-processes">4. Key Data Structures and Processes</h2> <h3 id="41-redis-structure">4.1 Redis Structure</h3> <ul> <li> <p><code class="language-plaintext highlighter-rouge">online:{userId}</code>: Online status, value “1”, TTL=5 min.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">rate:{userId}</code>: Push rate limiting count, EX=60 s.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">notification:{userId}</code>: Temporary storage for merged notifications (HashMap).</p> </li> </ul> <h3 id="42-notification-push-process">4.2 Notification Push Process</h3> <p>The following is the process sequence diagram (Mermaid syntax):</p> <pre><code class="language-mermaid">sequenceDiagram
    participant Client as Client
    participant Service as Interaction Service
    participant Kafka as Kafka Queue
    participant Consumer as Consumer
    participant Redis as Redis (Online/Rate Limiting)
    participant WS as WebSocket
    Client-&gt;&gt;Service: Trigger Interaction (e.g., Like)
    Service-&gt;&gt;Kafka: Deliver Notification Event
    Kafka-&gt;&gt;Consumer: Consume Batch
    Consumer-&gt;&gt;Redis: Check Active + Rate Limiting
    Redis--&gt;&gt;Consumer: Return Status
    Consumer-&gt;&gt;Consumer: Merge Notifications
    Consumer-&gt;&gt;WS: Push Merged Notifications
    WS--&gt;&gt;Client: Deliver
    Note over Consumer, WS: Offline fallback to FCM/APNS
</code></pre> <h4 id="java-code-example-delivering-notifications">Java Code Example (Delivering Notifications)</h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Deliver notifications to Kafka in the interaction service</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendNotification</span><span class="o">(</span><span class="kt">long</span> <span class="n">fromUserId</span><span class="o">,</span> <span class="kt">long</span> <span class="n">toUserId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">type</span><span class="o">,</span> <span class="kt">long</span> <span class="n">tweetId</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Serialize notification data</span>
    <span class="nc">String</span> <span class="n">notificationJson</span> <span class="o">=</span> <span class="n">serializeNotification</span><span class="o">(</span><span class="n">fromUserId</span><span class="o">,</span> <span class="n">toUserId</span><span class="o">,</span> <span class="n">type</span><span class="o">,</span> <span class="n">tweetId</span><span class="o">);</span>
    <span class="c1">// Configure Producer and send</span>
    <span class="n">kafkaProducer</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProducerRecord</span><span class="o">&lt;&gt;(</span><span class="s">"notification-queue"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">toUserId</span><span class="o">),</span> <span class="n">notificationJson</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div> <h4 id="java-code-example-consumer-processing-and-pushing">Java Code Example (Consumer Processing and Pushing)</h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Kafka consumer processing logic</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">processNotifications</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">KafkaConsumer</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">KafkaConsumer</span><span class="o">&lt;&gt;(</span><span class="n">props</span><span class="o">);</span>
    <span class="n">consumer</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">singleton</span><span class="o">(</span><span class="s">"notification-queue"</span><span class="o">));</span>
    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ConsumerRecords</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span> <span class="n">consumer</span><span class="o">.</span><span class="na">poll</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofMillis</span><span class="o">(</span><span class="mi">100</span><span class="o">));</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Notification</span><span class="o">&gt;&gt;</span> <span class="n">batchMap</span> <span class="o">=</span> <span class="n">groupByUser</span><span class="o">(</span><span class="n">records</span><span class="o">);</span> <span class="c1">// Aggregate by user</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Notification</span><span class="o">&gt;&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">batchMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Notification</span><span class="o">&gt;</span> <span class="n">notifications</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="c1">// Check online and rate limiting</span>
            <span class="k">if</span> <span class="o">(</span><span class="s">"1"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">redis</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"online:"</span> <span class="o">+</span> <span class="n">userId</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="n">redis</span><span class="o">.</span><span class="na">incr</span><span class="o">(</span><span class="s">"rate:"</span> <span class="o">+</span> <span class="n">userId</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Merge notifications</span>
                <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">merged</span> <span class="o">=</span> <span class="n">aggregateNotifications</span><span class="o">(</span><span class="n">notifications</span><span class="o">);</span>
                <span class="c1">// Push</span>
                <span class="nc">Session</span> <span class="n">ws</span> <span class="o">=</span> <span class="n">connections</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">ws</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">ws</span><span class="o">.</span><span class="na">isOpen</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">ws</span><span class="o">.</span><span class="na">getAsyncRemote</span><span class="o">().</span><span class="na">sendText</span><span class="o">(</span><span class="no">JSON</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">merged</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// Fallback to mobile push</span>
                    <span class="n">fcm</span><span class="o">.</span><span class="na">sendToDevice</span><span class="o">(</span><span class="n">getDeviceToken</span><span class="o">(</span><span class="n">userId</span><span class="o">),</span> <span class="n">merged</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">redis</span><span class="o">.</span><span class="na">expire</span><span class="o">(</span><span class="s">"rate:"</span> <span class="o">+</span> <span class="n">userId</span><span class="o">,</span> <span class="mi">60</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h2 id="5-performance-optimization-and-engineering-details">5. Performance Optimization and Engineering Details</h2> <ul> <li> <p><strong>Batch Processing</strong>: Consumers process 500 notifications per batch, Redis MGET for batch online checks.</p> </li> <li> <p><strong>Heartbeat Detection</strong>: WebSocket ping/pong every 30 s to update online status.</p> </li> <li> <p><strong>Security Protection</strong>: IP rate limiting, encrypted pushes to prevent DDoS.</p> </li> <li> <p><strong>Scaling</strong>: Kafka partitions=100, WebSocket nodes autoscaling (&gt;80% CPU).</p> </li> <li> <p><strong>Monitoring</strong>: Grafana tracks delivery rate/latency, alerts for losses &gt;1%.</p> </li> </ul> <hr/> <h2 id="6-high-frequency-interview-follow-ups-and-real-engineering-pitfalls">6. High-Frequency Interview Follow-Ups and Real Engineering Pitfalls</h2> <h3 id="high-frequency-follow-ups">High-Frequency Follow-Ups</h3> <ul> <li> <p>How to prevent queue backlogs under high concurrency? (Dynamic consumer scaling, priority queues)</p> </li> <li> <p>How to handle consistency losses? (Kafka persistence, retry mechanisms)</p> </li> <li> <p>How to ensure multi-channel synchronization? (Unified JSON format, Redis temporary storage)</p> </li> </ul> <h3 id="engineering-pitfalls">Engineering Pitfalls</h3> <ul> <li> <p>Connection memory overflow; solution: Horizontal scaling, limit connections/node &lt;100 k.</p> </li> <li> <p>DDoS amplification; solution: Token bucket + Captcha.</p> </li> <li> <p>Merge logic bugs leading to duplicate notifications; solution: HashMap aggregation + test scripts.</p> </li> </ul> <h3 id="common-misconceptions">Common Misconceptions</h3> <ul> <li> <p>Using only Polling, poor real-time performance leading to user churn.</p> </li> <li> <p>Unlimited flows, peak crashes the system.</p> </li> <li> <p>Ignoring offline pushes, poor mobile user experience.</p> </li> </ul> <hr/> <h2 id="7-summary">7. Summary</h2> <p>Twitter notifications and real-time pushes are core to enhancing user stickiness. Through WebSocket + Kafka asynchronous + multi-channel architecture, efficient delivery and resource optimization can be achieved. Engineering focuses on filtering merges, rate limiting degradation, and monitoring to ensure &gt;99% delivery rate. Combined with upstream (such as timeline events), avoid high-frequency bottlenecks, and emphasize trade-offs in interviews (such as real-time vs. Resources). Actual deployment requires testing billions-scale loads to support platform growth.</p>]]></content><author><name></name></author><category term="System Design Other"/><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>