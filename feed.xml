<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-18T03:09:14+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">1475. Final Prices With a Special Discount in a Shop</title><link href="https://zhengstar94.github.io//blog/2024/FinalPricesWithASpecialDiscountInAShop/" rel="alternate" type="text/html" title="1475. Final Prices With a Special Discount in a Shop"/><published>2024-12-18T00:00:00+00:00</published><updated>2024-12-18T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FinalPricesWithASpecialDiscountInAShop</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FinalPricesWithASpecialDiscountInAShop/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">prices</code> where <code class="language-plaintext highlighter-rouge">prices[i]</code> is the price of the <code class="language-plaintext highlighter-rouge">ith</code> item in a shop.</li> <li>There is a special discount for items in the shop. If you buy the <code class="language-plaintext highlighter-rouge">ith</code> item, then you will receive a discount equivalent to <code class="language-plaintext highlighter-rouge">prices[j]</code> where <code class="language-plaintext highlighter-rouge">j</code> is the minimum index such that <code class="language-plaintext highlighter-rouge">j &gt; i</code> and <code class="language-plaintext highlighter-rouge">prices[j] &lt;= prices[i]</code>. Otherwise, you will not receive any discount at all.</li> <li>Return an integer array <code class="language-plaintext highlighter-rouge">answer</code> where <code class="language-plaintext highlighter-rouge">answer[i]</code> is the final price you will pay for the <code class="language-plaintext highlighter-rouge">ith</code> item of the shop, considering the special discount.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: prices = [8,4,6,2,3]
Output: [4,2,4,2,3]
Explanation: 
For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.
For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.
For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.
For items 3 and 4 you will not receive any discount at all.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: prices = [1,2,3,4,5]
Output: [1,2,3,4,5]
Explanation: In this case, for all items, you will not receive any discount at all.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: prices = [10,1,1,6]
Output: [9,0,1,6]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Stack</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/18
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinalPricesWithASpecialDiscountInAShop</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">finalPrices</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">prices</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of the prices array</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">prices</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="c1">// Create an answer array to store final prices</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

        <span class="c1">// Create a monotonic stack to track potential discount indices</span>
        <span class="c1">// The stack will store indices, not the actual prices</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Iterate through all prices</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// While the stack is not empty and the price at the top of the stack </span>
            <span class="c1">// is greater than or equal to the current price</span>
            <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">prices</span><span class="o">[</span><span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">()]</span> <span class="o">&gt;=</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">]){</span>
                <span class="c1">// Pop the index from the stack</span>
                <span class="c1">// This means we've found a discount for the previous item</span>
                <span class="kt">int</span> <span class="n">prevIndex</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>

                <span class="c1">// Calculate the final price by subtracting the current price</span>
                <span class="c1">// This is the special discount rule</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">prevIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">prevIndex</span><span class="o">]</span> <span class="o">-</span> <span class="n">prices</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>

            <span class="c1">// Push the current index onto the stack</span>
            <span class="c1">// This index might be a potential discount for future items</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Process any remaining indices in the stack</span>
        <span class="c1">// These are items that did not receive any discount</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">index:</span> <span class="n">stack</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Restore the original price for items with no discount</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">prices</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c1">// Return the final prices array</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Mixed prices with various discounts</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">prices1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">8</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">finalPrices</span><span class="o">(</span><span class="n">prices1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">price</span> <span class="o">:</span> <span class="n">result1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">price</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test case 2: Prices in ascending order (no discounts)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">prices2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">finalPrices</span><span class="o">(</span><span class="n">prices2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">price</span> <span class="o">:</span> <span class="n">result2</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">price</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test case 3: Another mixed scenario with discounts</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">prices3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">finalPrices</span><span class="o">(</span><span class="n">prices3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">price</span> <span class="o">:</span> <span class="n">result3</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">price</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Stack"/><category term="Medium"/><summary type="html"><![CDATA[You are given an integer array prices where prices[i] is the price of the ith item in a shop. There is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j &gt; i and prices[j] &lt;= prices[i]. Otherwise, you will not receive any discount at all. Return an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.]]></summary></entry><entry><title type="html">2182. Construct String With Repeat Limit</title><link href="https://zhengstar94.github.io//blog/2024/ConstructStringWithRepeatLimit/" rel="alternate" type="text/html" title="2182. Construct String With Repeat Limit"/><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ConstructStringWithRepeatLimit</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ConstructStringWithRepeatLimit/"><![CDATA[<ul> <li>You are given a string <code class="language-plaintext highlighter-rouge">s</code> and an integer <code class="language-plaintext highlighter-rouge">repeatLimit</code>. Construct a new string <code class="language-plaintext highlighter-rouge">repeatLimitedString</code> using the characters of <code class="language-plaintext highlighter-rouge">s</code> such that no letter appears <strong>more than</strong> <code class="language-plaintext highlighter-rouge">repeatLimit</code> times <strong>in a row</strong>. You do <strong>not</strong> have to use all characters from <code class="language-plaintext highlighter-rouge">s</code>.</li> <li>Return <em>the <strong>lexicographically largest</strong></em> <code class="language-plaintext highlighter-rouge">repeatLimitedString</code> <em>possible</em>.</li> <li>A string <code class="language-plaintext highlighter-rouge">a</code> is <strong>lexicographically larger</strong> than a string <code class="language-plaintext highlighter-rouge">b</code> if in the first position where <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> differ, string <code class="language-plaintext highlighter-rouge">a</code> has a letter that appears later in the alphabet than the corresponding letter in <code class="language-plaintext highlighter-rouge">b</code>. If the first <code class="language-plaintext highlighter-rouge">min(a.length, b.length)</code> characters do not differ, then the longer string is the lexicographically larger one.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "cczazcc", repeatLimit = 3
Output: "zzcccac"
Explanation: We use all of the characters from s to construct the repeatLimitedString "zzcccac".
The letter 'a' appears at most 1 time in a row.
The letter 'c' appears at most 3 times in a row.
The letter 'z' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return "zzcccac".
Note that the string "zzcccca" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aababab", repeatLimit = 2
Output: "bbabaa"
Explanation: We use only some of the characters from s to construct the repeatLimitedString "bbabaa". 
The letter 'a' appears at most 2 times in a row.
The letter 'b' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return "bbabaa".
Note that the string "bbabaaa" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/17
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConstructStringWithRepeatLimit</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">repeatLimitedString</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">repeatLimit</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
        <span class="c1">// Count the occurrences of each character in the string</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">count</span><span class="o">[</span><span class="n">ch</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="c1">// Start from the largest character</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">25</span><span class="o">;</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">25</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="c1">// Ensure that r does not exceed the previous smaller character</span>
            <span class="n">r</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

            <span class="k">while</span> <span class="o">(</span><span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">repeatLimit</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Add `repeatLimit` occurrences of the current character</span>
                    <span class="kt">int</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">repeatLimit</span><span class="o">;</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="o">(</span><span class="sc">'a'</span> <span class="o">+</span> <span class="n">i</span><span class="o">));</span>
                    <span class="o">}</span>

                    <span class="c1">// Find the next available smaller character</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">r</span><span class="o">--;</span>
                    <span class="o">}</span>

                    <span class="c1">// If no smaller character is available, return the constructed string</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
                    <span class="o">}</span>

                    <span class="c1">// Add the smaller character found</span>
                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="o">(</span><span class="sc">'a'</span> <span class="o">+</span> <span class="n">r</span><span class="o">));</span>
                    <span class="n">count</span><span class="o">[</span><span class="n">r</span><span class="o">]--;</span>
                    <span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-=</span> <span class="n">repeatLimit</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// Add all remaining occurrences of the current character</span>
                    <span class="kt">int</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="o">(</span><span class="sc">'a'</span> <span class="o">+</span> <span class="n">i</span><span class="o">));</span>
                    <span class="o">}</span>
                    <span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Basic scenario</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"aabccc"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">repeatLimit1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">repeatLimitedString</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">repeatLimit1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input String: "</span> <span class="o">+</span> <span class="n">s1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Repeat Limit: "</span> <span class="o">+</span> <span class="n">repeatLimit1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: All characters are the same</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"aaaaa"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">repeatLimit2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">repeatLimitedString</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">repeatLimit2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input String: "</span> <span class="o">+</span> <span class="n">s2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Repeat Limit: "</span> <span class="o">+</span> <span class="n">repeatLimit2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Complex scenario</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"cczzzzeeddaabb"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">repeatLimit3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">repeatLimitedString</span><span class="o">(</span><span class="n">s3</span><span class="o">,</span> <span class="n">repeatLimit3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input String: "</span> <span class="o">+</span> <span class="n">s3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Repeat Limit: "</span> <span class="o">+</span> <span class="n">repeatLimit3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Repeat limit is 1</span>
        <span class="nc">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="s">"aabbccddee"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">repeatLimit4</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">result4</span> <span class="o">=</span> <span class="n">repeatLimitedString</span><span class="o">(</span><span class="n">s4</span><span class="o">,</span> <span class="n">repeatLimit4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input String: "</span> <span class="o">+</span> <span class="n">s4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Repeat Limit: "</span> <span class="o">+</span> <span class="n">repeatLimit4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">result4</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Medium"/><summary type="html"><![CDATA[You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s. Return the lexicographically largest repeatLimitedString possible. A string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.]]></summary></entry><entry><title type="html">885. Spiral Matrix III</title><link href="https://zhengstar94.github.io//blog/2024/SpiralMatrixIII/" rel="alternate" type="text/html" title="885. Spiral Matrix III"/><published>2024-12-17T00:00:00+00:00</published><updated>2024-12-17T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/SpiralMatrixIII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/SpiralMatrixIII/"><![CDATA[<ul> <li>You start at the cell <code class="language-plaintext highlighter-rouge">(rStart, cStart)</code> of an <code class="language-plaintext highlighter-rouge">rows x cols</code> grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.</li> <li>You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid’s boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all <code class="language-plaintext highlighter-rouge">rows * cols</code> spaces of the grid.</li> <li>Return <em>an array of coordinates representing the positions of the grid in the order you visited them</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: rows = 1, cols = 4, rStart = 0, cStart = 0
Output: [ [ 0,0],[0,1],[0,2],[0,3 ] ]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: rows = 5, cols = 6, rStart = 1, cStart = 4
Output: [ [ 1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0 ] ]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(rows * cols) time | O(rows * cols) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/17
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpiralMatrixIII</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">spiralMatrixIII</span><span class="o">(</span><span class="kt">int</span> <span class="n">rows</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cols</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rStart</span><span class="o">,</span> <span class="kt">int</span> <span class="n">cStart</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize the result array to store the positions visited</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">][</span><span class="mi">2</span><span class="o">];</span>
        <span class="c1">// Initialize the count to track the number of visited cells</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Start at the given initial position (rStart, cStart)</span>
        <span class="n">result</span><span class="o">[</span><span class="n">count</span><span class="o">++]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">rStart</span><span class="o">,</span> <span class="n">cStart</span><span class="o">};</span>

        <span class="c1">// Define the four directions in the order: Right -&gt; Down -&gt; Left -&gt; Up</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">directions</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">},</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span> <span class="o">}</span> <span class="o">};</span>
        <span class="c1">// Initialize step size for each direction</span>
        <span class="kt">int</span> <span class="n">step</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="c1">// Initialize the direction index to point to the first direction (Right)</span>
        <span class="kt">int</span> <span class="n">dirIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Loop until all cells are visited</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">*</span> <span class="n">cols</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Each step size is repeated twice: first horizontally, then vertically</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// Loop over horizontal and vertical moves</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">step</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// Move in the current direction 'step' times</span>
                    <span class="c1">// Update the row and column based on the current direction</span>
                    <span class="n">rStart</span> <span class="o">+=</span> <span class="n">directions</span><span class="o">[</span><span class="n">dirIndex</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// Row movement</span>
                    <span class="n">cStart</span> <span class="o">+=</span> <span class="n">directions</span><span class="o">[</span><span class="n">dirIndex</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span> <span class="c1">// Column movement</span>

                    <span class="c1">// Check if the current position is within the grid bounds</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">rStart</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">rStart</span> <span class="o">&lt;</span> <span class="n">rows</span> <span class="o">&amp;&amp;</span> <span class="n">cStart</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">cStart</span> <span class="o">&lt;</span> <span class="n">cols</span><span class="o">)</span> <span class="o">{</span>
                        <span class="c1">// Add the valid position to the result array</span>
                        <span class="n">result</span><span class="o">[</span><span class="n">count</span><span class="o">++]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">rStart</span><span class="o">,</span> <span class="n">cStart</span><span class="o">};</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="c1">// After completing one direction (either horizontal or vertical), change direction</span>
                <span class="n">dirIndex</span> <span class="o">=</span> <span class="o">(</span><span class="n">dirIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">4</span><span class="o">;</span> <span class="c1">// Use modulo to cycle through the four directions (0 to 3)</span>
            <span class="o">}</span>
            <span class="c1">// Increase the step size after completing a full cycle of two directions (horizontal + vertical)</span>
            <span class="n">step</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Single row, multiple columns</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">spiralMatrixIII</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">pos</span> <span class="o">:</span> <span class="n">result1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">pos</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">pos</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="s">"] "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test case 2: Multiple rows and columns</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">spiralMatrixIII</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">pos</span> <span class="o">:</span> <span class="n">result2</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span> <span class="o">+</span> <span class="n">pos</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">","</span> <span class="o">+</span> <span class="n">pos</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="s">"] "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column. You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid’s boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid. Return an array of coordinates representing the positions of the grid in the order you visited them.]]></summary></entry><entry><title type="html">415. Add Strings</title><link href="https://zhengstar94.github.io//blog/2024/AddStrings/" rel="alternate" type="text/html" title="415. Add Strings"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/AddStrings</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/AddStrings/"><![CDATA[<ul> <li>Given two non-negative integers, <code class="language-plaintext highlighter-rouge">num1</code> and <code class="language-plaintext highlighter-rouge">num2</code> represented as string, return <em>the sum of</em> <code class="language-plaintext highlighter-rouge">num1</code> <em>and</em> <code class="language-plaintext highlighter-rouge">num2</code> <em>as a string</em>.</li> <li>You must solve the problem without using any built-in library for handling large integers (such as <code class="language-plaintext highlighter-rouge">BigInteger</code>). You must also not convert the inputs to integers directly.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = "11", num2 = "123"
Output: "134"
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = "456", num2 = "77"
Output: "533"
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = "0", num2 = "0"
Output: "0"
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(max(n, m)) time | O(max(n, m)) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.MathGeometry</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddStrings</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">addStrings</span><span class="o">(</span><span class="nc">String</span> <span class="n">num1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">num2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize pointers to the end of both input strings</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">num2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Initialize carry variable to track digit overflow</span>
        <span class="kt">int</span> <span class="n">up</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// StringBuilder to efficiently build the result string</span>
        <span class="nc">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="c1">// Continue while there are digits to process or there's a carry</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">up</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Extract current digits, use 0 if no more digits</span>
            <span class="c1">// Convert character to integer by subtracting '0'</span>
            <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">num1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">num2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>

            <span class="c1">// Calculate sum of current digits and carry</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">up</span><span class="o">;</span>

            <span class="c1">// Append the current digit's ones place to result</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">result</span> <span class="o">%</span> <span class="mi">10</span><span class="o">);</span>

            <span class="c1">// Calculate new carry for next iteration</span>
            <span class="n">up</span> <span class="o">=</span> <span class="n">result</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>

            <span class="c1">// Move pointers to previous digits</span>
            <span class="n">i</span><span class="o">--;</span>
            <span class="n">j</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="c1">// Reverse the string as we built it from least significant digit</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test Case 1: Regular numbers with different lengths</span>
        <span class="nc">String</span> <span class="n">test1Num1</span> <span class="o">=</span> <span class="s">"11"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test1Num2</span> <span class="o">=</span> <span class="s">"123"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: "</span> <span class="o">+</span> <span class="n">test1Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test1Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test1Num1</span><span class="o">,</span> <span class="n">test1Num2</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Numbers with carry</span>
        <span class="nc">String</span> <span class="n">test2Num1</span> <span class="o">=</span> <span class="s">"456"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test2Num2</span> <span class="o">=</span> <span class="s">"77"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2: "</span> <span class="o">+</span> <span class="n">test2Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test2Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test2Num1</span><span class="o">,</span> <span class="n">test2Num2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: Zero cases</span>
        <span class="nc">String</span> <span class="n">test3Num1</span> <span class="o">=</span> <span class="s">"0"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test3Num2</span> <span class="o">=</span> <span class="s">"0"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3: "</span> <span class="o">+</span> <span class="n">test3Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test3Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test3Num1</span><span class="o">,</span> <span class="n">test3Num2</span><span class="o">));</span>

        <span class="c1">// Test Case 4: Large numbers</span>
        <span class="nc">String</span> <span class="n">test4Num1</span> <span class="o">=</span> <span class="s">"9999"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test4Num2</span> <span class="o">=</span> <span class="s">"1"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 4: "</span> <span class="o">+</span> <span class="n">test4Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test4Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test4Num1</span><span class="o">,</span> <span class="n">test4Num2</span><span class="o">));</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode MathGeometry"/><category term="Easy"/><summary type="html"><![CDATA[Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string. You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.]]></summary></entry><entry><title type="html">1847. Closest Room</title><link href="https://zhengstar94.github.io//blog/2024/ClosestRoom/" rel="alternate" type="text/html" title="1847. Closest Room"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ClosestRoom</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ClosestRoom/"><![CDATA[<ul> <li>There is a hotel with <code class="language-plaintext highlighter-rouge">n</code> rooms. The rooms are represented by a 2D integer array <code class="language-plaintext highlighter-rouge">rooms</code> where <code class="language-plaintext highlighter-rouge">rooms[i] = [roomIdi, sizei]</code> denotes that there is a room with room number <code class="language-plaintext highlighter-rouge">roomIdi</code> and size equal to <code class="language-plaintext highlighter-rouge">sizei</code>. Each <code class="language-plaintext highlighter-rouge">roomIdi</code> is guaranteed to be <strong>unique</strong>.</li> <li>You are also given <code class="language-plaintext highlighter-rouge">k</code> queries in a 2D array <code class="language-plaintext highlighter-rouge">queries</code> where <code class="language-plaintext highlighter-rouge">queries[j] = [preferredj, minSizej]</code>. The answer to the <code class="language-plaintext highlighter-rouge">jth</code> query is the room number <code class="language-plaintext highlighter-rouge">id</code> of a room such that: <ul> <li>The room has a size of <strong>at least</strong> <code class="language-plaintext highlighter-rouge">minSizej</code>, and</li> <li><code class="language-plaintext highlighter-rouge">abs(id - preferredj)</code> is <strong>minimized</strong>, where <code class="language-plaintext highlighter-rouge">abs(x)</code> is the absolute value of <code class="language-plaintext highlighter-rouge">x</code>.</li> </ul> </li> <li>If there is a <strong>tie</strong> in the absolute difference, then use the room with the <strong>smallest</strong> such <code class="language-plaintext highlighter-rouge">id</code>. If there is <strong>no such room</strong>, the answer is <code class="language-plaintext highlighter-rouge">-1</code>.</li> <li>Return <em>an array</em> <code class="language-plaintext highlighter-rouge">answer</code> <em>of length</em> <code class="language-plaintext highlighter-rouge">k</code> <em>where</em> <code class="language-plaintext highlighter-rouge">answer[j]</code> <em>contains the answer to the</em> <code class="language-plaintext highlighter-rouge">jth</code> <em>query</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: rooms = [ [ 2,2],[1,2],[3,2 ] ], queries = [ [ 3,1],[3,3],[5,2 ] ]
Output: [3,-1,3]
Explanation: The answers to the queries are as follows:
Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.
Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.
Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: rooms = [ [ 1,4],[2,3],[3,5],[4,1],[5,2 ] ], queries = [ [ 2,3],[2,4],[2,5 ] ]
Output: [2,1,3]
Explanation: The answers to the queries are as follows:
Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.
Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.
Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(NlogN + QlogQ + QlogN) time | O(N + Q) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeSet</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClosestRoom</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">closestRoom</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create an array to track original query indices</span>
        <span class="c1">// This allows us to maintain the original query order while sorting</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">queryIndices</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">[</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">queryIndices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>  <span class="c1">// Initialize with original indices</span>
        <span class="o">}</span>

        <span class="c1">// Sort query indices based on room size in descending order</span>
        <span class="c1">// This helps process larger room size requirements first</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">queryIndices</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">queries</span><span class="o">[</span><span class="n">b</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="n">queries</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="mi">1</span><span class="o">]));</span>

        <span class="c1">// Sort rooms by size in descending order</span>
        <span class="c1">// Allows efficient filtering of rooms that meet size requirements</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rooms</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>

        <span class="c1">// Initialize result array and room ID set</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">TreeSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">roomIds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Track which rooms have been processed</span>
        <span class="kt">int</span> <span class="n">roomIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Process each query in sorted order</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">queryIdx</span> <span class="o">:</span> <span class="n">queryIndices</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Extract query parameters</span>
            <span class="kt">int</span> <span class="n">preferred</span> <span class="o">=</span> <span class="n">queries</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>  <span class="c1">// Preferred room number</span>
            <span class="kt">int</span> <span class="n">minSize</span> <span class="o">=</span> <span class="n">queries</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>    <span class="c1">// Minimum room size</span>

            <span class="c1">// Add room IDs that meet the size requirement</span>
            <span class="c1">// Dynamically build a set of valid room IDs</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">roomIndex</span> <span class="o">&lt;</span> <span class="n">rooms</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">rooms</span><span class="o">[</span><span class="n">roomIndex</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">minSize</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">roomIds</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rooms</span><span class="o">[</span><span class="n">roomIndex</span><span class="o">][</span><span class="mi">0</span><span class="o">]);</span>
                <span class="n">roomIndex</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// If no rooms meet the size requirement, mark as -1</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">roomIds</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Find the closest room numbers</span>
            <span class="c1">// floor: largest room number &lt;= preferred</span>
            <span class="c1">// ceiling: smallest room number &gt;= preferred</span>
            <span class="nc">Integer</span> <span class="n">lower</span> <span class="o">=</span> <span class="n">roomIds</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">preferred</span><span class="o">);</span>
            <span class="nc">Integer</span> <span class="n">higher</span> <span class="o">=</span> <span class="n">roomIds</span><span class="o">.</span><span class="na">ceiling</span><span class="o">(</span><span class="n">preferred</span><span class="o">);</span>

            <span class="c1">// Handle edge cases where lower or higher might be null</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">lower</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// No room number lower than preferred, use higher</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="n">higher</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">higher</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// No room number higher than preferred, use lower</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="n">lower</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Compare absolute differences to find the closest room</span>
                <span class="kt">int</span> <span class="n">lowDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">preferred</span> <span class="o">-</span> <span class="n">lower</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">highDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">preferred</span> <span class="o">-</span> <span class="n">higher</span><span class="o">);</span>

                <span class="c1">// Choose the closer room</span>
                <span class="c1">// If distances are equal, prefer the lower room number</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">lowDiff</span> <span class="o">&lt;=</span> <span class="n">highDiff</span><span class="o">)</span> <span class="o">?</span> <span class="n">lower</span> <span class="o">:</span> <span class="n">higher</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test Case 1: Basic scenario</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">closestRoom</span><span class="o">(</span><span class="n">rooms1</span><span class="o">,</span> <span class="n">queries1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span>
        <span class="c1">// Expected: [3, -1, 3]</span>

        <span class="c1">// Test Case 2: More complex scenario</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">4</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">},</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">5</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">closestRoom</span><span class="o">(</span><span class="n">rooms2</span><span class="o">,</span> <span class="n">queries2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span>
        <span class="c1">// Expected: [2, 1, 3]</span>

        <span class="c1">// Test Case 3: Edge cases</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">10</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">20</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">30</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">9</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">21</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">40</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">closestRoom</span><span class="o">(</span><span class="n">rooms3</span><span class="o">,</span> <span class="n">queries3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result3</span><span class="o">));</span>
        <span class="c1">// Expected: [1, 3, -1]</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><category term="Hard"/><summary type="html"><![CDATA[There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique. You are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that: The room has a size of at least minSizej, and abs(id - preferredj) is minimized, where abs(x) is the absolute value of x. If there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1. Return an array answer of length k where answer[j] contains the answer to the jth query.]]></summary></entry><entry><title type="html">50. Pow(x, n)</title><link href="https://zhengstar94.github.io//blog/2024/PowXN/" rel="alternate" type="text/html" title="50. Pow(x, n)"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/PowXN</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/PowXN/"><![CDATA[<ul> <li>Implement <a href="http://www.cplusplus.com/reference/valarray/pow/">pow(x, n)</a>, which calculates <code class="language-plaintext highlighter-rouge">x</code> raised to the power <code class="language-plaintext highlighter-rouge">n</code> (i.e., <code class="language-plaintext highlighter-rouge">xn</code>).</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: x = 2.00000, n = 10
Output: 1024.00000
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: x = 2.10000, n = 3
Output: 9.26100
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(log(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.MathGeometry</span><span class="o">;</span>

<span class="cm">/**
 * Author: Xingxing Zheng
 * Date: 2024/12/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PowXN</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">myPow</span><span class="o">(</span><span class="kt">double</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases where the base is 0 or the exponent is 0</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Any number raised to a power with base 0 is 0</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Any number raised to the power of 0 is 1</span>
        <span class="o">}</span>

        <span class="c1">// Convert n to long to handle Integer.MIN_VALUE edge case</span>
        <span class="kt">long</span> <span class="no">N</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">N</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If the exponent is negative, take the reciprocal of the base</span>
            <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">x</span><span class="o">;</span>
            <span class="no">N</span> <span class="o">=</span> <span class="o">-</span><span class="no">N</span><span class="o">;</span> <span class="c1">// Make the exponent positive</span>
        <span class="o">}</span>

        <span class="c1">// Initialize the result to 1</span>
        <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="mf">1.0</span><span class="o">;</span>

        <span class="c1">// Implement fast exponentiation</span>
        <span class="k">while</span> <span class="o">(</span><span class="no">N</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If the current bit of N (binary representation) is 1</span>
            <span class="k">if</span> <span class="o">(</span><span class="no">N</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span> <span class="o">*=</span> <span class="n">x</span><span class="o">;</span> <span class="c1">// Multiply the current base value (x) into the result</span>
            <span class="o">}</span>

            <span class="c1">// Update the base value by squaring it</span>
            <span class="c1">// This allows us to compute powers of 2 efficiently (e.g., x^2, x^4, x^8, etc.)</span>
            <span class="n">x</span> <span class="o">*=</span> <span class="n">x</span><span class="o">;</span>

            <span class="c1">// Shift N to the right by 1 bit (equivalent to dividing by 2)</span>
            <span class="c1">// This moves to the next higher power of 2 in the binary representation of N</span>
            <span class="no">N</span> <span class="o">/=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span> <span class="c1">// Return the final result</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2^10 = "</span> <span class="o">+</span> <span class="n">myPow</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>   <span class="c1">// Output: 1024.0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2^-2 = "</span> <span class="o">+</span> <span class="n">myPow</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">));</span>   <span class="c1">// Output: 0.25</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"0^5 = "</span> <span class="o">+</span> <span class="n">myPow</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>     <span class="c1">// Output: 0.0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"5^0 = "</span> <span class="o">+</span> <span class="n">myPow</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>     <span class="c1">// Output: 1.0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"(-2)^3 = "</span> <span class="o">+</span> <span class="n">myPow</span><span class="o">(-</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span> <span class="c1">// Output: -8.0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"(-2)^-3 = "</span> <span class="o">+</span> <span class="n">myPow</span><span class="o">(-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">3</span><span class="o">));</span> <span class="c1">// Output: -0.125</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode MathGeometry"/><category term="Medium"/><summary type="html"><![CDATA[Implement pow(x, n), which calculates x raised to the power n (i.e., xn).]]></summary></entry><entry><title type="html">658. Find K Closest Elements</title><link href="https://zhengstar94.github.io//blog/2024/FindKClosestElements/" rel="alternate" type="text/html" title="658. Find K Closest Elements"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindKClosestElements</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindKClosestElements/"><![CDATA[<ul> <li>Given a <strong>sorted</strong> integer array <code class="language-plaintext highlighter-rouge">arr</code>, two integers <code class="language-plaintext highlighter-rouge">k</code> and <code class="language-plaintext highlighter-rouge">x</code>, return the <code class="language-plaintext highlighter-rouge">k</code> closest integers to <code class="language-plaintext highlighter-rouge">x</code> in the array. The result should also be sorted in ascending order.</li> <li>An integer <code class="language-plaintext highlighter-rouge">a</code> is closer to <code class="language-plaintext highlighter-rouge">x</code> than an integer <code class="language-plaintext highlighter-rouge">b</code> if: <ul> <li><code class="language-plaintext highlighter-rouge">|a - x| &lt; |b - x|</code>, or</li> <li><code class="language-plaintext highlighter-rouge">|a - x| == |b - x|</code> and <code class="language-plaintext highlighter-rouge">a &lt; b</code></li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,2,3,4,5], k = 4, x = 3

Output: [1,2,3,4]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,1,2,3,4,5], k = 4, x = -1

Output: [1,1,2,3]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(k) time | O(k) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.BinarySearch</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindKClosestElements</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">findClosestElements</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Loop until the subarray has exactly k elements</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">&gt;=</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Compare the distances between arr[left] and arr[right] to x</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">-</span> <span class="n">x</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">-</span> <span class="n">x</span><span class="o">))</span> <span class="o">{</span>
                <span class="c1">// If the left element is closer or equal to x, move the right pointer left</span>
                <span class="n">right</span><span class="o">--;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Otherwise, move the left pointer right</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Create a list to store the k closest elements</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">// Add the elements between left and right pointers to the result</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr1</span><span class="o">,</span> <span class="n">k1</span><span class="o">,</span> <span class="n">x1</span><span class="o">));</span>
        <span class="c1">// Expected output: [1, 2, 3, 4]</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x2</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr2</span><span class="o">,</span> <span class="n">k2</span><span class="o">,</span> <span class="n">x2</span><span class="o">));</span>
        <span class="c1">// Expected output: [1, 1, 2, 3]</span>

        <span class="c1">// Test case 3</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x3</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr3</span><span class="o">,</span> <span class="n">k3</span><span class="o">,</span> <span class="n">x3</span><span class="o">));</span>
        <span class="c1">// Expected output: [3, 5, 7]</span>

        <span class="c1">// Test case 4</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k4</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x4</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr4</span><span class="o">,</span> <span class="n">k4</span><span class="o">,</span> <span class="n">x4</span><span class="o">));</span>
        <span class="c1">// Expected output: [10, 15]</span>

        <span class="c1">// Test case 5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k5</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x5</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 5: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr5</span><span class="o">,</span> <span class="n">k5</span><span class="o">,</span> <span class="n">x5</span><span class="o">));</span>
        <span class="c1">// Expected output: [1, 2, 3]</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Binary Search"/><category term="Medium"/><summary type="html"><![CDATA[Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order. An integer a is closer to x than an integer b if: |a - x| &lt; |b - x|, or |a - x| == |b - x| and a &lt; b]]></summary></entry><entry><title type="html">1539. Kth Missing Positive Number</title><link href="https://zhengstar94.github.io//blog/2024/KthMissingPositiveNumber/" rel="alternate" type="text/html" title="1539. Kth Missing Positive Number"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/KthMissingPositiveNumber</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/KthMissingPositiveNumber/"><![CDATA[<ul> <li>Given an array <code class="language-plaintext highlighter-rouge">arr</code> of positive integers sorted in a <strong>strictly increasing order</strong>, and an integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>Return <em>the</em> <code class="language-plaintext highlighter-rouge">kth</code> <em><strong>positive</strong> integer that is <strong>missing</strong> from this array.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(log(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.BinarySearch</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">KthMissingPositiveNumber</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findKthPositive</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Binary search to find the first position where the number of missing numbers &gt;= k</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
            <span class="c1">// Calculate the number of missing numbers up to arr[mid]</span>
            <span class="kt">int</span> <span class="n">missingCount</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">-</span> <span class="o">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">missingCount</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the missing count is less than k, search to the right half</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// If the missing count is greater or equal to k, search to the left half</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// When the loop ends, left is the position where the first missing count &gt;= k is found</span>
        <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="n">k</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findKthPositive</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">11</span><span class="o">},</span> <span class="mi">5</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Binary Search"/><category term="Easy"/><summary type="html"><![CDATA[Given an array arr of positive integers sorted in a strictly increasing order, and an integer k. Return the kth positive integer that is missing from this array.]]></summary></entry><entry><title type="html">1792. Maximum Average Pass Ratio</title><link href="https://zhengstar94.github.io//blog/2024/MaximumAveragePassRatio/" rel="alternate" type="text/html" title="1792. Maximum Average Pass Ratio"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MaximumAveragePassRatio</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MaximumAveragePassRatio/"><![CDATA[<ul> <li> <p>There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array <code class="language-plaintext highlighter-rouge">classes</code>, where <code class="language-plaintext highlighter-rouge">classes[i] = [passi, totali]</code>. You know beforehand that in the <code class="language-plaintext highlighter-rouge">ith</code> class, there are <code class="language-plaintext highlighter-rouge">totali</code> total students, but only <code class="language-plaintext highlighter-rouge">passi</code> number of students will pass the exam.</p> </li> <li> <p>You are also given an integer <code class="language-plaintext highlighter-rouge">extraStudents</code>. There are another <code class="language-plaintext highlighter-rouge">extraStudents</code> brilliant students that are <strong>guaranteed</strong> to pass the exam of any class they are assigned to. You want to assign each of the <code class="language-plaintext highlighter-rouge">extraStudents</code> students to a class in a way that <strong>maximizes</strong> the <strong>average</strong> pass ratio across <strong>all</strong> the classes.</p> </li> <li> <p>The <strong>pass ratio</strong> of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The <strong>average pass ratio</strong> is the sum of pass ratios of all the classes divided by the number of the classes.</p> <p>Return <em>the <strong>maximum</strong> possible average pass ratio after assigning the</em> <code class="language-plaintext highlighter-rouge">extraStudents</code> <em>students.</em> Answers within 10-5` of the actual answer will be accepted.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: classes = [ [ 1,2],[3,5],[2,2 ] ], extraStudents = 2
Output: 0.78333
Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: classes = [ [ 2,4],[3,9],[4,5],[2,10 ] ], extraStudents = 4
Output: 0.53485
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O((n+k)log(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumAveragePassRatio</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">maxAverageRatio</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">classes</span><span class="o">,</span> <span class="kt">int</span> <span class="n">extraStudents</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Custom comparator to prioritize classes based on "marginal gain" in pass ratio</span>
        <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">[]&gt;</span> <span class="n">pq</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">[]&gt;(</span>
                <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">[]&gt;(){</span>
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">double</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span><span class="o">[]</span> <span class="n">b</span> <span class="o">){</span>
                        <span class="c1">// Calculate the improvement in pass ratio when adding one student</span>
                        <span class="c1">// For class `a`: (a[0]+1)/(a[1]+1) - a[0]/a[1]</span>
                        <span class="c1">// Example: If a class improves from 1/2 to 2/3:</span>
                        <span class="c1">// Original ratio: 1/2 = 0.5</span>
                        <span class="c1">// New ratio: 2/3 ≈ 0.667</span>
                        <span class="c1">// Gain: 0.667 - 0.5 = 0.167</span>
                        <span class="kt">double</span> <span class="n">diffa</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="mi">1</span><span class="o">)/(</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]/</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
                        <span class="kt">double</span> <span class="n">diffb</span> <span class="o">=</span> <span class="o">(</span><span class="n">b</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="mi">1</span><span class="o">)/(</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="n">b</span><span class="o">[</span><span class="mi">0</span><span class="o">]/</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

                        <span class="c1">// Comparison logic:</span>
                        <span class="c1">// 1. If the gain is equal, return 0</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">diffa</span> <span class="o">==</span> <span class="n">diffb</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="c1">// 2. If the gain for class `a` is greater than `b`, return -1</span>
                        <span class="c1">// PriorityQueue is a min-heap, so returning -1 means `a` has higher priority</span>
                        <span class="c1">// We want the class with the maximum gain to be at the front</span>
                        <span class="k">return</span> <span class="n">diffa</span> <span class="o">&gt;</span> <span class="n">diffb</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
        <span class="o">);</span>
        <span class="c1">// Add all class information to the priority queue</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="kt">double</span><span class="o">[]</span> <span class="o">{</span>
                    <span class="nc">Double</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">classes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]),</span>
                    <span class="nc">Double</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">classes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span>
            <span class="o">});</span>
        <span class="o">}</span>

        <span class="c1">// Allocate additional students</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">extraStudents</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">double</span><span class="o">[]</span> <span class="n">p</span> <span class="o">=</span> <span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// Remove the class with the highest marginal gain</span>

            <span class="n">p</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Increment passed students</span>
            <span class="n">p</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Increment total students</span>

            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">p</span><span class="o">);</span> <span class="c1">// Re-add the updated class back to the queue</span>
            <span class="n">extraStudents</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="c1">// Calculate the final average pass ratio</span>
        <span class="kt">double</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">double</span><span class="o">[]</span> <span class="n">p</span> <span class="o">:</span> <span class="n">pq</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">p</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">/</span> <span class="n">p</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c1">// Return the average pass ratio</span>
        <span class="k">return</span> <span class="n">res</span> <span class="o">/</span> <span class="nc">Double</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">len</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test case 1: Three classes, two extra students</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">classes1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">},{</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">},{</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span> <span class="n">extraStudents1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">maxAverageRatio</span><span class="o">(</span><span class="n">classes1</span><span class="o">,</span> <span class="n">extraStudents1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>

        <span class="c1">// Test case 2: Four classes, four extra students</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">classes2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">},{</span><span class="mi">3</span><span class="o">,</span><span class="mi">9</span><span class="o">},{</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">},{</span><span class="mi">2</span><span class="o">,</span><span class="mi">10</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span> <span class="n">extraStudents2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">maxAverageRatio</span><span class="o">(</span><span class="n">classes2</span><span class="o">,</span> <span class="n">extraStudents2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>

        <span class="c1">// Boundary test case: Only one class</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">classes3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">3</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span> <span class="n">extraStudents3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">maxAverageRatio</span><span class="o">(</span><span class="n">classes3</span><span class="o">,</span> <span class="n">extraStudents3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Medium"/><summary type="html"><![CDATA[There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.]]></summary></entry><entry><title type="html">1338. Reduce Array Size to The Half</title><link href="https://zhengstar94.github.io//blog/2024/ReduceArraySizeToTheHalf/" rel="alternate" type="text/html" title="1338. Reduce Array Size to The Half"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ReduceArraySizeToTheHalf</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ReduceArraySizeToTheHalf/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">arr</code>. You can choose a set of integers and remove all the occurrences of these integers in the array.</li> <li>Return <em>the minimum size of the set so that <strong>at least</strong> half of the integers of the array are removed</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).
Possible sets of size 2 are {3,5},{3,2},{5,2}.
Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [7,7,7,7,7,7]
Output: 1
Explanation: The only possible set you can choose is {7}. This will make the new array empty.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n) time | O(m) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReduceArraySizeToTheHalf</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minSetSize</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create a frequency array to count occurrences of each number</span>
        <span class="c1">// Size 10001 to accommodate the problem's given number range</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10001</span><span class="o">];</span>

        <span class="c1">// Count the frequency of each number in the input array</span>
        <span class="c1">// For each number, increment its count in the frequency array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">nums</span><span class="o">[</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]]++;</span>
        <span class="o">}</span>

        <span class="c1">// Sort the frequency array in ascending order</span>
        <span class="c1">// This allows us to process numbers from highest to lowest frequency</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>

        <span class="c1">// Variable to track the count of elements removed</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate from the end of the array (highest frequencies)</span>
        <span class="c1">// Work backwards to minimize the number of unique elements removed</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="c1">// Add the current frequency to the total count of removed elements</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="n">cnt</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>

            <span class="c1">// Check if the removed elements exceed half the original array length</span>
            <span class="c1">// If so, return the number of unique elements removed</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&gt;=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="mi">2</span><span class="o">){</span>
                <span class="c1">// Calculate the number of unique elements removed</span>
                <span class="c1">// nums.length - i + 1 gives the count of frequency groups removed</span>
                <span class="k">return</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If no solution is found, return the entire array length</span>
        <span class="c1">// This is a fallback scenario, though unlikely to occur given the problem constraints</span>
        <span class="k">return</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Array with different elements</span>
        <span class="c1">// Demonstrates removing elements to reduce array size</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr1</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test Case 2: Array with all same elements</span>
        <span class="c1">// Shows handling of uniform frequency elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr2</span><span class="o">));</span> <span class="c1">// Expected output: 1</span>

        <span class="c1">// Test Case 3: More complex array with varied frequencies</span>
        <span class="c1">// Tests scenario with multiple unique elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr3</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>

        <span class="c1">// Test Case 4: Large data range</span>
        <span class="c1">// Verifies the solution works with a larger, more diverse input</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span><span class="mi">77</span><span class="o">,</span><span class="mi">63</span><span class="o">,</span><span class="mi">22</span><span class="o">,</span><span class="mi">92</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">14</span><span class="o">,</span><span class="mi">54</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">38</span><span class="o">,</span><span class="mi">18</span><span class="o">,</span><span class="mi">64</span><span class="o">,</span><span class="mi">92</span><span class="o">,</span><span class="mi">53</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">57</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">76</span><span class="o">,</span><span class="mi">40</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr4</span><span class="o">));</span> <span class="c1">// Expected output result</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array. Return the minimum size of the set so that at least half of the integers of the array are removed.]]></summary></entry></feed>