<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-08T04:41:33+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">66. Plus One</title><link href="https://zhengstar94.github.io//blog/2024/PlusOne/" rel="alternate" type="text/html" title="66. Plus One"/><published>2024-12-08T00:00:00+00:00</published><updated>2024-12-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/PlusOne</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/PlusOne/"><![CDATA[<ul> <li>You are given a <strong>large integer</strong> represented as an integer array <code class="language-plaintext highlighter-rouge">digits</code>, where each <code class="language-plaintext highlighter-rouge">digits[i]</code> is the <code class="language-plaintext highlighter-rouge">ith</code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code class="language-plaintext highlighter-rouge">0</code>’s.</li> <li>Increment the large integer by one and return <em>the resulting array of digits</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlusOne</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">plusOne</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Iterate from the least significant digit (rightmost) to the most significant (leftmost)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="c1">// If the current digit is less than 9, we can simply increment and return</span>
            <span class="c1">// This handles most cases where no carrying is needed</span>
            <span class="k">if</span><span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">){</span>
                <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>
                <span class="k">return</span> <span class="n">digits</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// If the current digit is 9, set it to 0 and continue to the next digit</span>
            <span class="c1">// This handles the carrying scenario</span>
            <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Special case: when all digits are 9 (e.g., [9,9,9])</span>
        <span class="c1">// We need to create a new array with an additional digit</span>
        <span class="c1">// The new array will have 1 at the most significant position</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">newDigits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="n">newDigits</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">newDigits</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Normal scenario - last digit less than 9</span>
        <span class="c1">// Input: [1,2,3] → Expected Output: [1,2,4]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1 - Input: [1,2,3], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Scenario with 9 at the end requiring carry</span>
        <span class="c1">// Input: [1,9,9] → Expected Output: [2,0,0]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2 - Input: [1,9,9], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: All 9s scenario - requires creating a new array</span>
        <span class="c1">// Input: [9,9,9] → Expected Output: [1,0,0,0]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3 - Input: [9,9,9], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result3</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">arrayToString</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s. Increment the large integer by one and return the resulting array of digits.]]></summary></entry><entry><title type="html">28. Find the Index of the First Occurrence in a String</title><link href="https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString/" rel="alternate" type="text/html" title="28. Find the Index of the First Occurrence in a String"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString/"><![CDATA[<ul> <li>Given two strings <code class="language-plaintext highlighter-rouge">needle</code> and <code class="language-plaintext highlighter-rouge">haystack</code>, return the index of the first occurrence of <code class="language-plaintext highlighter-rouge">needle</code> in <code class="language-plaintext highlighter-rouge">haystack</code>, or <code class="language-plaintext highlighter-rouge">-1</code> if <code class="language-plaintext highlighter-rouge">needle</code> is not part of <code class="language-plaintext highlighter-rouge">haystack</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindTheIndexOfTheFirstOccurrenceInAString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">strStr</span><span class="o">(</span><span class="nc">String</span> <span class="n">haystack</span><span class="o">,</span> <span class="nc">String</span> <span class="n">needle</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the lengths of the haystack and needle</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// Special case: if needle is empty, return 0</span>
        <span class="k">if</span><span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Iterate through possible starting positions in haystack</span>
        <span class="c1">// Stop at n - m to prevent index out of bounds</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>

            <span class="c1">// Index used to iterate through the characters of the needle (substring)</span>
            <span class="c1">// Helps track the current character position during the matching process</span>
            <span class="c1">// Resets to 0 for each new potential starting position in the haystack</span>
            <span class="kt">int</span> <span class="n">j</span><span class="o">;</span>

            <span class="c1">// Compare characters in the current window</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// If characters don't match, break the inner loop</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">haystack</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="n">needle</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// If all characters in the window match the needle</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Return the starting index of the match</span>
                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If no match is found after checking all possible positions</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Standard matching</span>
        <span class="nc">String</span> <span class="n">haystack1</span> <span class="o">=</span> <span class="s">"sadbutsad"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle1</span> <span class="o">=</span> <span class="s">"sad"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack1</span><span class="o">,</span> <span class="n">needle1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: No matching substring</span>
        <span class="nc">String</span> <span class="n">haystack2</span> <span class="o">=</span> <span class="s">"leetcode"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle2</span> <span class="o">=</span> <span class="s">"leeto"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack2</span><span class="o">,</span> <span class="n">needle2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Empty needle</span>
        <span class="nc">String</span> <span class="n">haystack3</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle3</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack3</span><span class="o">,</span> <span class="n">needle3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Multiple possible matches, return the first</span>
        <span class="nc">String</span> <span class="n">haystack4</span> <span class="o">=</span> <span class="s">"mississippi"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle4</span> <span class="o">=</span> <span class="s">"issip"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack4</span><span class="o">,</span> <span class="n">needle4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.]]></summary></entry><entry><title type="html">58. Length of Last Word</title><link href="https://zhengstar94.github.io//blog/2024/LengthOfLastWord/" rel="alternate" type="text/html" title="58. Length of Last Word"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/LengthOfLastWord</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/LengthOfLastWord/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code> consisting of words and spaces, return <em>the length of the <strong>last</strong> word in the string.</em></li> <li>A <strong>word</strong> is a maximal substring consisting of non-space characters only.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "   fly me   to   the moon  "
Output: 4
Explanation: The last word is "moon" with length 4.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "luffy is still joyboy"
Output: 6
Explanation: The last word is "joyboy" with length 6.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LengthOfLastWord</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">lengthOfLastWord</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">' '</span><span class="o">){</span>
                <span class="n">length</span><span class="o">++;</span>
            <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">length</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Normal string with single space</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"Hello World"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: \""</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: String with trailing spaces</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"   fly me   to   the moon  "</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest 2: \""</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Single word</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"luffy"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest 3: \""</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>

        <span class="c1">// Test case 4: Empty string</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest 4: \""</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.]]></summary></entry><entry><title type="html">13. Roman to Integer</title><link href="https://zhengstar94.github.io//blog/2024/RomanToInteger/" rel="alternate" type="text/html" title="13. Roman to Integer"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/RomanToInteger</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/RomanToInteger/"><![CDATA[<ul> <li> <p>Roman numerals are represented by seven different symbols: <code class="language-plaintext highlighter-rouge">I</code>, <code class="language-plaintext highlighter-rouge">V</code>, <code class="language-plaintext highlighter-rouge">X</code>, <code class="language-plaintext highlighter-rouge">L</code>, <code class="language-plaintext highlighter-rouge">C</code>, <code class="language-plaintext highlighter-rouge">D</code> and <code class="language-plaintext highlighter-rouge">M</code>.</p> <blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
</code></pre></div> </div> </blockquote> </li> <li> <p>For example, <code class="language-plaintext highlighter-rouge">2</code> is written as <code class="language-plaintext highlighter-rouge">II</code> in Roman numeral, just two ones added together. <code class="language-plaintext highlighter-rouge">12</code> is written as <code class="language-plaintext highlighter-rouge">XII</code>, which is simply <code class="language-plaintext highlighter-rouge">X + II</code>. The number <code class="language-plaintext highlighter-rouge">27</code> is written as <code class="language-plaintext highlighter-rouge">XXVII</code>, which is <code class="language-plaintext highlighter-rouge">XX + V + II</code>.</p> </li> <li> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code class="language-plaintext highlighter-rouge">IIII</code>. Instead, the number four is written as <code class="language-plaintext highlighter-rouge">IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code class="language-plaintext highlighter-rouge">IX</code>. There are six instances where subtraction is used:</p> <ul> <li><code class="language-plaintext highlighter-rouge">I</code> can be placed before <code class="language-plaintext highlighter-rouge">V</code> (5) and <code class="language-plaintext highlighter-rouge">X</code> (10) to make 4 and 9.</li> <li><code class="language-plaintext highlighter-rouge">X</code> can be placed before <code class="language-plaintext highlighter-rouge">L</code> (50) and <code class="language-plaintext highlighter-rouge">C</code> (100) to make 40 and 90.</li> <li><code class="language-plaintext highlighter-rouge">C</code> can be placed before <code class="language-plaintext highlighter-rouge">D</code> (500) and <code class="language-plaintext highlighter-rouge">M</code> (1000) to make 400 and 900.</li> </ul> </li> <li> <p>Given a roman numeral, convert it to an integer.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "III"
Output: 3
Explanation: III = 3.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RomanToInteger</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">romanToInt</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create a hash map to store Roman numeral character values</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">romanValues</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">()</span> <span class="o">;</span>

        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate through the Roman numeral string from left to right</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Get the integer value of the current Roman numeral character</span>
            <span class="kt">int</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="n">romanValues</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>

            <span class="c1">// Determine how to add or subtract the current value</span>
            <span class="c1">// There are two scenarios:</span>
            <span class="c1">// 1. This is the last character in the string</span>
            <span class="c1">// 2. The current character's value is greater than or equal to the next character's value</span>
            <span class="c1">// If either of these conditions is true, we add the current value</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">currentValue</span> <span class="o">&gt;=</span> <span class="n">romanValues</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)))</span> <span class="o">{</span>
                <span class="c1">// Normal case: add the current value</span>
                <span class="c1">// This handles most Roman numerals like III (3), VI (6), etc.</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="n">currentValue</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Special case: subtract the current value</span>
                <span class="c1">// This handles exceptions like IV (4), IX (9), XC (90), etc.</span>
                <span class="c1">// When a smaller value appears before a larger value, we subtract</span>
                <span class="n">result</span> <span class="o">-=</span> <span class="n">currentValue</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test cases to demonstrate various Roman numeral conversions</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">testCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"III"</span><span class="o">,</span>       <span class="c1">// Standard case: 3</span>
                <span class="s">"IV"</span><span class="o">,</span>        <span class="c1">// Subtraction case: 4</span>
                <span class="s">"IX"</span><span class="o">,</span>        <span class="c1">// Another subtraction case: 9</span>
                <span class="s">"LVIII"</span><span class="o">,</span>     <span class="c1">// Mixed case: 58</span>
                <span class="s">"MCMXCIV"</span>    <span class="c1">// Complex case: 1994</span>
        <span class="o">};</span>

        <span class="c1">// Iterate through test cases and print results</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">romanToInt</span><span class="o">(</span><span class="n">testCase</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Roman Numeral: "</span> <span class="o">+</span> <span class="n">testCase</span> <span class="o">+</span>
                    <span class="s">" | Integer Value: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Easy"/><summary type="html"><![CDATA[Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.]]></summary></entry><entry><title type="html">999. Available Captures for Rook</title><link href="https://zhengstar94.github.io//blog/2024/AvailableCapturesForRook/" rel="alternate" type="text/html" title="999. Available Captures for Rook"/><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/AvailableCapturesForRook</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/AvailableCapturesForRook/"><![CDATA[<ul> <li>You are given an <code class="language-plaintext highlighter-rouge">8 x 8</code> <strong>matrix</strong> representing a chessboard. There is <strong>exactly one</strong> white rook represented by <code class="language-plaintext highlighter-rouge">'R'</code>, some number of white bishops <code class="language-plaintext highlighter-rouge">'B'</code>, and some number of black pawns <code class="language-plaintext highlighter-rouge">'p'</code>. Empty squares are represented by <code class="language-plaintext highlighter-rouge">'.'</code>.</li> <li>A rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece <em>or</em> the edge of the board. A rook is <strong>attacking</strong> a pawn if it can move to the pawn’s square in one move.</li> <li>Note: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path.</li> <li>Return the <strong>number of pawns</strong> the white rook is <strong>attacking</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [ [ ".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","." ] ]

Output: 3

Explanation:

In this example, the rook is attacking all the pawns.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [ [ ".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","." ] ]

Output: 0

Explanation:

The bishops are blocking the rook from attacking any of the pawns.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [ [ ".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","." ] ]

Output: 3

Explanation:

The rook is attacking the pawns at positions b5, d6, and f5.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AvailableCapturesForRook</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">numRookCaptures</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">captures</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Counter for captured pawns</span>
    <span class="kt">int</span> <span class="n">rookRow</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">rookCol</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// Initial rook position coordinates</span>

    <span class="c1">// Find the rook's position on the chessboard</span>
    <span class="c1">// Nested loops iterate through each square to locate the rook</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'R'</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// When rook is found, store its row and column coordinates</span>
          <span class="n">rookRow</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
          <span class="n">rookCol</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
          <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
      <span class="o">}</span>
      <span class="c1">// If the rook's row has been found (rookRow is no longer -1), </span>
      <span class="c1">// immediately exit the outer loop to optimize the search process. </span>
      <span class="c1">// This prevents unnecessary iterations through the remaining rows </span>
      <span class="c1">// after the rook's position has already been located, </span>
      <span class="c1">// improving the time efficiency of finding the rook on the chessboard.</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">rookRow</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
        <span class="k">break</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Check capture possibilities in four directions from rook's position</span>

    <span class="c1">// Upward direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rookRow</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Downward direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rookRow</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Left direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">rookCol</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Right direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">rookCol</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">){</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">captures</span><span class="o">;</span> <span class="c1">// Return total number of captured pawns</span>
  <span class="o">}</span>


  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Test Case 1: Pawns available in multiple directions</span>
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board1</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'R'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">numRookCaptures</span><span class="o">(</span><span class="n">board1</span><span class="o">));</span>

    <span class="c1">// Test Case 2: Bishops blocking all pawns</span>
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board2</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'B'</span><span class="o">,</span><span class="sc">'R'</span><span class="o">,</span><span class="sc">'B'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">numRookCaptures</span><span class="o">(</span><span class="n">board2</span><span class="o">));</span>

    <span class="c1">// Test Case 3: Pawns available in some directions</span>
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board3</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'B'</span><span class="o">,</span><span class="sc">'R'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">numRookCaptures</span><span class="o">(</span><span class="n">board3</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given an 8 x 8 matrix representing a chessboard. There is exactly one white rook represented by 'R', some number of white bishops 'B', and some number of black pawns 'p'. Empty squares are represented by '.'. A rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece or the edge of the board. A rook is attacking a pawn if it can move to the pawn’s square in one move. Note: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path. Return the number of pawns the white rook is attacking.]]></summary></entry><entry><title type="html">498. Diagonal Traverse</title><link href="https://zhengstar94.github.io//blog/2024/DiagonalTraverse/" rel="alternate" type="text/html" title="498. Diagonal Traverse"/><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/DiagonalTraverse</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/DiagonalTraverse/"><![CDATA[<ul> <li>Given an <code class="language-plaintext highlighter-rouge">m x n</code> matrix <code class="language-plaintext highlighter-rouge">mat</code>, return <em>an array of all the elements of the array in a diagonal order</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: mat = [ [1,2,3],[4,5,6],[7,8,9] ]
Output: [1,2,4,7,5,3,6,8,9]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: mat = [ [ 1,2],[3,4 ] ]
Output: [1,2,3,4]

</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m * n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DiagonalTraverse</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findDiagonalOrder</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">mat</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Number of rows in the matrix</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">mat</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Number of columns in the matrix</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">mat</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Result array to store diagonal traversal</span>
        <span class="c1">// Size is total number of elements in the matrix</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span> <span class="o">*</span> <span class="n">n</span><span class="o">];</span>

        <span class="c1">// Index to track current position in the result array</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Total number of diagonals is (m + n - 1)</span>
        <span class="c1">// We iterate through each diagonal</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">+</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Even-indexed diagonals: Bottom-left to Top-right direction</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Determine the starting point for the current diagonal</span>

                <span class="c1">// Row starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of rows,</span>
                <span class="c1">// start from that row index</span>
                <span class="c1">// Otherwise, start from the last row</span>
                <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">?</span> <span class="n">i</span> <span class="o">:</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Column starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of rows,</span>
                <span class="c1">// start from first column (0)</span>
                <span class="c1">// Otherwise, calculate the starting column based on diagonal index</span>
                <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">i</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Traverse the diagonal while within matrix bounds</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Add current matrix element to result</span>
                    <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">mat</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">];</span>

                    <span class="c1">// Move upwards in the matrix</span>
                    <span class="n">x</span><span class="o">--;</span>

                    <span class="c1">// Move to the right in the matrix</span>
                    <span class="n">y</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c1">// Odd-indexed diagonals: Top-right to Bottom-left direction</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Determine the starting point for the current diagonal</span>

                <span class="c1">// Row starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of columns,</span>
                <span class="c1">// start from first row</span>
                <span class="c1">// Otherwise, calculate the starting row based on diagonal index</span>
                <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">i</span> <span class="o">-</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Column starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of columns,</span>
                <span class="c1">// start from that column index</span>
                <span class="c1">// Otherwise, start from the last column</span>
                <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">?</span> <span class="n">i</span> <span class="o">:</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Traverse the diagonal while within matrix bounds</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Add current matrix element to result</span>
                    <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">mat</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">];</span>

                    <span class="c1">// Move downwards in the matrix</span>
                    <span class="n">x</span><span class="o">++;</span>

                    <span class="c1">// Move to the left in the matrix</span>
                    <span class="n">y</span><span class="o">--;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the array with diagonal traversal order</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Utility method to print an array
     *
     * @param arr Input array to be printed
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Iterate through each element and print with space</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// Print a new line after array elements</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Main method to demonstrate diagonal traversal with different matrix types
     *
     * @param args Command line arguments (not used)
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: 3x3 Square Matrix</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat1</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3x3 Matrix Traversal Result:"</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">findDiagonalOrder</span><span class="o">(</span><span class="n">mat1</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">result1</span><span class="o">);</span>

        <span class="c1">// Test Case 2: 4x4 Square Matrix</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat2</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span>  <span class="mi">2</span><span class="o">,</span>  <span class="mi">3</span><span class="o">,</span>  <span class="mi">4</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">5</span><span class="o">,</span>  <span class="mi">6</span><span class="o">,</span>  <span class="mi">7</span><span class="o">,</span>  <span class="mi">8</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">12</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">13</span><span class="o">,</span> <span class="mi">14</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">16</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"4x4 Matrix Traversal Result:"</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">findDiagonalOrder</span><span class="o">(</span><span class="n">mat2</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">result2</span><span class="o">);</span>

        <span class="c1">// Test Case 3: Rectangular Matrix</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat3</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">12</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3x4 Matrix Traversal Result:"</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">findDiagonalOrder</span><span class="o">(</span><span class="n">mat3</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">result3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.]]></summary></entry><entry><title type="html">434. Number of Segments in a String</title><link href="https://zhengstar94.github.io//blog/2024/NumberOfSegmentsInAString/" rel="alternate" type="text/html" title="434. Number of Segments in a String"/><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/NumberOfSegmentsInAString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/NumberOfSegmentsInAString/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code>, return <em>the number of segments in the string</em>.</li> <li>A <strong>segment</strong> is defined to be a contiguous sequence of <strong>non-space characters</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "Hello, my name is John"
Output: 5
Explanation: The five segments are ["Hello,", "my", "name", "is", "John"]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "Hello"
Output: 1
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberOfSegmentsInAString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countSegments</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Initialize the segment counter.</span>

        <span class="c1">// Loop through the characters in the string.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="cm">/**
             * Key condition:
             * 1. Check if the current character is NOT a space: s.charAt(i) != ' '
             *    - Ensures we are only processing non-space characters.
             * 2. Check if it's the start of a new segment:
             *    - It's the first character in the string (i == 0), OR
             *    - The previous character is a space (s.charAt(i - 1) == ' ').
             *    - This ensures that we only count the beginning of a new word.
             */</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">' '</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">' '</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">sum</span><span class="o">++;</span> <span class="c1">// Increment the segment counter for a new word.</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span> <span class="c1">// Return the total number of segments found.</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"Hello world"</span><span class="o">;</span> <span class="c1">// Two words.</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"   Leading spaces"</span><span class="o">;</span> <span class="c1">// Two words with leading spaces.</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"Trailing spaces   "</span><span class="o">;</span> <span class="c1">// Two words with trailing spaces.</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"  Multiple   spaces  between words  "</span><span class="o">;</span> <span class="c1">// Four words with multiple spaces.</span>
        <span class="nc">String</span> <span class="n">test5</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span> <span class="c1">// Empty string, should return 0.</span>
        <span class="nc">String</span> <span class="n">test6</span> <span class="o">=</span> <span class="s">"      "</span><span class="o">;</span> <span class="c1">// String with only spaces, should return 0.</span>
        <span class="nc">String</span> <span class="n">test7</span> <span class="o">=</span> <span class="s">"OneWord"</span><span class="o">;</span> <span class="c1">// Single word, should return 1.</span>

        <span class="c1">// Print results for each test case.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test1: "</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span> <span class="c1">// Output: 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test2: "</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span> <span class="c1">// Output: 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test3: "</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span> <span class="c1">// Output: 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test4: "</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span> <span class="c1">// Output: 4</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test5: "</span> <span class="o">+</span> <span class="n">test5</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test5</span><span class="o">));</span> <span class="c1">// Output: 0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test6: "</span> <span class="o">+</span> <span class="n">test6</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test6</span><span class="o">));</span> <span class="c1">// Output: 0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test7: "</span> <span class="o">+</span> <span class="n">test7</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test7</span><span class="o">));</span> <span class="c1">// Output: 1</span>
    <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[Given a string s, return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space characters.]]></summary></entry><entry><title type="html">9. Palindrome Number</title><link href="https://zhengstar94.github.io//blog/2024/PalindromeNumber/" rel="alternate" type="text/html" title="9. Palindrome Number"/><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/PalindromeNumber</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/PalindromeNumber/"><![CDATA[<ul> <li>Given an integer <code class="language-plaintext highlighter-rouge">x</code>, return <code class="language-plaintext highlighter-rouge">true</code> <em>if</em> <code class="language-plaintext highlighter-rouge">x</code> <em>is a</em> <strong><em>palindrome</em></strong><em>, and</em> <code class="language-plaintext highlighter-rouge">false</code> <em>otherwise</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(log(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PalindromeNumber</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Negative numbers are not palindromes (e.g., -121).</span>
        <span class="c1">// Numbers ending in 0 are not palindromes unless the number is 0 itself.</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">reversedHalf</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Stores the reversed second half of the number.</span>

        <span class="c1">// Reverses digits until half of the number is processed.</span>
        <span class="c1">// The loop continues as long as the original number is greater than the reversed half.</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">reversedHalf</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Extract the last digit of x and add it to reversedHalf.</span>
            <span class="n">reversedHalf</span> <span class="o">=</span> <span class="n">reversedHalf</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">10</span><span class="o">;</span>
            <span class="c1">// Remove the last digit from x.</span>
            <span class="n">x</span> <span class="o">/=</span> <span class="mi">10</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Compare the two halves of the number:</span>
        <span class="c1">// - If the number of digits is even, both halves should be equal (x == reversedHalf).</span>
        <span class="c1">// - If the number of digits is odd, the middle digit can be ignored by dividing reversedHalf by 10.</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">==</span> <span class="n">reversedHalf</span> <span class="o">||</span> <span class="n">x</span> <span class="o">==</span> <span class="n">reversedHalf</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases to validate the solution</span>
        <span class="kt">int</span> <span class="n">test1</span> <span class="o">=</span> <span class="mi">121</span><span class="o">;</span>        <span class="c1">// Palindrome</span>
        <span class="kt">int</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">-</span><span class="mi">121</span><span class="o">;</span>       <span class="c1">// Negative number, not a palindrome</span>
        <span class="kt">int</span> <span class="n">test3</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>         <span class="c1">// Ends in 0, not a palindrome</span>
        <span class="kt">int</span> <span class="n">test4</span> <span class="o">=</span> <span class="mi">12321</span><span class="o">;</span>      <span class="c1">// Odd-length palindrome</span>
        <span class="kt">int</span> <span class="n">test5</span> <span class="o">=</span> <span class="mi">123321</span><span class="o">;</span>     <span class="c1">// Even-length palindrome</span>
        <span class="kt">int</span> <span class="n">test6</span> <span class="o">=</span> <span class="mi">12345</span><span class="o">;</span>      <span class="c1">// Not a palindrome</span>
        <span class="kt">int</span> <span class="n">test7</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>          <span class="c1">// Palindrome, single digit</span>
        <span class="kt">int</span> <span class="n">test8</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>          <span class="c1">// Palindrome, single digit</span>

        <span class="c1">// Print test results</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test1</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span> <span class="c1">// true</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test2</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span> <span class="c1">// false</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test3</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span> <span class="c1">// false</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test4</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span> <span class="c1">// true</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test5</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test5</span><span class="o">));</span> <span class="c1">// true</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test6</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test6</span><span class="o">));</span> <span class="c1">// false</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test7</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test7</span><span class="o">));</span> <span class="c1">// true</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test8</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">isPalindrome</span><span class="o">(</span><span class="n">test8</span><span class="o">));</span> <span class="c1">// true</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><category term="Easy"/><summary type="html"><![CDATA[Given an integer x, return true if x is a palindrome, and false otherwise.]]></summary></entry><entry><title type="html">2022. Convert 1D Array Into 2D Array</title><link href="https://zhengstar94.github.io//blog/2024/Convert1DArrayInto2DArray/" rel="alternate" type="text/html" title="2022. Convert 1D Array Into 2D Array"/><published>2024-12-05T00:00:00+00:00</published><updated>2024-12-05T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/Convert1DArrayInto2DArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/Convert1DArrayInto2DArray/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> 1-dimensional (1D) integer array <code class="language-plaintext highlighter-rouge">original</code>, and two integers, <code class="language-plaintext highlighter-rouge">m</code> and <code class="language-plaintext highlighter-rouge">n</code>. You are tasked with creating a 2-dimensional (2D) array with ` m<code class="language-plaintext highlighter-rouge"> rows and </code>n<code class="language-plaintext highlighter-rouge"> columns using **all** the elements from </code>original`.</li> <li>The elements from indices <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">n - 1</code> (<strong>inclusive</strong>) of <code class="language-plaintext highlighter-rouge">original</code> should form the first row of the constructed 2D array, the elements from indices <code class="language-plaintext highlighter-rouge">n</code> to <code class="language-plaintext highlighter-rouge">2 * n - 1</code> (<strong>inclusive</strong>) should form the second row of the constructed 2D array, and so on.</li> <li>Return <em>an</em> <code class="language-plaintext highlighter-rouge">m x n</code> <em>2D array constructed according to the above procedure, or an empty 2D array if it is impossible</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: original = [1,2,3,4], m = 2, n = 2
Output: [[1,2],[3,4]]
Explanation: The constructed 2D array should contain 2 rows and 2 columns.
The first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.
The second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: original = [1,2,3], m = 1, n = 3
Output: [[1,2,3]]
Explanation: The constructed 2D array should contain 1 row and 3 columns.
Put all three elements in original into the first row of the constructed 2D array.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: original = [1,2], m = 1, n = 1
Output: []
Explanation: There are 2 elements in original.
It is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m * n) time | O(m * n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/05
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Convert1DArrayInto2DArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="nf">construct2DArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">original</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Check if the size of the original array matches the required dimensions.</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">original</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="n">m</span> <span class="o">*</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// Return an empty 2D array if the dimensions do not match.</span>
        <span class="o">}</span>

        <span class="c1">// Initialize a 2D array with m rows and n columns.</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>

        <span class="c1">// Fill the 2D array using elements from the original 1D array.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// Loop through each row.</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// Loop through each column.</span>
                <span class="c1">// Map the 1D array index to the 2D array:</span>
                <span class="c1">// - i * n calculates the starting index for the current row in the 1D array.</span>
                <span class="c1">// - j adds the column offset within the current row.</span>
                <span class="c1">// Example: For i = 1 (2nd row) and n = 3 (3 columns), the row starts at index 3 in the 1D array.</span>
                <span class="c1">// Adding j = 0, 1, 2 fills the 2nd row of the 2D array.</span>
                <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">original</span><span class="o">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="n">j</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span> <span class="c1">// Return the constructed 2D array.</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Valid input with 2 rows and 3 columns.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">original1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="n">print2DArray</span><span class="o">(</span><span class="n">construct2DArray</span><span class="o">(</span><span class="n">original1</span><span class="o">,</span> <span class="n">m1</span><span class="o">,</span> <span class="n">n1</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Invalid input where the size does not match m * n.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">original2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="n">print2DArray</span><span class="o">(</span><span class="n">construct2DArray</span><span class="o">(</span><span class="n">original2</span><span class="o">,</span> <span class="n">m2</span><span class="o">,</span> <span class="n">n2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: Edge case with 1 row and 4 columns.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">original3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="n">print2DArray</span><span class="o">(</span><span class="n">construct2DArray</span><span class="o">(</span><span class="n">original3</span><span class="o">,</span> <span class="n">m3</span><span class="o">,</span> <span class="n">n3</span><span class="o">));</span>

        <span class="c1">// Test Case 4: Edge case with 4 rows and 1 column.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">original4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">m4</span> <span class="o">=</span> <span class="mi">4</span><span class="o">,</span> <span class="n">n4</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4:"</span><span class="o">);</span>
        <span class="n">print2DArray</span><span class="o">(</span><span class="n">construct2DArray</span><span class="o">(</span><span class="n">original4</span><span class="o">,</span> <span class="n">m4</span><span class="o">,</span> <span class="n">n4</span><span class="o">));</span>

        <span class="c1">// Test Case 5: Empty input.</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">original5</span> <span class="o">=</span> <span class="o">{};</span>
        <span class="kt">int</span> <span class="n">m5</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n5</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 5:"</span><span class="o">);</span>
        <span class="n">print2DArray</span><span class="o">(</span><span class="n">construct2DArray</span><span class="o">(</span><span class="n">original5</span><span class="o">,</span> <span class="n">m5</span><span class="o">,</span> <span class="n">n5</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print2DArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Check if the array is empty.</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[]"</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">row</span> <span class="o">:</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Iterate through each row and print it.</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">row</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with ` m rows and n columns using **all** the elements from original`. The elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on. Return an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.]]></summary></entry><entry><title type="html">3001. Minimum Moves to Capture The Queen</title><link href="https://zhengstar94.github.io//blog/2024/MinimumMovesToCaptureTheQueen/" rel="alternate" type="text/html" title="3001. Minimum Moves to Capture The Queen"/><published>2024-12-05T00:00:00+00:00</published><updated>2024-12-05T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MinimumMovesToCaptureTheQueen</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MinimumMovesToCaptureTheQueen/"><![CDATA[<ul> <li>There is a <strong>1-indexed</strong> <code class="language-plaintext highlighter-rouge">8 x 8</code> chessboard containing <code class="language-plaintext highlighter-rouge">3</code> pieces.</li> <li>You are given <code class="language-plaintext highlighter-rouge">6</code> integers <code class="language-plaintext highlighter-rouge">a</code>, <code class="language-plaintext highlighter-rouge">b</code>, <code class="language-plaintext highlighter-rouge">c</code>, <code class="language-plaintext highlighter-rouge">d</code>, <code class="language-plaintext highlighter-rouge">e</code>, and <code class="language-plaintext highlighter-rouge">f</code> where: <ul> <li><code class="language-plaintext highlighter-rouge">(a, b)</code> denotes the position of the white rook.</li> <li><code class="language-plaintext highlighter-rouge">(c, d)</code> denotes the position of the white bishop.</li> <li><code class="language-plaintext highlighter-rouge">(e, f)</code> denotes the position of the black queen.</li> </ul> </li> <li>Given that you can only move the white pieces, return <em>the <strong>minimum</strong> number of moves required to capture the black queen</em>.</li> <li><strong>Note</strong> that: <ul> <li>Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces.</li> <li>Bishops can move any number of squares diagonally, but cannot jump over other pieces.</li> <li>A rook or a bishop can capture the queen if it is located in a square that they can move to.</li> <li>The queen does not move.</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: a = 1, b = 1, c = 8, d = 8, e = 2, f = 3
Output: 2
Explanation: We can capture the black queen in two moves by moving the white rook to (1, 3) then to (2, 3).
It is impossible to capture the black queen in less than two moves since it is not being attacked by any of the pieces at the beginning.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: a = 5, b = 3, c = 3, d = 4, e = 5, f = 2
Output: 1
Explanation: We can capture the black queen in a single move by doing one of the following: 
- Move the white rook to (5, 2).
- Move the white bishop to (5, 2).
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/05
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumMovesToCaptureTheQueen</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minMovesToCaptureTheQueen</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">,</span> <span class="kt">int</span> <span class="n">d</span><span class="o">,</span> <span class="kt">int</span> <span class="n">e</span><span class="o">,</span> <span class="kt">int</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span>
            <span class="c1">// Rook is in the same column as the queen</span>
                <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">e</span> <span class="o">&amp;&amp;</span>
                        <span class="c1">// Two possible scenarios:</span>
                        <span class="c1">// 1. Rook and bishop are not in the same column, or</span>
                        <span class="c1">// 2. Bishop is positioned in a way that doesn't block the capture path</span>
                        <span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">c</span> <span class="o">||</span> <span class="o">(</span><span class="n">d</span> <span class="o">-</span> <span class="n">b</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">d</span> <span class="o">-</span> <span class="n">f</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
                <span class="o">)</span> <span class="o">||</span>
                        <span class="c1">// Alternative scenario: rook is in the same row as the queen</span>
                        <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="n">f</span> <span class="o">&amp;&amp;</span>
                                <span class="c1">// Two possible scenarios:</span>
                                <span class="c1">// 1. Rook and bishop are not in the same row, or</span>
                                <span class="c1">// 2. Bishop is positioned in a way that doesn't block the capture path</span>
                                <span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="n">d</span> <span class="o">||</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="n">a</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="n">e</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
                        <span class="o">)</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If any of the above conditions are true, the queen can be captured in one move</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Second condition: checking if the bishop can capture the queen in one move</span>
        <span class="k">if</span><span class="o">(</span>
            <span class="c1">// Bishop and queen are on the same diagonal</span>
                <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="n">e</span><span class="o">)</span> <span class="o">==</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">d</span> <span class="o">-</span> <span class="n">f</span><span class="o">))</span> <span class="o">&amp;&amp;</span>
                        <span class="o">(</span>
                                <span class="c1">// Two additional conditions to ensure the rook doesn't block the capture:</span>
                                <span class="c1">// 1. Rook is not on the same diagonal line, or</span>
                                <span class="c1">// 2. Rook is completely outside the diagonal line between bishop and queen</span>
                                <span class="o">((</span><span class="n">c</span> <span class="o">-</span> <span class="n">e</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">b</span> <span class="o">-</span> <span class="n">f</span><span class="o">)</span> <span class="o">!=</span> <span class="o">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">e</span><span class="o">)</span> <span class="o">*</span> <span class="o">(</span><span class="n">d</span> <span class="o">-</span> <span class="n">f</span><span class="o">))</span> <span class="o">||</span>
                                        <span class="n">a</span> <span class="o">&lt;</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="o">||</span>
                                        <span class="n">a</span> <span class="o">&gt;</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span>
                        <span class="o">)</span>
        <span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If the conditions are true, the queen can be captured in one move</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="mi">2</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Rook is in the same column as the queen</span>
        <span class="c1">// Rook at (1,1), Bishop at (2,2), Queen at (1,3)</span>
        <span class="c1">// Verifies if the rook can capture the queen in 1 move, avoiding the bishop</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: "</span> <span class="o">+</span> <span class="n">minMovesToCaptureTheQueen</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="o">+</span> <span class="s">" moves"</span><span class="o">);</span>

        <span class="c1">// Test Case 2: Rook is in the same row as the queen</span>
        <span class="c1">// Rook at (1,1), Bishop at (2,2), Queen at (3,1)</span>
        <span class="c1">// Checks if the rook can capture the queen in 1 move, with no bishop interference</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2: "</span> <span class="o">+</span> <span class="n">minMovesToCaptureTheQueen</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">" moves"</span><span class="o">);</span>

        <span class="c1">// Test Case 3: Rook and bishop are on the diagonal with the queen</span>
        <span class="c1">// Rook at (2,2), Bishop at (1,1), Queen at (3,3)</span>
        <span class="c1">// Demonstrates a scenario requiring 2 moves to capture the queen</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3: "</span> <span class="o">+</span> <span class="n">minMovesToCaptureTheQueen</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span> <span class="o">+</span> <span class="s">" moves"</span><span class="o">);</span>

        <span class="c1">// Test Case 4: Bishop is on the diagonal, rook can capture from outside</span>
        <span class="c1">// Rook at (1,1), Bishop at (3,3), Queen at (5,5)</span>
        <span class="c1">// Shows a scenario where the rook can capture in 1 move</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 4: "</span> <span class="o">+</span> <span class="n">minMovesToCaptureTheQueen</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span> <span class="o">+</span> <span class="s">" moves"</span><span class="o">);</span>

        <span class="c1">// Test Case 5: Another scenario with diagonal positioning</span>
        <span class="c1">// Rook at (4,2), Bishop at (6,4), Queen at (7,5)</span>
        <span class="c1">// Demonstrates another case of 1-move capture</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 5: "</span> <span class="o">+</span> <span class="n">minMovesToCaptureTheQueen</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span> <span class="o">+</span> <span class="s">" moves"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Medium"/><summary type="html"><![CDATA[There is a 1-indexed 8 x 8 chessboard containing 3 pieces. You are given 6 integers a, b, c, d, e, and f where: (a, b) denotes the position of the white rook. (c, d) denotes the position of the white bishop. (e, f) denotes the position of the black queen. Given that you can only move the white pieces, return the minimum number of moves required to capture the black queen. Note that: Rooks can move any number of squares either vertically or horizontally, but cannot jump over other pieces. Bishops can move any number of squares diagonally, but cannot jump over other pieces. A rook or a bishop can capture the queen if it is located in a square that they can move to. The queen does not move.]]></summary></entry></feed>