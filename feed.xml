<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-13T02:59:48+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">3264. Final Array State After K Multiplication Operations I</title><link href="https://zhengstar94.github.io//blog/2024/FinalArrayStateAfterKMultiplicationOperationsI/" rel="alternate" type="text/html" title="3264. Final Array State After K Multiplication Operations I"/><published>2024-12-13T00:00:00+00:00</published><updated>2024-12-13T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FinalArrayStateAfterKMultiplicationOperationsI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FinalArrayStateAfterKMultiplicationOperationsI/"><![CDATA[<ul> <li> <p>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, an integer <code class="language-plaintext highlighter-rouge">k</code>, and an integer <code class="language-plaintext highlighter-rouge">multiplier</code>.</p> <p>You need to perform <code class="language-plaintext highlighter-rouge">k</code> operations on <code class="language-plaintext highlighter-rouge">nums</code>. In each operation:</p> <ul> <li>Find the <strong>minimum</strong> value <code class="language-plaintext highlighter-rouge">x</code> in <code class="language-plaintext highlighter-rouge">nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong>.</li> <li>Replace the selected minimum value <code class="language-plaintext highlighter-rouge">x</code> with <code class="language-plaintext highlighter-rouge">x * multiplier</code>.</li> </ul> </li> <li> <p>Return an integer array denoting the <em>final state</em> of <code class="language-plaintext highlighter-rouge">nums</code> after performing all <code class="language-plaintext highlighter-rouge">k</code> operations.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,3,5,6], k = 5, multiplier = 2

Output: [8,4,6,5,6]

Explanation:

Operation	Result
After operation 1	[2, 2, 3, 5, 6]
After operation 2	[4, 2, 3, 5, 6]
After operation 3	[4, 4, 3, 5, 6]
After operation 4	[4, 4, 6, 5, 6]
After operation 5	[8, 4, 6, 5, 6]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2], k = 3, multiplier = 4

Output: [16,8]

Explanation:

Operation	Result
After operation 1	[4, 2]
After operation 2	[4, 8]
After operation 3	[16, 8]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * k) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/13
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinalArrayStateAfterKMultiplicationOperationsI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getFinalState</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">multiplier</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Perform k multiplication operations</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Initialize minimum value to maximum integer</span>
            <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>

            <span class="c1">// Initialize index of minimum value</span>
            <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

            <span class="c1">// Find the minimum value and its index in the array</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// Update minimum value and its index if a smaller value is found</span>
                <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">){</span>
                    <span class="n">minIndex</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                    <span class="n">min</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// Multiply the minimum value by the multiplier</span>
            <span class="n">nums</span><span class="o">[</span><span class="n">minIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">*</span> <span class="n">multiplier</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">nums</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">multiplier1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">getFinalState</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">k1</span><span class="o">,</span> <span class="n">multiplier1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">multiplier2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">getFinalState</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">k2</span><span class="o">,</span> <span class="n">multiplier2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given an integer array nums, an integer k, and an integer multiplier.]]></summary></entry><entry><title type="html">2931. Maximum Spending After Buying Items</title><link href="https://zhengstar94.github.io//blog/2024/MaximumSpendingAfterBuyingItems/" rel="alternate" type="text/html" title="2931. Maximum Spending After Buying Items"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MaximumSpendingAfterBuyingItems</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MaximumSpendingAfterBuyingItems/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> <code class="language-plaintext highlighter-rouge">m * n</code> integer matrix <code class="language-plaintext highlighter-rouge">values</code>, representing the values of <code class="language-plaintext highlighter-rouge">m * n</code> different items in <code class="language-plaintext highlighter-rouge">m</code> different shops. Each shop has <code class="language-plaintext highlighter-rouge">n</code> items where the <code class="language-plaintext highlighter-rouge">jth</code> item in the <code class="language-plaintext highlighter-rouge">ith</code> shop has a value of <code class="language-plaintext highlighter-rouge">values[i][j]</code>. Additionally, the items in the <code class="language-plaintext highlighter-rouge">ith</code> shop are sorted in non-increasing order of value. That is, <code class="language-plaintext highlighter-rouge">values[i][j] &gt;= values[i][j + 1]</code> for all <code class="language-plaintext highlighter-rouge">0 &lt;= j &lt; n - 1</code>.</li> <li>On each day, you would like to buy a single item from one of the shops. Specifically, On the <code class="language-plaintext highlighter-rouge">dth</code> day you can: <ul> <li>Pick any shop <code class="language-plaintext highlighter-rouge">i</code>.</li> <li>Buy the rightmost available item <code class="language-plaintext highlighter-rouge">j</code> for the price of <code class="language-plaintext highlighter-rouge">values[i][j] * d</code>. That is, find the greatest index <code class="language-plaintext highlighter-rouge">j</code> such that item <code class="language-plaintext highlighter-rouge">j</code> was never bought before, and buy it for the price of <code class="language-plaintext highlighter-rouge">values[i][j] * d</code>.</li> </ul> </li> <li><strong>Note</strong> that all items are pairwise different. For example, if you have bought item <code class="language-plaintext highlighter-rouge">0</code> from shop <code class="language-plaintext highlighter-rouge">1</code>, you can still buy item <code class="language-plaintext highlighter-rouge">0</code> from any other shop.</li> <li>Return <em>the <strong>maximum amount of money that can be spent</strong> on buying all</em> <code class="language-plaintext highlighter-rouge">m * n</code> <em>products</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: values = [ [ 8,5,2],[6,4,1],[9,7,3 ] ]
Output: 285
Explanation: On the first day, we buy product 2 from shop 1 for a price of values[1][2] * 1 = 1.
On the second day, we buy product 2 from shop 0 for a price of values[0][2] * 2 = 4.
On the third day, we buy product 2 from shop 2 for a price of values[2][2] * 3 = 9.
On the fourth day, we buy product 1 from shop 1 for a price of values[1][1] * 4 = 16.
On the fifth day, we buy product 1 from shop 0 for a price of values[0][1] * 5 = 25.
On the sixth day, we buy product 0 from shop 1 for a price of values[1][0] * 6 = 36.
On the seventh day, we buy product 1 from shop 2 for a price of values[2][1] * 7 = 49.
On the eighth day, we buy product 0 from shop 0 for a price of values[0][0] * 8 = 64.
On the ninth day, we buy product 0 from shop 2 for a price of values[2][0] * 9 = 81.
Hence, our total spending is equal to 285.
It can be shown that 285 is the maximum amount of money that can be spent buying all m * n products. 
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: values = [ [ 10,8,6,4,2],[9,7,5,3,2 ] ]
Output: 386
Explanation: On the first day, we buy product 4 from shop 0 for a price of values[0][4] * 1 = 2.
On the second day, we buy product 4 from shop 1 for a price of values[1][4] * 2 = 4.
On the third day, we buy product 3 from shop 1 for a price of values[1][3] * 3 = 9.
On the fourth day, we buy product 3 from shop 0 for a price of values[0][3] * 4 = 16.
On the fifth day, we buy product 2 from shop 1 for a price of values[1][2] * 5 = 25.
On the sixth day, we buy product 2 from shop 0 for a price of values[0][2] * 6 = 36.
On the seventh day, we buy product 1 from shop 1 for a price of values[1][1] * 7 = 49.
On the eighth day, we buy product 1 from shop 0 for a price of values[0][1] * 8 = 64
On the ninth day, we buy product 0 from shop 1 for a price of values[1][0] * 9 = 81.
On the tenth day, we buy product 0 from shop 0 for a price of values[0][0] * 10 = 100.
Hence, our total spending is equal to 386.
It can be shown that 386 is the maximum amount of money that can be spent buying all m * n products.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m * n * log(mn)) time | O(m * n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/12
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumSpendingAfterBuyingItems</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">maxSpending</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">values</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get number of stores</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">values</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Get number of items per store</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Create a 1D array to store all item values</span>
        <span class="c1">// Total size will be number of stores * items per store</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span> <span class="o">*</span> <span class="n">n</span><span class="o">];</span>

        <span class="c1">// Copy all item values from 2D array to 1D array</span>
        <span class="c1">// System.arraycopy allows efficient array copying</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Copy each store's items to the corresponding section of the 1D array</span>
            <span class="c1">// Source array: values[i]</span>
            <span class="c1">// Destination array: a</span>
            <span class="c1">// Destination start index: i * n (ensures non-overlapping placement)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">values</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">i</span> <span class="o">*</span> <span class="n">n</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Sort the array in ascending order</span>
        <span class="c1">// This ensures lower-value items are bought earlier</span>
        <span class="c1">// Higher-value items are bought later when day multiplier is larger</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>

        <span class="c1">// Variable to store total spending</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Calculate spending for each item</span>
        <span class="c1">// Multiply each item's value with its purchase day</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// (i + 1) represents the day of purchase</span>
            <span class="c1">// Lower-value items are multiplied by smaller day numbers</span>
            <span class="c1">// Higher-value items are multiplied by larger day numbers</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">*</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Mixed value stores</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">values1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">3</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">long</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">maxSpending</span><span class="o">(</span><span class="n">values1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>  <span class="c1">// Expected output: 285</span>

        <span class="c1">// Test Case 2: More items per store</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">values2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">long</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">maxSpending</span><span class="o">(</span><span class="n">values2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>  <span class="c1">// Expected output: 386</span>

        <span class="c1">// Test Case 3: Single store</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">values3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">long</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">maxSpending</span><span class="o">(</span><span class="n">values3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>

        <span class="c1">// Test Case 4: All zero values</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">values4</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">long</span> <span class="n">result4</span> <span class="o">=</span> <span class="n">maxSpending</span><span class="o">(</span><span class="n">values4</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Hard"/><summary type="html"><![CDATA[You are given a 0-indexed m * n integer matrix values, representing the values of m * n different items in m different shops. Each shop has n items where the jth item in the ith shop has a value of values[i][j]. Additionally, the items in the ith shop are sorted in non-increasing order of value. That is, values[i][j] &gt;= values[i][j + 1] for all 0 &lt;= j &lt; n - 1. On each day, you would like to buy a single item from one of the shops. Specifically, On the dth day you can: Pick any shop i. Buy the rightmost available item j for the price of values[i][j] * d. That is, find the greatest index j such that item j was never bought before, and buy it for the price of values[i][j] * d. Note that all items are pairwise different. For example, if you have bought item 0 from shop 1, you can still buy item 0 from any other shop. Return the maximum amount of money that can be spent on buying all m * n products.]]></summary></entry><entry><title type="html">2558. Take Gifts From the Richest Pile</title><link href="https://zhengstar94.github.io//blog/2024/TakeGiftsFromTheRichestPile/" rel="alternate" type="text/html" title="2558. Take Gifts From the Richest Pile"/><published>2024-12-12T00:00:00+00:00</published><updated>2024-12-12T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/TakeGiftsFromTheRichestPile</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/TakeGiftsFromTheRichestPile/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">gifts</code> denoting the number of gifts in various piles. Every second, you do the following: <ul> <li>Choose the pile with the maximum number of gifts.</li> <li>If there is more than one pile with the maximum number of gifts, choose any.</li> <li>Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.</li> </ul> </li> <li>Return <em>the number of gifts remaining after</em> <code class="language-plaintext highlighter-rouge">k</code> <em>seconds.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: gifts = [25,64,9,4,100], k = 4
Output: 29
Explanation: 
The gifts are taken in the following way:
- In the first second, the last pile is chosen and 10 gifts are left behind.
- Then the second pile is chosen and 8 gifts are left behind.
- After that the first pile is chosen and 5 gifts are left behind.
- Finally, the last pile is chosen again and 3 gifts are left behind.
The final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: gifts = [1,1,1,1], k = 4
Output: 4
Explanation: 
In this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. 
That is, you can't take any pile with you. 
So, the total gifts remaining are 4.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(k * log(n)) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/12
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TakeGiftsFromTheRichestPile</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">pickGifts</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">gifts</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create a max heap (priority queue with descending order)</span>
        <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">maxHeap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;((</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-</span> <span class="n">a</span><span class="o">);</span>

        <span class="c1">// Add all gift quantities to the max heap</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">gift:</span> <span class="n">gifts</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">maxHeap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">gift</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Perform k operations</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">k</span><span class="o">--</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
            <span class="c1">// Take the largest gift pile</span>
            <span class="kt">int</span> <span class="n">gift</span> <span class="o">=</span> <span class="n">maxHeap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>

            <span class="c1">// Calculate square root and round down</span>
            <span class="n">gift</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">gift</span><span class="o">);</span>

            <span class="c1">// Add modified gift pile back to the heap</span>
            <span class="n">maxHeap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">gift</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Calculate total remaining gifts</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">maxHeap</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">maxHeap</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">gifts1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">25</span><span class="o">,</span> <span class="mi">64</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">100</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">pickGifts</span><span class="o">(</span><span class="n">gifts1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span> <span class="c1">// Expected output: 29</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">gifts2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">pickGifts</span><span class="o">(</span><span class="n">gifts2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Easy"/><summary type="html"><![CDATA[You are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following: Choose the pile with the maximum number of gifts. If there is more than one pile with the maximum number of gifts, choose any. Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts. Return the number of gifts remaining after k seconds.]]></summary></entry><entry><title type="html">2779. Maximum Beauty of an Array After Applying Operation</title><link href="https://zhengstar94.github.io//blog/2024/MaximumBeautyOfAnArrayAfterApplyingOperation/" rel="alternate" type="text/html" title="2779. Maximum Beauty of an Array After Applying Operation"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MaximumBeautyOfAnArrayAfterApplyingOperation</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MaximumBeautyOfAnArrayAfterApplyingOperation/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> array <code class="language-plaintext highlighter-rouge">nums</code> and a <strong>non-negative</strong> integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>In one operation, you can do the following: <ul> <li>Choose an index <code class="language-plaintext highlighter-rouge">i</code> that <strong>hasn’t been chosen before</strong> from the range <code class="language-plaintext highlighter-rouge">[0, nums.length - 1]</code>.</li> <li>Replace <code class="language-plaintext highlighter-rouge">nums[i]</code> with any integer from the range <code class="language-plaintext highlighter-rouge">[nums[i] - k, nums[i] + k]</code>.</li> </ul> </li> <li>The <strong>beauty</strong> of the array is the length of the longest subsequence consisting of equal elements.</li> <li>Return <em>the <strong>maximum</strong> possible beauty of the array</em> <code class="language-plaintext highlighter-rouge">nums</code> *after applying the operation any number of times.**</li> <li><strong>*Note</strong> that you can apply the operation to each index <strong>only once</strong>.</li> <li>A <strong>subsequence</strong> of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,6,1,2], k = 2
Output: 3
Explanation: In this example, we apply the following operations:
- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].
- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].
After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).
It can be proven that 3 is the maximum possible length we can achieve.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,1,1,1], k = 10
Output: 4
Explanation: In this example we don't have to apply any operations.
The beauty of the array nums is 4 (whole array).
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/11
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumBeautyOfAnArrayAfterApplyingOperation</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maximumBeauty</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Step 1: Sort the array to bring close numbers together.</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">maxBeauty</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Tracks the maximum beauty found.</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Left pointer of the sliding window.</span>

        <span class="c1">// Iterate through the array with the right pointer.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Check if the difference between nums[right] and nums[left] exceeds 2 * k.</span>
            <span class="c1">// If it does, increment the left pointer to reduce the window size.</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Update the maximum beauty by comparing it to the current window size.</span>
            <span class="n">maxBeauty</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxBeauty</span><span class="o">,</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">maxBeauty</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">maximumBeauty</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span> <span class="c1">// Expected: 3</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">maximumBeauty</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span> <span class="c1">// Expected: 4</span>

        <span class="c1">// Test case 3</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">maximumBeauty</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">k3</span><span class="o">));</span> <span class="c1">// Expected: 2</span>

        <span class="c1">// Test case 4</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">100</span><span class="o">,</span> <span class="mi">101</span><span class="o">,</span> <span class="mi">102</span><span class="o">,</span> <span class="mi">103</span><span class="o">,</span> <span class="mi">104</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k4</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 4: "</span> <span class="o">+</span> <span class="n">maximumBeauty</span><span class="o">(</span><span class="n">nums4</span><span class="o">,</span> <span class="n">k4</span><span class="o">));</span> <span class="c1">// Expected: 5</span>

        <span class="c1">// Test case 5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">8</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k5</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 5: "</span> <span class="o">+</span> <span class="n">maximumBeauty</span><span class="o">(</span><span class="n">nums5</span><span class="o">,</span> <span class="n">k5</span><span class="o">));</span> <span class="c1">// Expected: 4</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given a 0-indexed array nums and a non-negative integer k. In one operation, you can do the following: Choose an index i that hasn’t been chosen before from the range [0, nums.length - 1]. Replace nums[i] with any integer from the range [nums[i] - k, nums[i] + k]. The beauty of the array is the length of the longest subsequence consisting of equal elements. Return the maximum possible beauty of the array nums *after applying the operation any number of times.** *Note that you can apply the operation to each index only once. A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.]]></summary></entry><entry><title type="html">2717. Semi-Ordered Permutation</title><link href="https://zhengstar94.github.io//blog/2024/SemiOrderedPermutation/" rel="alternate" type="text/html" title="2717. Semi-Ordered Permutation"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/SemiOrderedPermutation</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/SemiOrderedPermutation/"><![CDATA[<ul> <li>ou are given a <strong>0-indexed</strong> permutation of <code class="language-plaintext highlighter-rouge">n</code> integers <code class="language-plaintext highlighter-rouge">nums</code>.</li> <li>A permutation is called <strong>semi-ordered</strong> if the first number equals <code class="language-plaintext highlighter-rouge">1</code> and the last number equals <code class="language-plaintext highlighter-rouge">n</code>. You can perform the below operation as many times as you want until you make <code class="language-plaintext highlighter-rouge">nums</code> a <strong>semi-ordered</strong> permutation: <ul> <li>Pick two adjacent elements in <code class="language-plaintext highlighter-rouge">nums</code>, then swap them.</li> </ul> </li> <li>Return <em>the minimum number of operations to make</em> <code class="language-plaintext highlighter-rouge">nums</code> <em>a <strong>semi-ordered permutation</strong></em>.</li> <li>A <strong>permutation</strong> is a sequence of integers from <code class="language-plaintext highlighter-rouge">1</code> to <code class="language-plaintext highlighter-rouge">n</code> of length <code class="language-plaintext highlighter-rouge">n</code> containing each number exactly once.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,4,3]
Output: 2
Explanation: We can make the permutation semi-ordered using these sequence of operations: 
1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].
2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].
It can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation. 
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,4,1,3]
Output: 3
Explanation: We can make the permutation semi-ordered using these sequence of operations:
1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].
2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].
3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].
It can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,3,4,2,5]
Output: 0
Explanation: The permutation is already a semi-ordered permutation.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/11
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SemiOrderedPermutation</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">semiOrderedPermutation</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of the input array</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Initialize indices for numbers 1 and n</span>
        <span class="c1">// Set to -1 to indicate not found initially</span>
        <span class="kt">int</span> <span class="n">oneIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">nIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Find the positions of numbers 1 and n in the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Record the index of number 1</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
                <span class="n">oneIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Record the index of number n</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">n</span><span class="o">){</span>
                <span class="n">nIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Special case: if 1 is already at the first position</span>
        <span class="c1">// and n is already at the last position, no swaps needed</span>
        <span class="k">if</span><span class="o">(</span><span class="n">oneIndex</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nIndex</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Swap calculation explanation:</span>
        <span class="c1">// The formula `oneIndex + (n - 1 - nIndex)` calculates the total number of swaps needed</span>
        <span class="c1">// Let's break it down step by step:</span>

        <span class="c1">// `oneIndex`:</span>
        <span class="c1">// - Represents the number of swaps needed to move 1 to the first position (index 0)</span>
        <span class="c1">// - Higher index means more swaps required to bring 1 to the start</span>
        <span class="c1">// - Example: In [2,1,4,3], oneIndex is 1, so 1 swap is needed to move 1 to start</span>

        <span class="c1">// `(n - 1 - nIndex)`:</span>
        <span class="c1">// - Represents the number of swaps needed to move n to the last position (index n-1)</span>
        <span class="c1">// - Calculates how far n is from the end of the array</span>
        <span class="c1">// - Example: In [2,4,1,3], nIndex is 1, so (3-1-1) = 1 swap is needed to move n to end</span>

        <span class="c1">// Total swaps = swaps to move 1 to start + swaps to move n to end</span>
        <span class="kt">int</span> <span class="n">swap</span> <span class="o">=</span> <span class="n">oneIndex</span> <span class="o">+</span> <span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">nIndex</span><span class="o">);</span>

        <span class="c1">// Special handling: If 1 appears after n in the original array</span>
        <span class="c1">// We can optimize by reducing one swap</span>
        <span class="c1">// This is because 1 and n might be swapped in a single operation</span>
        <span class="k">if</span><span class="o">(</span><span class="n">oneIndex</span> <span class="o">&gt;</span> <span class="n">nIndex</span><span class="o">){</span>
            <span class="n">swap</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">swap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Requires 2 swaps</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span>

        <span class="c1">// Test case 2: Requires 3 swaps</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Already semi-ordered, no swaps needed</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums3</span><span class="o">));</span>

        <span class="c1">// Test case 4: 1 at the end, n at the beginning</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums4</span><span class="o">));</span>

        <span class="c1">// Test case 5: Short array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 5: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums5</span><span class="o">));</span>

        <span class="c1">// Test case 6: Larger array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums6</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 6: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums6</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[ou are given a 0-indexed permutation of n integers nums. A permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation: Pick two adjacent elements in nums, then swap them. Return the minimum number of operations to make nums a semi-ordered permutation. A permutation is a sequence of integers from 1 to n of length n containing each number exactly once.]]></summary></entry><entry><title type="html">65. Valid Number</title><link href="https://zhengstar94.github.io//blog/2024/ValidNumber/" rel="alternate" type="text/html" title="65. Valid Number"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ValidNumber</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ValidNumber/"><![CDATA[<ul> <li> <p>Given a string <code class="language-plaintext highlighter-rouge">s</code>, return whether <code class="language-plaintext highlighter-rouge">s</code> is a <strong>valid number</strong>.</p> </li> <li> <p>For example, all the following are valid numbers: <code class="language-plaintext highlighter-rouge">"2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"</code>, while the following are not valid numbers: <code class="language-plaintext highlighter-rouge">"abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"</code>.</p> </li> <li> <p>Formally, a <strong>valid number</strong> is defined using one of the following definitions:</p> <ol> <li>An <strong>integer number</strong> followed by an <strong>optional exponent</strong>.</li> <li>A <strong>decimal number</strong> followed by an <strong>optional exponent</strong>.</li> </ol> </li> <li> <p>An <strong>integer number</strong> is defined with an <strong>optional sign</strong> <code class="language-plaintext highlighter-rouge">'-'</code> or <code class="language-plaintext highlighter-rouge">'+'</code> followed by <strong>digits</strong>.</p> </li> <li> <p>A <strong>decimal number</strong> is defined with an <strong>optional sign</strong> <code class="language-plaintext highlighter-rouge">'-'</code> or <code class="language-plaintext highlighter-rouge">'+'</code> followed by one of the following definitions:</p> <ol> <li><strong>Digits</strong> followed by a <strong>dot</strong> <code class="language-plaintext highlighter-rouge">'.'</code>.</li> <li><strong>Digits</strong> followed by a <strong>dot</strong> <code class="language-plaintext highlighter-rouge">'.'</code> followed by <strong>digits</strong>.</li> <li>A <strong>dot</strong> <code class="language-plaintext highlighter-rouge">'.'</code> followed by <strong>digits</strong>.</li> </ol> </li> <li> <p>An <strong>exponent</strong> is defined with an <strong>exponent notation</strong> <code class="language-plaintext highlighter-rouge">'e'</code> or <code class="language-plaintext highlighter-rouge">'E'</code> followed by an <strong>integer number</strong>.</p> </li> <li> <p>The <strong>digits</strong> are defined as one or more digits.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "0"

Output: true
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "e"

Output: false
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "."

Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/11
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidNumber</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Check for null or empty input</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Remove leading and trailing spaces</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>

        <span class="c1">// Flags to track what parts of a valid number have been seen</span>
        <span class="kt">boolean</span> <span class="n">seenDigit</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Tracks if a digit has been encountered</span>
        <span class="kt">boolean</span> <span class="n">seenDot</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>  <span class="c1">// Tracks if a dot '.' has been encountered</span>
        <span class="kt">boolean</span> <span class="n">seenExp</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Tracks if an exponent 'e' or 'E' has been encountered</span>
        <span class="kt">boolean</span> <span class="n">seenSign</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Tracks if a sign '+' or '-' has been encountered</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
                <span class="c1">// If the character is a digit, mark seenDigit as true</span>
                <span class="n">seenDigit</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'.'</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the character is a dot:</span>
                <span class="c1">// 1. It is invalid if a dot or an exponent has already been encountered</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">seenDot</span> <span class="o">||</span> <span class="n">seenExp</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="c1">// 2. Mark seenDot as true</span>
                <span class="n">seenDot</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'e'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">'E'</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the character is an exponent:</span>
                <span class="c1">// 1. It is invalid if an exponent has already been encountered</span>
                <span class="c1">//    or if no digit has been encountered before the exponent</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">seenExp</span> <span class="o">||</span> <span class="o">!</span><span class="n">seenDigit</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="c1">// 2. Mark seenExp as true</span>
                <span class="n">seenExp</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="c1">// 3. Reset seenDigit and seenSign to ensure valid format after 'e'/'E'</span>
                <span class="n">seenDigit</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// A valid exponent must be followed by a number</span>
                <span class="n">seenSign</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span> <span class="c1">// Allow a sign immediately after the exponent</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'+'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">'-'</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the character is a sign:</span>
                <span class="c1">// 1. It is invalid if a sign has already been encountered</span>
                <span class="c1">//    or if it is not at the start or immediately after an exponent</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">seenSign</span> <span class="o">||</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">'e'</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">'E'</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="c1">// 2. Mark seenSign as true</span>
                <span class="n">seenSign</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// If the character is anything else, it is invalid</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// The string is valid only if a digit has been encountered</span>
        <span class="k">return</span> <span class="n">seenDigit</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test cases to validate the implementation</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">testCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"0"</span><span class="o">,</span>       <span class="c1">// Simple valid integer</span>
                <span class="s">".1"</span><span class="o">,</span>      <span class="c1">// Valid floating point with leading dot</span>
                <span class="s">"2e10"</span><span class="o">,</span>    <span class="c1">// Valid scientific notation</span>
                <span class="s">"-90E3"</span><span class="o">,</span>   <span class="c1">// Valid negative number in scientific notation</span>
                <span class="s">"3e+7"</span><span class="o">,</span>    <span class="c1">// Valid positive exponent</span>
                <span class="s">"+6e-1"</span><span class="o">,</span>   <span class="c1">// Valid positive number with negative exponent</span>
                <span class="s">"53.5e93"</span><span class="o">,</span> <span class="c1">// Valid number with decimal and exponent</span>
                <span class="s">"-123.456e789"</span><span class="o">,</span> <span class="c1">// Valid negative number with decimal and exponent</span>
                <span class="s">"abc"</span><span class="o">,</span>     <span class="c1">// Invalid non-numeric string</span>
                <span class="s">"1a"</span><span class="o">,</span>      <span class="c1">// Invalid number with trailing characters</span>
                <span class="s">"1e"</span><span class="o">,</span>      <span class="c1">// Invalid exponent without digits after it</span>
                <span class="s">"e3"</span><span class="o">,</span>      <span class="c1">// Invalid string starting with exponent</span>
                <span class="s">"99e2.5"</span><span class="o">,</span>  <span class="c1">// Invalid exponent with decimal part</span>
                <span class="s">"--6"</span><span class="o">,</span>     <span class="c1">// Invalid double sign</span>
                <span class="s">"-+3"</span><span class="o">,</span>     <span class="c1">// Invalid mixed signs</span>
                <span class="s">"95a54e53"</span> <span class="c1">// Invalid characters within the number</span>
        <span class="o">};</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">testCase</span> <span class="o">+</span> <span class="s">" -&gt; Output: "</span> <span class="o">+</span> <span class="n">isNumber</span><span class="o">(</span><span class="n">testCase</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Hard"/><summary type="html"><![CDATA[Given a string s, return whether s is a valid number.]]></summary></entry><entry><title type="html">38. Count and Say</title><link href="https://zhengstar94.github.io//blog/2024/CountAndSay/" rel="alternate" type="text/html" title="38. Count and Say"/><published>2024-12-10T00:00:00+00:00</published><updated>2024-12-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/CountAndSay</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/CountAndSay/"><![CDATA[<ul> <li> <p>The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula:</p> <ul> <li><code class="language-plaintext highlighter-rouge">countAndSay(1) = "1"</code></li> <li><code class="language-plaintext highlighter-rouge">countAndSay(n)</code> is the run-length encoding of <code class="language-plaintext highlighter-rouge">countAndSay(n - 1)</code>.</li> </ul> </li> <li> <p><a href="http://en.wikipedia.org/wiki/Run-length_encoding">Run-length encoding</a> (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string <code class="language-plaintext highlighter-rouge">"3322251"</code> we replace <code class="language-plaintext highlighter-rouge">"33"</code> with <code class="language-plaintext highlighter-rouge">"23"</code>, replace <code class="language-plaintext highlighter-rouge">"222"</code> with <code class="language-plaintext highlighter-rouge">"32"</code>, replace <code class="language-plaintext highlighter-rouge">"5"</code> with <code class="language-plaintext highlighter-rouge">"15"</code> and replace <code class="language-plaintext highlighter-rouge">"1"</code> with <code class="language-plaintext highlighter-rouge">"11"</code>. Thus the compressed string becomes <code class="language-plaintext highlighter-rouge">"23321511"</code>.</p> <p>Given a positive integer <code class="language-plaintext highlighter-rouge">n</code>, return <em>the</em> <code class="language-plaintext highlighter-rouge">nth</code> <em>element of the <strong>count-and-say</strong> sequence</em>.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 4
Output: "1211"

Explanation:
countAndSay(1) = "1"
countAndSay(2) = RLE of "1" = "11"
countAndSay(3) = RLE of "11" = "21"
countAndSay(4) = RLE of "21" = "1211"
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 1
Output: "1"

Explanation:
This is the base case.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(2<span class="p">^</span>n) time | O(2<span class="p">^</span>n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountAndSay</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">countAndSay</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Base case: when n = 1, return "1"</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">"1"</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Recursively get the previous sequence</span>
        <span class="nc">String</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

        <span class="c1">// StringBuilder to build the current sequence</span>
        <span class="nc">StringBuilder</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="c1">// Variables to track the current character and its count</span>
        <span class="kt">char</span> <span class="n">currentChar</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Iterate through the previous sequence</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prev</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">prev</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">currentChar</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Increment the count if the same character is repeated</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Append the count and character to the result</span>
                <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">currentChar</span><span class="o">);</span>

                <span class="c1">// Reset the current character and its count</span>
                <span class="n">currentChar</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Append the last group of characters</span>
        <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">currentChar</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: n = 1</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n1</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n1</span><span class="o">));</span>

        <span class="c1">// Test case 2: n = 2</span>
        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n2</span><span class="o">));</span>

        <span class="c1">// Test case 3: n = 3</span>
        <span class="kt">int</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n3</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n3</span><span class="o">));</span>

        <span class="c1">// Test case 4: n = 4</span>
        <span class="kt">int</span> <span class="n">n4</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n4</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n4</span><span class="o">));</span>

        <span class="c1">// Test case 5: n = 5</span>
        <span class="kt">int</span> <span class="n">n5</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n5</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n5</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[The count-and-say sequence is a sequence of digit strings defined by the recursive formula:]]></summary></entry><entry><title type="html">2981. Find Longest Special Substring That Occurs Thrice I</title><link href="https://zhengstar94.github.io//blog/2024/FindLongestSpecialSubstringThatOccursThriceI/" rel="alternate" type="text/html" title="2981. Find Longest Special Substring That Occurs Thrice I"/><published>2024-12-10T00:00:00+00:00</published><updated>2024-12-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindLongestSpecialSubstringThatOccursThriceI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindLongestSpecialSubstringThatOccursThriceI/"><![CDATA[<ul> <li>You are given a string <code class="language-plaintext highlighter-rouge">s</code> that consists of lowercase English letters.</li> <li>A string is called <strong>special</strong> if it is made up of only a single character. For example, the string <code class="language-plaintext highlighter-rouge">"abc"</code> is not special, whereas the strings <code class="language-plaintext highlighter-rouge">"ddd"</code>, <code class="language-plaintext highlighter-rouge">"zz"</code>, and <code class="language-plaintext highlighter-rouge">"f"</code> are special.</li> <li>Return <em>the length of the <strong>longest special substring</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code> <em>which occurs <strong>at least thrice</strong></em>, <em>or</em> <code class="language-plaintext highlighter-rouge">-1</code> <em>if no special substring occurs at least thrice</em>.</li> <li>A <strong>substring</strong> is a contiguous <strong>non-empty</strong> sequence of characters within a string.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aaaa"
Output: 2
Explanation: The longest special substring which occurs thrice is "aa": substrings "aaaa", "aaaa", and "aaaa".
It can be shown that the maximum length achievable is 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abcdef"
Output: -1
Explanation: There exists no special substring which occurs at least thrice. Hence return -1.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abcaba"
Output: 1
Explanation: The longest special substring which occurs thrice is "a": substrings "abcaba", "abcaba", and "abcaba".
It can be shown that the maximum length achievable is 1.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindLongestSpecialSubstringThatOccursThriceI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maximumLength</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Convert the input string to a character array for easier manipulation in the next steps</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">tempArray</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>

        <span class="c1">// Create an array of lists to store the lengths of contiguous substrings for each character (26 letters in the alphabet)</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">groups</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">setAll</span><span class="o">(</span><span class="n">groups</span><span class="o">,</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>

        <span class="c1">// Variable to count the length of the current contiguous substring</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate over the character array to group contiguous occurrences of each character</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">tempArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">cnt</span><span class="o">++;</span> <span class="c1">// Increment the current substring length</span>
            <span class="c1">// If we reach the end of the string or the current character is different from the next</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">tempArray</span><span class="o">.</span><span class="na">length</span> <span class="o">||</span> <span class="n">tempArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">tempArray</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]){</span>
                <span class="c1">// Add the length of the current contiguous substring to the appropriate group</span>
                <span class="n">groups</span><span class="o">[</span><span class="n">tempArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
                <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Reset the counter for the next substring</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Variable to store the overall maximum length of a special substring</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate over each group (i.e., each letter's contiguous substring lengths)</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nl">group:</span> <span class="n">groups</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Skip empty groups (i.e., letters that don't appear in the string)</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">group</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// Add two zeroes to simulate the case where there are less than 3 substrings</span>
            <span class="n">group</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// Adding zero as a placeholder</span>
            <span class="n">group</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// Adding another zero as a placeholder</span>

            <span class="c1">// Calculate case 1: the longest substring minus 2 (this assumes the longest substring is the special one)</span>
            <span class="kt">int</span> <span class="n">case1</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span>

            <span class="c1">// Calculate case 2: the best possible substring when there are at least two substrings (find the minimum of the first two, then maximize it with the third)</span>
            <span class="kt">int</span> <span class="n">case2</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)),</span> <span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>

            <span class="c1">// Update the answer by comparing the current maximum with the newly calculated cases</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">case1</span><span class="o">,</span> <span class="n">case2</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// Return the result, or -1 if no valid special substring was found</span>
        <span class="k">return</span> <span class="n">ans</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">ans</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: The string "aaabbcaaa" contains several groups of contiguous characters.</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"aaabbcaaa"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: The string "aabbaa" has a mix of substrings but not all substrings are of the same length.</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"aabbaa"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>

        <span class="c1">// Test case 3: The string "abc" contains no repeated substrings, so the maximum length will be 1.</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>

        <span class="c1">// Test case 4: The string "aaaaa" has a single repeated character for a long length.</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"aaaaa"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 4: "</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>

        <span class="c1">// Test case 5: The string "a" has only one character, so the maximum length will be 1.</span>
        <span class="nc">String</span> <span class="n">test5</span> <span class="o">=</span> <span class="s">"a"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 5: "</span> <span class="o">+</span> <span class="n">test5</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test5</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[You are given a string s that consists of lowercase English letters. A string is called special if it is made up of only a single character. For example, the string "abc" is not special, whereas the strings "ddd", "zz", and "f" are special. Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice. A substring is a contiguous non-empty sequence of characters within a string.]]></summary></entry><entry><title type="html">935. Knight Dialer</title><link href="https://zhengstar94.github.io//blog/2024/KnightDialer/" rel="alternate" type="text/html" title="935. Knight Dialer"/><published>2024-12-10T00:00:00+00:00</published><updated>2024-12-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/KnightDialer</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/KnightDialer/"><![CDATA[<ul> <li>The chess knight has a <strong>unique movement</strong>, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an <strong>L</strong>). The possible movements of chess knight are shown in this diagram:</li> <li>Given an integer <code class="language-plaintext highlighter-rouge">n</code>, return how many distinct phone numbers of length <code class="language-plaintext highlighter-rouge">n</code> we can dial.</li> <li>You are allowed to place the knight <strong>on any numeric cell</strong> initially and then you should perform <code class="language-plaintext highlighter-rouge">n - 1</code> jumps to dial a number of length <code class="language-plaintext highlighter-rouge">n</code>. All jumps should be <strong>valid</strong> knight jumps.</li> <li>As the answer may be very large, <strong>return the answer modulo</strong> <code class="language-plaintext highlighter-rouge">109 + 7</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 2
Output: 20
Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 3131
Output: 136006598
Explanation: Please take care of the mod.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.DynamicProgramming</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">KnightDialer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">knightDialer</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Special case: if number length is 1, return 10 (all digits 0-9 are valid)</span>
        <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Predefined array showing how many moves are possible from each digit</span>
        <span class="c1">// Index represents the current digit (0-9)</span>
        <span class="c1">// Value represents the number of possible next moves</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">help</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>

        <span class="c1">// Create a copy of the help array to track current state</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">cur</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">help</span><span class="o">,</span> <span class="n">help</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>

        <span class="c1">// Dynamic Programming: Iterate to build phone numbers of length n</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Calculate possible moves for each digit based on previous state</span>
            <span class="c1">// These calculations follow the knight's move rules on a phone keypad</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span>       <span class="c1">// 0 can be reached from 4 and 6</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>        <span class="c1">// 1 can be reached from 6 and 8</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">9</span><span class="o">];</span>        <span class="c1">// 2 can be reached from 7 and 9</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>        <span class="c1">// 3 can be reached from 4 and 8</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// 4 can be reached from 3, 9, and 0</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>                        <span class="c1">// 5 cannot be reached by knight's move</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// 6 can be reached from 1, 7, and 0</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span>        <span class="c1">// 7 can be reached from 2 and 6</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>        <span class="c1">// 8 can be reached from 1 and 3</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>        <span class="c1">// 9 can be reached from 2 and 4</span>

            <span class="c1">// Update help array and apply modulo to prevent integer overflow</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                <span class="n">help</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">cur</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">%</span> <span class="o">(</span><span class="mi">1000000007</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Sum up all possible phone numbers and apply final modulo</span>
        <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">cur</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">%</span> <span class="o">(</span><span class="mi">1000000007</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases with different number lengths</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">knightDialer</span><span class="o">(</span><span class="n">n1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"For n = "</span> <span class="o">+</span> <span class="n">n1</span> <span class="o">+</span> <span class="s">", the number of distinct phone numbers is: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">knightDialer</span><span class="o">(</span><span class="n">n2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"For n = "</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="s">", the number of distinct phone numbers is: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">3131</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">knightDialer</span><span class="o">(</span><span class="n">n3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"For n = "</span> <span class="o">+</span> <span class="n">n3</span> <span class="o">+</span> <span class="s">", the number of distinct phone numbers is: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Dynamic Programming"/><category term="Medium"/><summary type="html"><![CDATA[The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagram: Given an integer n, return how many distinct phone numbers of length n we can dial. You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps. As the answer may be very large, return the answer modulo 109 + 7.]]></summary></entry><entry><title type="html">1812. Determine Color of a Chessboard Square</title><link href="https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare/" rel="alternate" type="text/html" title="1812. Determine Color of a Chessboard Square"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare/"><![CDATA[<ul> <li> <p>You are given <code class="language-plaintext highlighter-rouge">coordinates</code>, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.</p> </li> <li> <p>Return <code class="language-plaintext highlighter-rouge">true</code> <em>if the square is white, and</em> <code class="language-plaintext highlighter-rouge">false</code> <em>if the square is black</em>.</p> <p>The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "a1"
Output: false
Explanation: From the chessboard above, the square with coordinates "a1" is black, so return false.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "h3"
Output: true
Explanation: From the chessboard above, the square with coordinates "h3" is white, so return true.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "c7"
Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DetermineColorOfAChessboardSquare</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">squareIsWhite</span><span class="o">(</span><span class="nc">String</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Convert column letter to zero-based index (a=0, b=1, ...)</span>
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">coordinates</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">;</span>
        <span class="c1">// Convert row number to zero-based index (1=0, 2=1, ...)</span>
        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">coordinates</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'1'</span><span class="o">;</span>

        <span class="c1">// If the sum of column and row indices is odd, the square is white</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">col</span> <span class="o">+</span> <span class="n">row</span><span class="o">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Black square</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"a1"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: White square</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"h3"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Black square</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"c7"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"e4"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.]]></summary></entry></feed>