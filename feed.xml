<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-16T03:40:01+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">415. Add Strings</title><link href="https://zhengstar94.github.io//blog/2024/AddStrings/" rel="alternate" type="text/html" title="415. Add Strings"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/AddStrings</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/AddStrings/"><![CDATA[<ul> <li>Given two non-negative integers, <code class="language-plaintext highlighter-rouge">num1</code> and <code class="language-plaintext highlighter-rouge">num2</code> represented as string, return <em>the sum of</em> <code class="language-plaintext highlighter-rouge">num1</code> <em>and</em> <code class="language-plaintext highlighter-rouge">num2</code> <em>as a string</em>.</li> <li>You must solve the problem without using any built-in library for handling large integers (such as <code class="language-plaintext highlighter-rouge">BigInteger</code>). You must also not convert the inputs to integers directly.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = "11", num2 = "123"
Output: "134"
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = "456", num2 = "77"
Output: "533"
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = "0", num2 = "0"
Output: "0"
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(max(n, m)) time | O(max(n, m)) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.MathGeometry</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddStrings</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">addStrings</span><span class="o">(</span><span class="nc">String</span> <span class="n">num1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">num2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize pointers to the end of both input strings</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">num1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">num2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Initialize carry variable to track digit overflow</span>
        <span class="kt">int</span> <span class="n">up</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// StringBuilder to efficiently build the result string</span>
        <span class="nc">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="c1">// Continue while there are digits to process or there's a carry</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">up</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Extract current digits, use 0 if no more digits</span>
            <span class="c1">// Convert character to integer by subtracting '0'</span>
            <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">num1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">num2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>

            <span class="c1">// Calculate sum of current digits and carry</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">up</span><span class="o">;</span>

            <span class="c1">// Append the current digit's ones place to result</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">result</span> <span class="o">%</span> <span class="mi">10</span><span class="o">);</span>

            <span class="c1">// Calculate new carry for next iteration</span>
            <span class="n">up</span> <span class="o">=</span> <span class="n">result</span> <span class="o">/</span> <span class="mi">10</span><span class="o">;</span>

            <span class="c1">// Move pointers to previous digits</span>
            <span class="n">i</span><span class="o">--;</span>
            <span class="n">j</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="c1">// Reverse the string as we built it from least significant digit</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test Case 1: Regular numbers with different lengths</span>
        <span class="nc">String</span> <span class="n">test1Num1</span> <span class="o">=</span> <span class="s">"11"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test1Num2</span> <span class="o">=</span> <span class="s">"123"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: "</span> <span class="o">+</span> <span class="n">test1Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test1Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test1Num1</span><span class="o">,</span> <span class="n">test1Num2</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Numbers with carry</span>
        <span class="nc">String</span> <span class="n">test2Num1</span> <span class="o">=</span> <span class="s">"456"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test2Num2</span> <span class="o">=</span> <span class="s">"77"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2: "</span> <span class="o">+</span> <span class="n">test2Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test2Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test2Num1</span><span class="o">,</span> <span class="n">test2Num2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: Zero cases</span>
        <span class="nc">String</span> <span class="n">test3Num1</span> <span class="o">=</span> <span class="s">"0"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test3Num2</span> <span class="o">=</span> <span class="s">"0"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3: "</span> <span class="o">+</span> <span class="n">test3Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test3Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test3Num1</span><span class="o">,</span> <span class="n">test3Num2</span><span class="o">));</span>

        <span class="c1">// Test Case 4: Large numbers</span>
        <span class="nc">String</span> <span class="n">test4Num1</span> <span class="o">=</span> <span class="s">"9999"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">test4Num2</span> <span class="o">=</span> <span class="s">"1"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 4: "</span> <span class="o">+</span> <span class="n">test4Num1</span> <span class="o">+</span> <span class="s">" + "</span> <span class="o">+</span> <span class="n">test4Num2</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span>
                <span class="n">addStrings</span><span class="o">(</span><span class="n">test4Num1</span><span class="o">,</span> <span class="n">test4Num2</span><span class="o">));</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode MathGeometry"/><category term="Hard"/><summary type="html"><![CDATA[Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string. You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.]]></summary></entry><entry><title type="html">1847. Closest Room</title><link href="https://zhengstar94.github.io//blog/2024/ClosestRoom/" rel="alternate" type="text/html" title="1847. Closest Room"/><published>2024-12-16T00:00:00+00:00</published><updated>2024-12-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ClosestRoom</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ClosestRoom/"><![CDATA[<ul> <li>There is a hotel with <code class="language-plaintext highlighter-rouge">n</code> rooms. The rooms are represented by a 2D integer array <code class="language-plaintext highlighter-rouge">rooms</code> where <code class="language-plaintext highlighter-rouge">rooms[i] = [roomIdi, sizei]</code> denotes that there is a room with room number <code class="language-plaintext highlighter-rouge">roomIdi</code> and size equal to <code class="language-plaintext highlighter-rouge">sizei</code>. Each <code class="language-plaintext highlighter-rouge">roomIdi</code> is guaranteed to be <strong>unique</strong>.</li> <li>You are also given <code class="language-plaintext highlighter-rouge">k</code> queries in a 2D array <code class="language-plaintext highlighter-rouge">queries</code> where <code class="language-plaintext highlighter-rouge">queries[j] = [preferredj, minSizej]</code>. The answer to the <code class="language-plaintext highlighter-rouge">jth</code> query is the room number <code class="language-plaintext highlighter-rouge">id</code> of a room such that: <ul> <li>The room has a size of <strong>at least</strong> <code class="language-plaintext highlighter-rouge">minSizej</code>, and</li> <li><code class="language-plaintext highlighter-rouge">abs(id - preferredj)</code> is <strong>minimized</strong>, where <code class="language-plaintext highlighter-rouge">abs(x)</code> is the absolute value of <code class="language-plaintext highlighter-rouge">x</code>.</li> </ul> </li> <li>If there is a <strong>tie</strong> in the absolute difference, then use the room with the <strong>smallest</strong> such <code class="language-plaintext highlighter-rouge">id</code>. If there is <strong>no such room</strong>, the answer is <code class="language-plaintext highlighter-rouge">-1</code>.</li> <li>Return <em>an array</em> <code class="language-plaintext highlighter-rouge">answer</code> <em>of length</em> <code class="language-plaintext highlighter-rouge">k</code> <em>where</em> <code class="language-plaintext highlighter-rouge">answer[j]</code> <em>contains the answer to the</em> <code class="language-plaintext highlighter-rouge">jth</code> <em>query</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: rooms = [ [ 2,2],[1,2],[3,2 ] ], queries = [ [ 3,1],[3,3],[5,2 ] ]
Output: [3,-1,3]
Explanation: The answers to the queries are as follows:
Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.
Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.
Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: rooms = [ [ 1,4],[2,3],[3,5],[4,1],[5,2 ] ], queries = [ [ 2,3],[2,4],[2,5 ] ]
Output: [2,1,3]
Explanation: The answers to the queries are as follows:
Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.
Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.
Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(NlogN + QlogQ + QlogN) time | O(N + Q) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeSet</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClosestRoom</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">closestRoom</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create an array to track original query indices</span>
        <span class="c1">// This allows us to maintain the original query order while sorting</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">queryIndices</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">[</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">queryIndices</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>  <span class="c1">// Initialize with original indices</span>
        <span class="o">}</span>

        <span class="c1">// Sort query indices based on room size in descending order</span>
        <span class="c1">// This helps process larger room size requirements first</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">queryIndices</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">queries</span><span class="o">[</span><span class="n">b</span><span class="o">][</span><span class="mi">1</span><span class="o">],</span> <span class="n">queries</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="mi">1</span><span class="o">]));</span>

        <span class="c1">// Sort rooms by size in descending order</span>
        <span class="c1">// Allows efficient filtering of rooms that meet size requirements</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">rooms</span><span class="o">,</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>

        <span class="c1">// Initialize result array and room ID set</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="nc">TreeSet</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">roomIds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Track which rooms have been processed</span>
        <span class="kt">int</span> <span class="n">roomIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Process each query in sorted order</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">queryIdx</span> <span class="o">:</span> <span class="n">queryIndices</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Extract query parameters</span>
            <span class="kt">int</span> <span class="n">preferred</span> <span class="o">=</span> <span class="n">queries</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>  <span class="c1">// Preferred room number</span>
            <span class="kt">int</span> <span class="n">minSize</span> <span class="o">=</span> <span class="n">queries</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">][</span><span class="mi">1</span><span class="o">];</span>    <span class="c1">// Minimum room size</span>

            <span class="c1">// Add room IDs that meet the size requirement</span>
            <span class="c1">// Dynamically build a set of valid room IDs</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">roomIndex</span> <span class="o">&lt;</span> <span class="n">rooms</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">rooms</span><span class="o">[</span><span class="n">roomIndex</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">minSize</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">roomIds</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">rooms</span><span class="o">[</span><span class="n">roomIndex</span><span class="o">][</span><span class="mi">0</span><span class="o">]);</span>
                <span class="n">roomIndex</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// If no rooms meet the size requirement, mark as -1</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">roomIds</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Find the closest room numbers</span>
            <span class="c1">// floor: largest room number &lt;= preferred</span>
            <span class="c1">// ceiling: smallest room number &gt;= preferred</span>
            <span class="nc">Integer</span> <span class="n">lower</span> <span class="o">=</span> <span class="n">roomIds</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="n">preferred</span><span class="o">);</span>
            <span class="nc">Integer</span> <span class="n">higher</span> <span class="o">=</span> <span class="n">roomIds</span><span class="o">.</span><span class="na">ceiling</span><span class="o">(</span><span class="n">preferred</span><span class="o">);</span>

            <span class="c1">// Handle edge cases where lower or higher might be null</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">lower</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// No room number lower than preferred, use higher</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="n">higher</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">higher</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// No room number higher than preferred, use lower</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="n">lower</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Compare absolute differences to find the closest room</span>
                <span class="kt">int</span> <span class="n">lowDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">preferred</span> <span class="o">-</span> <span class="n">lower</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">highDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">preferred</span> <span class="o">-</span> <span class="n">higher</span><span class="o">);</span>

                <span class="c1">// Choose the closer room</span>
                <span class="c1">// If distances are equal, prefer the lower room number</span>
                <span class="n">answer</span><span class="o">[</span><span class="n">queryIdx</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">lowDiff</span> <span class="o">&lt;=</span> <span class="n">highDiff</span><span class="o">)</span> <span class="o">?</span> <span class="n">lower</span> <span class="o">:</span> <span class="n">higher</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test Case 1: Basic scenario</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">closestRoom</span><span class="o">(</span><span class="n">rooms1</span><span class="o">,</span> <span class="n">queries1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span>
        <span class="c1">// Expected: [3, -1, 3]</span>

        <span class="c1">// Test Case 2: More complex scenario</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">4</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">},</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">5</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">closestRoom</span><span class="o">(</span><span class="n">rooms2</span><span class="o">,</span> <span class="n">queries2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span>
        <span class="c1">// Expected: [2, 1, 3]</span>

        <span class="c1">// Test Case 3: Edge cases</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">rooms3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">10</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">20</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">30</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">9</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">21</span><span class="o">},</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">40</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">closestRoom</span><span class="o">(</span><span class="n">rooms3</span><span class="o">,</span> <span class="n">queries3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result3</span><span class="o">));</span>
        <span class="c1">// Expected: [1, 3, -1]</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><category term="Hard"/><summary type="html"><![CDATA[There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique. You are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that: The room has a size of at least minSizej, and abs(id - preferredj) is minimized, where abs(x) is the absolute value of x. If there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1. Return an array answer of length k where answer[j] contains the answer to the jth query.]]></summary></entry><entry><title type="html">658. Find K Closest Elements</title><link href="https://zhengstar94.github.io//blog/2024/FindKClosestElements/" rel="alternate" type="text/html" title="658. Find K Closest Elements"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindKClosestElements</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindKClosestElements/"><![CDATA[<ul> <li>Given a <strong>sorted</strong> integer array <code class="language-plaintext highlighter-rouge">arr</code>, two integers <code class="language-plaintext highlighter-rouge">k</code> and <code class="language-plaintext highlighter-rouge">x</code>, return the <code class="language-plaintext highlighter-rouge">k</code> closest integers to <code class="language-plaintext highlighter-rouge">x</code> in the array. The result should also be sorted in ascending order.</li> <li>An integer <code class="language-plaintext highlighter-rouge">a</code> is closer to <code class="language-plaintext highlighter-rouge">x</code> than an integer <code class="language-plaintext highlighter-rouge">b</code> if: <ul> <li><code class="language-plaintext highlighter-rouge">|a - x| &lt; |b - x|</code>, or</li> <li><code class="language-plaintext highlighter-rouge">|a - x| == |b - x|</code> and <code class="language-plaintext highlighter-rouge">a &lt; b</code></li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,2,3,4,5], k = 4, x = 3

Output: [1,2,3,4]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,1,2,3,4,5], k = 4, x = -1

Output: [1,1,2,3]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(k) time | O(k) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.BinarySearch</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindKClosestElements</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">findClosestElements</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Loop until the subarray has exactly k elements</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">&gt;=</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Compare the distances between arr[left] and arr[right] to x</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">-</span> <span class="n">x</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">-</span> <span class="n">x</span><span class="o">))</span> <span class="o">{</span>
                <span class="c1">// If the left element is closer or equal to x, move the right pointer left</span>
                <span class="n">right</span><span class="o">--;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Otherwise, move the left pointer right</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Create a list to store the k closest elements</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">// Add the elements between left and right pointers to the result</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr1</span><span class="o">,</span> <span class="n">k1</span><span class="o">,</span> <span class="n">x1</span><span class="o">));</span>
        <span class="c1">// Expected output: [1, 2, 3, 4]</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x2</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr2</span><span class="o">,</span> <span class="n">k2</span><span class="o">,</span> <span class="n">x2</span><span class="o">));</span>
        <span class="c1">// Expected output: [1, 1, 2, 3]</span>

        <span class="c1">// Test case 3</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x3</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr3</span><span class="o">,</span> <span class="n">k3</span><span class="o">,</span> <span class="n">x3</span><span class="o">));</span>
        <span class="c1">// Expected output: [3, 5, 7]</span>

        <span class="c1">// Test case 4</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k4</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x4</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr4</span><span class="o">,</span> <span class="n">k4</span><span class="o">,</span> <span class="n">x4</span><span class="o">));</span>
        <span class="c1">// Expected output: [10, 15]</span>

        <span class="c1">// Test case 5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k5</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">x5</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 5: "</span> <span class="o">+</span> <span class="n">findClosestElements</span><span class="o">(</span><span class="n">arr5</span><span class="o">,</span> <span class="n">k5</span><span class="o">,</span> <span class="n">x5</span><span class="o">));</span>
        <span class="c1">// Expected output: [1, 2, 3]</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Binary Search"/><category term="Medium"/><summary type="html"><![CDATA[Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order. An integer a is closer to x than an integer b if: |a - x| &lt; |b - x|, or |a - x| == |b - x| and a &lt; b]]></summary></entry><entry><title type="html">1539. Kth Missing Positive Number</title><link href="https://zhengstar94.github.io//blog/2024/KthMissingPositiveNumber/" rel="alternate" type="text/html" title="1539. Kth Missing Positive Number"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/KthMissingPositiveNumber</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/KthMissingPositiveNumber/"><![CDATA[<ul> <li>Given an array <code class="language-plaintext highlighter-rouge">arr</code> of positive integers sorted in a <strong>strictly increasing order</strong>, and an integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>Return <em>the</em> <code class="language-plaintext highlighter-rouge">kth</code> <em><strong>positive</strong> integer that is <strong>missing</strong> from this array.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(log(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.BinarySearch</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">KthMissingPositiveNumber</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findKthPositive</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Binary search to find the first position where the number of missing numbers &gt;= k</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
            <span class="c1">// Calculate the number of missing numbers up to arr[mid]</span>
            <span class="kt">int</span> <span class="n">missingCount</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">-</span> <span class="o">(</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">missingCount</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the missing count is less than k, search to the right half</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// If the missing count is greater or equal to k, search to the left half</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// When the loop ends, left is the position where the first missing count &gt;= k is found</span>
        <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="n">k</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findKthPositive</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">11</span><span class="o">},</span> <span class="mi">5</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Binary Search"/><category term="Easy"/><summary type="html"><![CDATA[Given an array arr of positive integers sorted in a strictly increasing order, and an integer k. Return the kth positive integer that is missing from this array.]]></summary></entry><entry><title type="html">1792. Maximum Average Pass Ratio</title><link href="https://zhengstar94.github.io//blog/2024/MaximumAveragePassRatio/" rel="alternate" type="text/html" title="1792. Maximum Average Pass Ratio"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MaximumAveragePassRatio</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MaximumAveragePassRatio/"><![CDATA[<ul> <li> <p>There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array <code class="language-plaintext highlighter-rouge">classes</code>, where <code class="language-plaintext highlighter-rouge">classes[i] = [passi, totali]</code>. You know beforehand that in the <code class="language-plaintext highlighter-rouge">ith</code> class, there are <code class="language-plaintext highlighter-rouge">totali</code> total students, but only <code class="language-plaintext highlighter-rouge">passi</code> number of students will pass the exam.</p> </li> <li> <p>You are also given an integer <code class="language-plaintext highlighter-rouge">extraStudents</code>. There are another <code class="language-plaintext highlighter-rouge">extraStudents</code> brilliant students that are <strong>guaranteed</strong> to pass the exam of any class they are assigned to. You want to assign each of the <code class="language-plaintext highlighter-rouge">extraStudents</code> students to a class in a way that <strong>maximizes</strong> the <strong>average</strong> pass ratio across <strong>all</strong> the classes.</p> </li> <li> <p>The <strong>pass ratio</strong> of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The <strong>average pass ratio</strong> is the sum of pass ratios of all the classes divided by the number of the classes.</p> <p>Return <em>the <strong>maximum</strong> possible average pass ratio after assigning the</em> <code class="language-plaintext highlighter-rouge">extraStudents</code> <em>students.</em> Answers within 10-5` of the actual answer will be accepted.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: classes = [ [ 1,2],[3,5],[2,2 ] ], extraStudents = 2
Output: 0.78333
Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: classes = [ [ 2,4],[3,9],[4,5],[2,10 ] ], extraStudents = 4
Output: 0.53485
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O((n+k)log(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumAveragePassRatio</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">maxAverageRatio</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">classes</span><span class="o">,</span> <span class="kt">int</span> <span class="n">extraStudents</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">classes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Custom comparator to prioritize classes based on "marginal gain" in pass ratio</span>
        <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">[]&gt;</span> <span class="n">pq</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">[]&gt;(</span>
                <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">[]&gt;(){</span>
                    <span class="nd">@Override</span>
                    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="kt">double</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span><span class="o">[]</span> <span class="n">b</span> <span class="o">){</span>
                        <span class="c1">// Calculate the improvement in pass ratio when adding one student</span>
                        <span class="c1">// For class `a`: (a[0]+1)/(a[1]+1) - a[0]/a[1]</span>
                        <span class="c1">// Example: If a class improves from 1/2 to 2/3:</span>
                        <span class="c1">// Original ratio: 1/2 = 0.5</span>
                        <span class="c1">// New ratio: 2/3 ≈ 0.667</span>
                        <span class="c1">// Gain: 0.667 - 0.5 = 0.167</span>
                        <span class="kt">double</span> <span class="n">diffa</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="mi">1</span><span class="o">)/(</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]/</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
                        <span class="kt">double</span> <span class="n">diffb</span> <span class="o">=</span> <span class="o">(</span><span class="n">b</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="mi">1</span><span class="o">)/(</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="n">b</span><span class="o">[</span><span class="mi">0</span><span class="o">]/</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

                        <span class="c1">// Comparison logic:</span>
                        <span class="c1">// 1. If the gain is equal, return 0</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">diffa</span> <span class="o">==</span> <span class="n">diffb</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
                        <span class="o">}</span>
                        <span class="c1">// 2. If the gain for class `a` is greater than `b`, return -1</span>
                        <span class="c1">// PriorityQueue is a min-heap, so returning -1 means `a` has higher priority</span>
                        <span class="c1">// We want the class with the maximum gain to be at the front</span>
                        <span class="k">return</span> <span class="n">diffa</span> <span class="o">&gt;</span> <span class="n">diffb</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
        <span class="o">);</span>
        <span class="c1">// Add all class information to the priority queue</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="kt">double</span><span class="o">[]</span> <span class="o">{</span>
                    <span class="nc">Double</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">classes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]),</span>
                    <span class="nc">Double</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">classes</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">])</span>
            <span class="o">});</span>
        <span class="o">}</span>

        <span class="c1">// Allocate additional students</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">extraStudents</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">double</span><span class="o">[]</span> <span class="n">p</span> <span class="o">=</span> <span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span> <span class="c1">// Remove the class with the highest marginal gain</span>

            <span class="n">p</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Increment passed students</span>
            <span class="n">p</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Increment total students</span>

            <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">p</span><span class="o">);</span> <span class="c1">// Re-add the updated class back to the queue</span>
            <span class="n">extraStudents</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="c1">// Calculate the final average pass ratio</span>
        <span class="kt">double</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">double</span><span class="o">[]</span> <span class="n">p</span> <span class="o">:</span> <span class="n">pq</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">p</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">/</span> <span class="n">p</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c1">// Return the average pass ratio</span>
        <span class="k">return</span> <span class="n">res</span> <span class="o">/</span> <span class="nc">Double</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">len</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test case 1: Three classes, two extra students</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">classes1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">},{</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">},{</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span> <span class="n">extraStudents1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">maxAverageRatio</span><span class="o">(</span><span class="n">classes1</span><span class="o">,</span> <span class="n">extraStudents1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>

        <span class="c1">// Test case 2: Four classes, four extra students</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">classes2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">},{</span><span class="mi">3</span><span class="o">,</span><span class="mi">9</span><span class="o">},{</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">},{</span><span class="mi">2</span><span class="o">,</span><span class="mi">10</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span> <span class="n">extraStudents2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">maxAverageRatio</span><span class="o">(</span><span class="n">classes2</span><span class="o">,</span> <span class="n">extraStudents2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>

        <span class="c1">// Boundary test case: Only one class</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">classes3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span><span class="mi">3</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">int</span> <span class="n">extraStudents3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">double</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">maxAverageRatio</span><span class="o">(</span><span class="n">classes3</span><span class="o">,</span> <span class="n">extraStudents3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Medium"/><summary type="html"><![CDATA[There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.]]></summary></entry><entry><title type="html">1338. Reduce Array Size to The Half</title><link href="https://zhengstar94.github.io//blog/2024/ReduceArraySizeToTheHalf/" rel="alternate" type="text/html" title="1338. Reduce Array Size to The Half"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ReduceArraySizeToTheHalf</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ReduceArraySizeToTheHalf/"><![CDATA[<ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">arr</code>. You can choose a set of integers and remove all the occurrences of these integers in the array.</li> <li>Return <em>the minimum size of the set so that <strong>at least</strong> half of the integers of the array are removed</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).
Possible sets of size 2 are {3,5},{3,2},{5,2}.
Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [7,7,7,7,7,7]
Output: 1
Explanation: The only possible set you can choose is {7}. This will make the new array empty.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n) time | O(m) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReduceArraySizeToTheHalf</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minSetSize</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create a frequency array to count occurrences of each number</span>
        <span class="c1">// Size 10001 to accommodate the problem's given number range</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10001</span><span class="o">];</span>

        <span class="c1">// Count the frequency of each number in the input array</span>
        <span class="c1">// For each number, increment its count in the frequency array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">nums</span><span class="o">[</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]]++;</span>
        <span class="o">}</span>

        <span class="c1">// Sort the frequency array in ascending order</span>
        <span class="c1">// This allows us to process numbers from highest to lowest frequency</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>

        <span class="c1">// Variable to track the count of elements removed</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate from the end of the array (highest frequencies)</span>
        <span class="c1">// Work backwards to minimize the number of unique elements removed</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="c1">// Add the current frequency to the total count of removed elements</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="n">cnt</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>

            <span class="c1">// Check if the removed elements exceed half the original array length</span>
            <span class="c1">// If so, return the number of unique elements removed</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">&gt;=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">/</span><span class="mi">2</span><span class="o">){</span>
                <span class="c1">// Calculate the number of unique elements removed</span>
                <span class="c1">// nums.length - i + 1 gives the count of frequency groups removed</span>
                <span class="k">return</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If no solution is found, return the entire array length</span>
        <span class="c1">// This is a fallback scenario, though unlikely to occur given the problem constraints</span>
        <span class="k">return</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Array with different elements</span>
        <span class="c1">// Demonstrates removing elements to reduce array size</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr1</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test Case 2: Array with all same elements</span>
        <span class="c1">// Shows handling of uniform frequency elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr2</span><span class="o">));</span> <span class="c1">// Expected output: 1</span>

        <span class="c1">// Test Case 3: More complex array with varied frequencies</span>
        <span class="c1">// Tests scenario with multiple unique elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr3</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>

        <span class="c1">// Test Case 4: Large data range</span>
        <span class="c1">// Verifies the solution works with a larger, more diverse input</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span><span class="mi">77</span><span class="o">,</span><span class="mi">63</span><span class="o">,</span><span class="mi">22</span><span class="o">,</span><span class="mi">92</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">14</span><span class="o">,</span><span class="mi">54</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">38</span><span class="o">,</span><span class="mi">18</span><span class="o">,</span><span class="mi">64</span><span class="o">,</span><span class="mi">92</span><span class="o">,</span><span class="mi">53</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">57</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">76</span><span class="o">,</span><span class="mi">40</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4 Result: "</span> <span class="o">+</span> <span class="n">minSetSize</span><span class="o">(</span><span class="n">arr4</span><span class="o">));</span> <span class="c1">// Expected output result</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array. Return the minimum size of the set so that at least half of the integers of the array are removed.]]></summary></entry><entry><title type="html">2762. Continuous Subarrays</title><link href="https://zhengstar94.github.io//blog/2024/ContinuousSubarrays/" rel="alternate" type="text/html" title="2762. Continuous Subarrays"/><published>2024-12-14T00:00:00+00:00</published><updated>2024-12-14T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ContinuousSubarrays</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ContinuousSubarrays/"><![CDATA[<ul> <li> <p>You are given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">nums</code>. A subarray of <code class="language-plaintext highlighter-rouge">nums</code> is called <strong>continuous</strong> if:</p> <ul> <li>Let <code class="language-plaintext highlighter-rouge">i</code>, <code class="language-plaintext highlighter-rouge">i + 1</code>, …, <code class="language-plaintext highlighter-rouge">j</code> be the indices in the subarray. Then, for each pair of indices <code class="language-plaintext highlighter-rouge">i &lt;= i1, i2 &lt;= j</code>, <code class="language-plaintext highlighter-rouge">0 &lt;= |nums[i1] - nums[i2]| &lt;= 2</code>.</li> </ul> </li> <li> <p>Return <em>the total number of <strong>continuous</strong> subarrays.</em></p> <p>A subarray is a contiguous <strong>non-empty</strong> sequence of elements within an array.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [5,4,2,4]
Output: 8
Explanation: 
Continuous subarray of size 1: [5], [4], [2], [4].
Continuous subarray of size 2: [5,4], [4,2], [2,4].
Continuous subarray of size 3: [4,2,4].
Thereare no subarrys of size 4.
Total continuous subarrays = 4 + 3 + 1 = 8.
It can be shown that there are no more continuous subarrays.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3]
Output: 6
Explanation: 
Continuous subarray of size 1: [1], [2], [3].
Continuous subarray of size 2: [1,2], [2,3].
Continuous subarray of size 3: [1,2,3].
Total continuous subarrays = 3 + 2 + 1 = 6.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(k) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/14
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContinuousSubarrays</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">continuousSubarrays</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Left boundary pointer, initially set to 0</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Variable to store the total count of continuous subarrays</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Use a TreeMap to maintain elements in the window and their frequencies</span>
        <span class="c1">// TreeMap allows quick access to the maximum and minimum values</span>
        <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Iterate through the array using the right boundary pointer</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Add the current element to the window, increasing its frequency</span>
            <span class="c1">// If the element is not present, initialize its frequency to 1; otherwise, increment it</span>
            <span class="n">t</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">],</span> <span class="n">t</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">],</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>

            <span class="c1">// Shrink the window when the difference between the maximum and minimum values exceeds 2</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">lastKey</span><span class="o">()</span> <span class="o">-</span> <span class="n">t</span><span class="o">.</span><span class="na">firstKey</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Get the element at the left boundary</span>
                <span class="kt">int</span> <span class="n">key</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">++];</span>

                <span class="c1">// If the element appears only once, remove it from the TreeMap</span>
                <span class="c1">// Otherwise, decrease its frequency</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">t</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">t</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">t</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// Calculate the number of continuous subarrays ending at the current right boundary</span>
            <span class="c1">// right - left + 1 represents all possible subarrays in the current window</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Return the total count of continuous subarrays</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test case 1: Example array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">continuousSubarrays</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span>
        <span class="c1">// Expected output: 8</span>

        <span class="c1">// Test case 2: Increasing sequence</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">continuousSubarrays</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span>
        <span class="c1">// Expected output: 6</span>

        <span class="c1">// Test case 3: All elements are the same</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">continuousSubarrays</span><span class="o">(</span><span class="n">nums3</span><span class="o">));</span>
        <span class="c1">// Expected output: 10</span>

        <span class="c1">// Test case 4: Array with large differences</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4: "</span> <span class="o">+</span> <span class="n">continuousSubarrays</span><span class="o">(</span><span class="n">nums4</span><span class="o">));</span>
        <span class="c1">// Expected output: 10</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Medium"/><summary type="html"><![CDATA[You are given a 0-indexed integer array nums. A subarray of nums is called continuous if:]]></summary></entry><entry><title type="html">169. Majority Element</title><link href="https://zhengstar94.github.io//blog/2024/MajorityElement/" rel="alternate" type="text/html" title="169. Majority Element"/><published>2024-12-14T00:00:00+00:00</published><updated>2024-12-14T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MajorityElement</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MajorityElement/"><![CDATA[<ul> <li>Given an array <code class="language-plaintext highlighter-rouge">nums</code> of size <code class="language-plaintext highlighter-rouge">n</code>, return <em>the majority element</em>.</li> <li>The majority element is the element that appears more than <code class="language-plaintext highlighter-rouge">⌊n / 2⌋</code> times. You may assume that the majority element always exists in the array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,2,3]
Output: 3
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,2,1,1,1,2,2]
Output: 2
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/14
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MajorityElement</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">majorityElement</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize the candidate for the majority element</span>
        <span class="kt">int</span> <span class="n">candidate</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        <span class="c1">// Counter to track the "votes" for the candidate</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// First pass: Identify the majority candidate using Moore's Voting Algorithm</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If count reaches 0, we select the current number as a new candidate</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">candidate</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// Update the count:</span>
            <span class="c1">// - If the current number equals the candidate, increase the count</span>
            <span class="c1">// - Otherwise, decrease the count</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">candidate</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Second pass: Verify that the candidate is indeed the majority element</span>
        <span class="c1">// This step is optional if the problem guarantees a majority element exists</span>
        <span class="kt">int</span> <span class="n">verifyCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="n">candidate</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">verifyCount</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Optional verification: Uncomment if the problem does not guarantee a majority element</span>
        <span class="c1">// if (verifyCount &gt; nums.length / 2) return candidate;</span>

        <span class="c1">// Return the majority candidate</span>
        <span class="k">return</span> <span class="n">candidate</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Majority Element: "</span> <span class="o">+</span> <span class="n">majorityElement</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span> <span class="c1">// Output: 3</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Majority Element: "</span> <span class="o">+</span> <span class="n">majorityElement</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span> <span class="c1">// Output: 2</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[Given an array nums of size n, return the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.]]></summary></entry><entry><title type="html">3264. Final Array State After K Multiplication Operations I</title><link href="https://zhengstar94.github.io//blog/2024/FinalArrayStateAfterKMultiplicationOperationsI/" rel="alternate" type="text/html" title="3264. Final Array State After K Multiplication Operations I"/><published>2024-12-13T00:00:00+00:00</published><updated>2024-12-13T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FinalArrayStateAfterKMultiplicationOperationsI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FinalArrayStateAfterKMultiplicationOperationsI/"><![CDATA[<ul> <li> <p>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, an integer <code class="language-plaintext highlighter-rouge">k</code>, and an integer <code class="language-plaintext highlighter-rouge">multiplier</code>.</p> <p>You need to perform <code class="language-plaintext highlighter-rouge">k</code> operations on <code class="language-plaintext highlighter-rouge">nums</code>. In each operation:</p> <ul> <li>Find the <strong>minimum</strong> value <code class="language-plaintext highlighter-rouge">x</code> in <code class="language-plaintext highlighter-rouge">nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong>.</li> <li>Replace the selected minimum value <code class="language-plaintext highlighter-rouge">x</code> with <code class="language-plaintext highlighter-rouge">x * multiplier</code>.</li> </ul> </li> <li> <p>Return an integer array denoting the <em>final state</em> of <code class="language-plaintext highlighter-rouge">nums</code> after performing all <code class="language-plaintext highlighter-rouge">k</code> operations.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,3,5,6], k = 5, multiplier = 2

Output: [8,4,6,5,6]

Explanation:

Operation	Result
After operation 1	[2, 2, 3, 5, 6]
After operation 2	[4, 2, 3, 5, 6]
After operation 3	[4, 4, 3, 5, 6]
After operation 4	[4, 4, 6, 5, 6]
After operation 5	[8, 4, 6, 5, 6]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2], k = 3, multiplier = 4

Output: [16,8]

Explanation:

Operation	Result
After operation 1	[4, 2]
After operation 2	[4, 8]
After operation 3	[16, 8]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * k) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/13
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinalArrayStateAfterKMultiplicationOperationsI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getFinalState</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="kt">int</span> <span class="n">multiplier</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Perform k multiplication operations</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Initialize minimum value to maximum integer</span>
            <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>

            <span class="c1">// Initialize index of minimum value</span>
            <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

            <span class="c1">// Find the minimum value and its index in the array</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// Update minimum value and its index if a smaller value is found</span>
                <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">){</span>
                    <span class="n">minIndex</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                    <span class="n">min</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// Multiply the minimum value by the multiplier</span>
            <span class="n">nums</span><span class="o">[</span><span class="n">minIndex</span><span class="o">]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">*</span> <span class="n">multiplier</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">nums</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">multiplier1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">getFinalState</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">k1</span><span class="o">,</span> <span class="n">multiplier1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">multiplier2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">getFinalState</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">k2</span><span class="o">,</span> <span class="n">multiplier2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given an integer array nums, an integer k, and an integer multiplier.]]></summary></entry><entry><title type="html">2593. Find Score of an Array After Marking All Elements</title><link href="https://zhengstar94.github.io//blog/2024/FindScoreOfAnArrayAfterMarkingAllElements/" rel="alternate" type="text/html" title="2593. Find Score of an Array After Marking All Elements"/><published>2024-12-13T00:00:00+00:00</published><updated>2024-12-13T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindScoreOfAnArrayAfterMarkingAllElements</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindScoreOfAnArrayAfterMarkingAllElements/"><![CDATA[<ul> <li>You are given an array <code class="language-plaintext highlighter-rouge">nums</code> consisting of positive integers.</li> <li>Starting with <code class="language-plaintext highlighter-rouge">score = 0</code>, apply the following algorithm: <ul> <li>Find the <strong>minimum</strong> value <code class="language-plaintext highlighter-rouge">x</code> in <code class="language-plaintext highlighter-rouge">nums</code>. If there are multiple occurrences of the minimum value, select the one that appears <strong>first</strong>.</li> <li>Replace the selected minimum value <code class="language-plaintext highlighter-rouge">x</code> with <code class="language-plaintext highlighter-rouge">x * multiplier</code>.</li> </ul> </li> <li>Return <em>the score you get after applying the above algorithm</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,3,4,5,2]
Output: 7
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].
- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].
- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].
Our score is 1 + 2 + 4 = 7.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,3,5,1,3,2]
Output: 5
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].
- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].
- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].
Our score is 1 + 2 + 2 = 5.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/13
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindScoreOfAnArrayAfterMarkingAllElements</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">findScore</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of the input array</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Create an integer array to store the indices of the original array</span>
        <span class="nc">Integer</span><span class="o">[]</span> <span class="n">ids</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

        <span class="c1">// Initialize the index array with their corresponding indices</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">ids</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Sort the index array based on the values in the original array</span>
        <span class="c1">// This allows us to process elements in ascending order of their values</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ids</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>

        <span class="c1">// Initialize the total score</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Create a boolean array to mark visited elements.</span>
        <span class="c1">// The extra two elements are used to handle boundary cases.</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">2</span><span class="o">];</span>

        <span class="c1">// Iterate over the sorted indices</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">ids</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If the current element and its right neighbor haven't been visited</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                <span class="c1">// Mark the current element and its two neighbors as visited</span>
                <span class="n">visited</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">visited</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

                <span class="c1">// Add the value of the current element to the total score</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the total score</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>
        <span class="kt">long</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">findScore</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>
        <span class="kt">long</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">findScore</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given an array nums consisting of positive integers. Starting with score=0, apply the following algorithm: Find the minimum value x in nums. If there are multiple occurrences of the minimum value, select the one that appears first. Replace the selected minimum value x with x * multiplier. Return the score you get after applying the above algorithm.]]></summary></entry></feed>