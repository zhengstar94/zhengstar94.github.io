<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-09T15:49:00+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">3297. Count Substrings That Can Be Rearranged to Contain a String I</title><link href="https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringI/" rel="alternate" type="text/html" title="3297. Count Substrings That Can Be Rearranged to Contain a String I"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringI/"><![CDATA[<ul> <li>You are given two strings <code class="language-plaintext highlighter-rouge">word1</code> and <code class="language-plaintext highlighter-rouge">word2</code>.</li> <li>A string <code class="language-plaintext highlighter-rouge">x</code> is called <strong>valid</strong> if <code class="language-plaintext highlighter-rouge">x</code> can be rearranged to have <code class="language-plaintext highlighter-rouge">word2</code> as a prefix.</li> <li>Return the total number of <strong>valid</strong> substrings of <code class="language-plaintext highlighter-rouge">word1</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "bcca", word2 = "abc"
Output: 1

Explanation:

The only valid substring is "bcca" which can be rearranged to "abcc" having "abc" as a prefix.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "abcabc", word2 = "abc"
Output: 10

Explanation:

All the substrings except  substrings of size 1 and size 2 are valid.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "abcabc", word2 = "aaabc"

Output: 0
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountSubstringsThatCanBeRearrangedToContainAStringI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">validSubstringCount</span><span class="o">(</span><span class="nc">String</span> <span class="n">word1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">word2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Early return if word1 is shorter than word2, as no valid substring possible</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">word1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">word2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Convert strings to char arrays for efficient access</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="n">word1</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">word2</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>

        <span class="c1">// Array to track the difference in character frequencies</span>
        <span class="c1">// diff[i] &gt; 0 means we need more of character i</span>
        <span class="c1">// diff[i] = 0 means we have exactly enough of character i</span>
        <span class="c1">// diff[i] &lt; 0 means we have excess of character i</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">diff</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>

        <span class="c1">// Initialize diff array with character frequencies from word2</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="c1">// Count how many characters we still need</span>
        <span class="c1">// less represents the number of unique characters we still need</span>
        <span class="kt">int</span> <span class="n">less</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">:</span> <span class="n">diff</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">less</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Variables to track results and window</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>     <span class="c1">// Total count of valid substrings</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>     <span class="c1">// Left boundary of sliding window</span>

        <span class="c1">// Process each character in word1</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Add current character to window by decreasing its needed count</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]--;</span>

            <span class="c1">// If after adding this character, its frequency matches exactly what we need</span>
            <span class="c1">// (diff becomes 0), we have one less character to worry about</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">less</span><span class="o">--;</span>
            <span class="o">}</span>

            <span class="c1">// When less == 0, we have all characters we need</span>
            <span class="c1">// Try to minimize the window by removing characters from left</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">less</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Get the character we're about to remove</span>
                <span class="kt">char</span> <span class="n">outChar</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">left</span><span class="o">++];</span>

                <span class="c1">// If this character's count was exactly what we needed (diff == 0)</span>
                <span class="c1">// removing it will make it deficient, so increase less</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">diff</span><span class="o">[</span><span class="n">outChar</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">less</span><span class="o">++;</span>
                <span class="o">}</span>
                <span class="c1">// Update diff array as we remove the character</span>
                <span class="n">diff</span><span class="o">[</span><span class="n">outChar</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
            <span class="o">}</span>

            <span class="c1">// Add left to answer - this is crucial!</span>
            <span class="c1">// left represents how many valid substrings end at the current position</span>
            <span class="c1">// because we can start the substring at any position from 0 to left-1</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">left</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Expect 1 valid substring</span>
        <span class="nc">String</span> <span class="n">word1_1</span> <span class="o">=</span> <span class="s">"bcca"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_1</span><span class="o">,</span> <span class="n">word2_1</span><span class="o">));</span> <span class="c1">// Expected: 1</span>

        <span class="c1">// Test case 2: Expect 10 valid substrings</span>
        <span class="nc">String</span> <span class="n">word1_2</span> <span class="o">=</span> <span class="s">"abcabc"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_2</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_2</span><span class="o">,</span> <span class="n">word2_2</span><span class="o">));</span> <span class="c1">// Expected: 10</span>

        <span class="c1">// Test case 3: Expect 0 valid substrings</span>
        <span class="nc">String</span> <span class="n">word1_3</span> <span class="o">=</span> <span class="s">"abcabc"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_3</span> <span class="o">=</span> <span class="s">"aaabc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_3</span><span class="o">,</span> <span class="n">word2_3</span><span class="o">));</span> <span class="c1">// Expected: 0</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Medium"/><summary type="html"><![CDATA[You are given two strings word1 and word2. A string x is called valid if x can be rearranged to have word2 as a prefix. Return the total number of valid substrings of word1.]]></summary></entry><entry><title type="html">2185. Counting Words With a Given Prefix</title><link href="https://zhengstar94.github.io//blog/2025/CountingWordsWithAGivenPrefix/" rel="alternate" type="text/html" title="2185. Counting Words With a Given Prefix"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountingWordsWithAGivenPrefix</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountingWordsWithAGivenPrefix/"><![CDATA[<ul> <li>You are given an array of strings <code class="language-plaintext highlighter-rouge">words</code> and a string <code class="language-plaintext highlighter-rouge">pref</code>.</li> <li>Return <em>the number of strings in</em> <code class="language-plaintext highlighter-rouge">words</code> <em>that contain</em> <code class="language-plaintext highlighter-rouge">pref</code> <em>as a <strong>prefix</strong></em>.</li> <li>A <strong>prefix</strong> of a string <code class="language-plaintext highlighter-rouge">s</code> is any leading contiguous substring of <code class="language-plaintext highlighter-rouge">s</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["pay","attention","practice","attend"], pref = "at"
Output: 2
Explanation: The 2 strings that contain "at" as a prefix are: "attention" and "attend".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["leetcode","win","loops","success"], pref = "code"
Output: 0
Explanation: There are no strings that contain "code" as a prefix.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountingWordsWithAGivenPrefix</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">prefixCount</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">,</span> <span class="nc">String</span> <span class="n">pref</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">pref</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"pay"</span><span class="o">,</span> <span class="s">"attention"</span><span class="o">,</span> <span class="s">"practice"</span><span class="o">,</span> <span class="s">"attend"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">pref1</span> <span class="o">=</span> <span class="s">"at"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">prefixCount</span><span class="o">(</span><span class="n">words1</span><span class="o">,</span> <span class="n">pref1</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"leetcode"</span><span class="o">,</span> <span class="s">"win"</span><span class="o">,</span> <span class="s">"loops"</span><span class="o">,</span> <span class="s">"success"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">pref2</span> <span class="o">=</span> <span class="s">"code"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">prefixCount</span><span class="o">(</span><span class="n">words2</span><span class="o">,</span> <span class="n">pref2</span><span class="o">));</span> <span class="c1">// Expected output: 0</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"apple"</span><span class="o">,</span> <span class="s">"app"</span><span class="o">,</span> <span class="s">"apartment"</span><span class="o">,</span> <span class="s">"ape"</span><span class="o">,</span> <span class="s">"banana"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">pref3</span> <span class="o">=</span> <span class="s">"ap"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">prefixCount</span><span class="o">(</span><span class="n">words3</span><span class="o">,</span> <span class="n">pref3</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[You are given an array of strings words and a string pref. Return the number of strings in words that contain pref as a prefix. A prefix of a string s is any leading contiguous substring of s.]]></summary></entry><entry><title type="html">1984. Minimum Difference Between Highest and Lowest of K Scores</title><link href="https://zhengstar94.github.io//blog/2025/MinimumDifferenceBetweenHighestAndLowestOfKScores/" rel="alternate" type="text/html" title="1984. Minimum Difference Between Highest and Lowest of K Scores"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MinimumDifferenceBetweenHighestAndLowestOfKScores</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MinimumDifferenceBetweenHighestAndLowestOfKScores/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">nums</code>, where <code class="language-plaintext highlighter-rouge">nums[i]</code> represents the score of the <code class="language-plaintext highlighter-rouge">ith</code> student. You are also given an integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>Pick the scores of any <code class="language-plaintext highlighter-rouge">k</code> students from the array so that the <strong>difference</strong> between the <strong>highest</strong> and the <strong>lowest</strong> of the <code class="language-plaintext highlighter-rouge">k</code> scores is <strong>minimized</strong>.</li> <li>Return <em>the <strong>minimum</strong> possible difference</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [90], k = 1
Output: 0
Explanation: There is one way to pick score(s) of one student:
- [90]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [9,4,1,7], k = 2
Output: 2
Explanation: There are six ways to pick score(s) of two students:
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumDifferenceBetweenHighestAndLowestOfKScores</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minimumDifference</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases:</span>
        <span class="c1">// 1. If array is null</span>
        <span class="c1">// 2. If array length is less than k</span>
        <span class="c1">// 3. If k is 1 or less (difference will always be 0)</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">||</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Sort the array to ensure that within any window of size k,</span>
        <span class="c1">// the maximum will be at the right end and minimum at the left end</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>

        <span class="c1">// Initialize minDiff with maximum possible integer value</span>
        <span class="kt">int</span> <span class="n">minDiff</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>

        <span class="c1">// Sliding window implementation:</span>
        <span class="c1">// i represents the start of each window</span>
        <span class="c1">// i + k - 1 represents the end of each window</span>
        <span class="c1">// We use &lt;= because we want to include the last possible window</span>
        <span class="c1">// For example: if array length is 6 and k is 3,</span>
        <span class="c1">// we need to check windows starting at index 0,1,2,3 (6-3=3)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Calculate difference between max and min in current window</span>
            <span class="c1">// nums[i + k - 1] is the maximum (right end of window)</span>
            <span class="c1">// nums[i] is the minimum (left end of window)</span>
            <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="c1">// Update minDiff if current difference is smaller</span>
            <span class="n">minDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minDiff</span><span class="o">,</span> <span class="n">diff</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">minDiff</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Main method to test the solution with various test cases
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Single element array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">90</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">minimumDifference</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span> <span class="c1">// Expected output: 0</span>

        <span class="c1">// Test case 2: Small array with multiple elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">7</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">minimumDifference</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Easy"/><summary type="html"><![CDATA[You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k. Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized. Return the minimum possible difference.]]></summary></entry><entry><title type="html">1016. Binary String With Substrings Representing 1 To N</title><link href="https://zhengstar94.github.io//blog/2025/BinaryStringWithSubstringsRepresenting1ToN/" rel="alternate" type="text/html" title="1016. Binary String With Substrings Representing 1 To N"/><published>2025-01-08T00:00:00+00:00</published><updated>2025-01-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/BinaryStringWithSubstringsRepresenting1ToN</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/BinaryStringWithSubstringsRepresenting1ToN/"><![CDATA[<ul> <li>Given a binary string <code class="language-plaintext highlighter-rouge">s</code> and a positive integer <code class="language-plaintext highlighter-rouge">n</code>, return <code class="language-plaintext highlighter-rouge">true</code> <em>if the binary representation of all the integers in the range</em> <code class="language-plaintext highlighter-rouge">[1, n]</code> <em>are <strong>substrings</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code><em>, or</em> <code class="language-plaintext highlighter-rouge">false</code> <em>otherwise</em>.</li> <li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "0110", n = 3
Output: true
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "0110", n = 4
Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * L) time | O(log(n)) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryStringWithSubstringsRepresenting1ToN</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">queryString</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Check if string s contains binary representation of all numbers from 0 to n</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">binary</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">s</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">binary</span><span class="o">)){</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"0110"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s1</span> <span class="o">+</span> <span class="s">"\", n = "</span> <span class="o">+</span> <span class="n">n1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">queryString</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">n1</span><span class="o">));</span>  <span class="c1">// Should output true</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"0110"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s2</span> <span class="o">+</span> <span class="s">"\", n = "</span> <span class="o">+</span> <span class="n">n2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">queryString</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">n2</span><span class="o">));</span>  <span class="c1">// Should output false</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"1111000"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s3</span> <span class="o">+</span> <span class="s">"\", n = "</span> <span class="o">+</span> <span class="n">n3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">queryString</span><span class="o">(</span><span class="n">s3</span><span class="o">,</span> <span class="n">n3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise. A substring is a contiguous sequence of characters within a string.]]></summary></entry><entry><title type="html">3042. Count Prefix and Suffix Pairs I</title><link href="https://zhengstar94.github.io//blog/2025/CountPrefixAndSuffixPairsI/" rel="alternate" type="text/html" title="3042. Count Prefix and Suffix Pairs I"/><published>2025-01-08T00:00:00+00:00</published><updated>2025-01-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountPrefixAndSuffixPairsI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountPrefixAndSuffixPairsI/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> string array <code class="language-plaintext highlighter-rouge">words</code>.</li> <li>Let’s define a <strong>boolean</strong> function <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix</code> that takes two strings, <code class="language-plaintext highlighter-rouge">str1</code> and <code class="language-plaintext highlighter-rouge">str2</code>: <ul> <li>isPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise.</li> </ul> </li> <li>For example, <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix("aba", "ababa")</code> is <code class="language-plaintext highlighter-rouge">true</code> because <code class="language-plaintext highlighter-rouge">"aba"</code> is a prefix of <code class="language-plaintext highlighter-rouge">"ababa"</code> and also a suffix, but <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix("abc", "abcd")</code> is <code class="language-plaintext highlighter-rouge">false</code>.</li> <li>Return <em>an integer denoting the <strong>number</strong> of index pairs</em> <code class="language-plaintext highlighter-rouge">(i, j)</code> <em>such that</em> <code class="language-plaintext highlighter-rouge">i &lt; j</code><em>, and</em> <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix(words[i], words[j])</code> <em>is</em> <code class="language-plaintext highlighter-rouge">true</code><em>.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["a","aba","ababa","aa"]
Output: 4
Explanation: In this example, the counted index pairs are:
i = 0 and j = 1 because isPrefixAndSuffix("a", "aba") is true.
i = 0 and j = 2 because isPrefixAndSuffix("a", "ababa") is true.
i = 0 and j = 3 because isPrefixAndSuffix("a", "aa") is true.
i = 1 and j = 2 because isPrefixAndSuffix("aba", "ababa") is true.
Therefore, the answer is 4.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["pa","papa","ma","mama"]
Output: 2
Explanation: In this example, the counted index pairs are:
i = 0 and j = 1 because isPrefixAndSuffix("pa", "papa") is true.
i = 2 and j = 3 because isPrefixAndSuffix("ma", "mama") is true.
Therefore, the answer is 2.  
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["abab","ab"]
Output: 0
Explanation: In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix("abab", "ab") is false.
Therefore, the answer is 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2 * m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountPrefixAndSuffixPairsI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countPrefixSuffixPairs</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Counter for valid prefix-suffix pairs</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Get array length to avoid repeated length calls</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Outer loop - iterate through potential prefix strings</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Inner loop - compare with all subsequent strings</span>
            <span class="c1">// Start from i+1 to ensure i &lt; j condition</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// Check if words[i] is both prefix and suffix of words[j]</span>
                <span class="k">if</span><span class="o">(</span><span class="n">isPrefixAndSuffix</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">words</span><span class="o">[</span><span class="n">j</span><span class="o">])){</span>
                    <span class="n">count</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPrefixAndSuffix</span><span class="o">(</span><span class="nc">String</span> <span class="n">str1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get lengths of both strings for comparison</span>
        <span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// If str1 is longer than str2, it can't be a prefix or suffix</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">len1</span> <span class="o">&gt;</span> <span class="n">len2</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Check if str1 is both a prefix and suffix of str2</span>
        <span class="c1">// using Java's built-in string methods</span>
        <span class="k">return</span> <span class="n">str2</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">str1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">str2</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"aba"</span><span class="o">,</span> <span class="s">"ababa"</span><span class="o">,</span> <span class="s">"aa"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">countPrefixSuffixPairs</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"pa"</span><span class="o">,</span> <span class="s">"papa"</span><span class="o">,</span> <span class="s">"ma"</span><span class="o">,</span> <span class="s">"mama"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">countPrefixSuffixPairs</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test case 3</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"abab"</span><span class="o">,</span> <span class="s">"ab"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">countPrefixSuffixPairs</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span> <span class="c1">// Expected output: 0</span>
    <span class="o">}</span>


<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given a 0-indexed string array words. Let’s define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2: isPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise. For example, isPrefixAndSuffix("aba", "ababa") is true because "aba" is a prefix of "ababa" and also a suffix, but isPrefixAndSuffix("abc", "abcd") is false. Return an integer denoting the number of index pairs (i, j) such that i &lt; j, and isPrefixAndSuffix(words[i], words[j]) is true.]]></summary></entry><entry><title type="html">2264. Largest 3-Same-Digit Number in String</title><link href="https://zhengstar94.github.io//blog/2025/Largest3SameDigitNumberInString/" rel="alternate" type="text/html" title="2264. Largest 3-Same-Digit Number in String"/><published>2025-01-08T00:00:00+00:00</published><updated>2025-01-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/Largest3SameDigitNumberInString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/Largest3SameDigitNumberInString/"><![CDATA[<ul> <li>You are given a string <code class="language-plaintext highlighter-rouge">num</code> representing a large integer. An integer is <strong>good</strong> if it meets the following conditions: <ul> <li>It is a <strong>substring</strong> of <code class="language-plaintext highlighter-rouge">num</code> with length <code class="language-plaintext highlighter-rouge">3</code>.</li> <li>It consists of only one unique digit.</li> </ul> </li> <li>Return <em>the <strong>maximum good</strong> integer as a <strong>string</strong> or an empty string</em> <code class="language-plaintext highlighter-rouge">""</code> <em>if no such integer exists</em>.</li> <li>Note: <ul> <li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li> <li>There may be <strong>leading zeroes</strong> in <code class="language-plaintext highlighter-rouge">num</code> or a good integer.</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num = "6777133339"
Output: "777"
Explanation: There are two distinct good integers: "777" and "333".
"777" is the largest, so we return "777".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num = "2300019"
Output: "000"
Explanation: "000" is the only good integer.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num = "42352338"
Output: ""
Explanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Largest3SameDigitNumberInString</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">largestGoodInteger</span><span class="o">(</span><span class="nc">String</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">char</span> <span class="n">maxDigit</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="o">;</span>  <span class="c1">// Initialize with null character to track the largest digit found</span>

        <span class="c1">// Check each possible substring of length 3</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
                    <span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">maxDigit</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxDigit</span><span class="o">,</span> <span class="n">num</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return empty string if no valid substring found</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">maxDigit</span> <span class="o">==</span> <span class="sc">'\0'</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Build the result string using StringBuilder</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">maxDigit</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">maxDigit</span><span class="o">)</span>
                <span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">maxDigit</span><span class="o">)</span>
                <span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Multiple valid substrings</span>
        <span class="nc">String</span> <span class="n">num1</span> <span class="o">=</span> <span class="s">"6777133339"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">num1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected output: 777"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual output: "</span> <span class="o">+</span> <span class="n">largestGoodInteger</span><span class="o">(</span><span class="n">num1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test case 2: Leading zeros</span>
        <span class="nc">String</span> <span class="n">num2</span> <span class="o">=</span> <span class="s">"2300019"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">num2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected output: 000"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual output: "</span> <span class="o">+</span> <span class="n">largestGoodInteger</span><span class="o">(</span><span class="n">num2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test case 3: No valid substring</span>
        <span class="nc">String</span> <span class="n">num3</span> <span class="o">=</span> <span class="s">"42352338"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">num3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected output: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual output: "</span> <span class="o">+</span> <span class="n">largestGoodInteger</span><span class="o">(</span><span class="n">num3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[You are given a string num representing a large integer. An integer is good if it meets the following conditions: It is a substring of num with length 3. It consists of only one unique digit. Return the maximum good integer as a string or an empty string "" if no such integer exists. Note: A substring is a contiguous sequence of characters within a string. There may be leading zeroes in num or a good integer.]]></summary></entry><entry><title type="html">2269. Find the K-Beauty of a Number</title><link href="https://zhengstar94.github.io//blog/2025/FindTheKBeautyOfANumber/" rel="alternate" type="text/html" title="2269. Find the K-Beauty of a Number"/><published>2025-01-07T00:00:00+00:00</published><updated>2025-01-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/FindTheKBeautyOfANumber</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/FindTheKBeautyOfANumber/"><![CDATA[<ul> <li>The <strong>k-beauty</strong> of an integer <code class="language-plaintext highlighter-rouge">num</code> is defined as the number of <strong>substrings</strong> of <code class="language-plaintext highlighter-rouge">num</code> when it is read as a string that meet the following conditions: <ul> <li>It has a length of <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>It is a divisor of <code class="language-plaintext highlighter-rouge">num</code>.</li> </ul> </li> <li>Given integers <code class="language-plaintext highlighter-rouge">num</code> and <code class="language-plaintext highlighter-rouge">k</code>, return <em>the k-beauty of</em> <code class="language-plaintext highlighter-rouge">num</code>.</li> <li>Note: <ul> <li><strong>Leading zeros</strong> are allowed.</li> <li><code class="language-plaintext highlighter-rouge">0</code> is not a divisor of any value.</li> </ul> </li> <li>A <strong>substring</strong> is a contiguous sequence of characters in a string.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num = 240, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "24" from "240": 24 is a divisor of 240.
- "40" from "240": 40 is a divisor of 240.
Therefore, the k-beauty is 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num = 430043, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "43" from "430043": 43 is a divisor of 430043.
- "30" from "430043": 30 is not a divisor of 430043.
- "00" from "430043": 0 is not a divisor of 430043.
- "04" from "430043": 4 is not a divisor of 430043.
- "43" from "430043": 43 is a divisor of 430043.
Therefore, the k-beauty is 2.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindTheKBeautyOfANumber</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">divisorSubstrings</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">numStr</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">numStr</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Extract substring of length k starting from index i</span>
            <span class="nc">String</span> <span class="n">substring</span> <span class="o">=</span> <span class="n">numStr</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">k</span><span class="o">);</span>
            <span class="c1">// Convert substring to integer for division check</span>
            <span class="kt">int</span> <span class="n">subNum</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">substring</span><span class="o">);</span>

            <span class="c1">// Check if subNum is not zero and is a divisor of num</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">subNum</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">num</span> <span class="o">%</span> <span class="n">subNum</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">240</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: num = "</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">", k = "</span> <span class="o">+</span> <span class="n">k1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">divisorSubstrings</span><span class="o">(</span><span class="n">num1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 2"</span><span class="o">);</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">430043</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: num = "</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">", k = "</span> <span class="o">+</span> <span class="n">k2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">divisorSubstrings</span><span class="o">(</span><span class="n">num2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 2"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Easy"/><summary type="html"><![CDATA[The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions: It has a length of k. It is a divisor of num. Given integers num and k, return the k-beauty of num. Note: Leading zeros are allowed. 0 is not a divisor of any value. A substring is a contiguous sequence of characters in a string.]]></summary></entry><entry><title type="html">3019. Number of Changing Keys</title><link href="https://zhengstar94.github.io//blog/2025/NumberOfChangingKeys/" rel="alternate" type="text/html" title="3019. Number of Changing Keys"/><published>2025-01-07T00:00:00+00:00</published><updated>2025-01-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/NumberOfChangingKeys</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/NumberOfChangingKeys/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> string <code class="language-plaintext highlighter-rouge">s</code> typed by a user. Changing a key is defined as using a key different from the last used key. For example, <code class="language-plaintext highlighter-rouge">s = "ab"</code> has a change of a key while <code class="language-plaintext highlighter-rouge">s = "bBBb"</code> does not have any.</li> <li>Return *the number of times the user had to change the key.**</li> <li><strong>*Note:</strong> Modifiers like <code class="language-plaintext highlighter-rouge">shift</code> or <code class="language-plaintext highlighter-rouge">caps lock</code> won’t be counted in changing the key that is if a user typed the letter <code class="language-plaintext highlighter-rouge">'a'</code> and then the letter <code class="language-plaintext highlighter-rouge">'A'</code> then it will not be considered as a changing of key.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aAbBcC"
Output: 2
Explanation: 
From s[0] = 'a' to s[1] = 'A', there is no change of key as caps lock or shift is not counted.
From s[1] = 'A' to s[2] = 'b', there is a change of key.
From s[2] = 'b' to s[3] = 'B', there is no change of key as caps lock or shift is not counted.
From s[3] = 'B' to s[4] = 'c', there is a change of key.
From s[4] = 'c' to s[5] = 'C', there is no change of key as caps lock or shift is not counted.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "AaAaAaaA"
Output: 0
Explanation: There is no change of key since only the letters 'a' and 'A' are pressed which does not require change of key.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberOfChangingKeys</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countKeyChanges</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">change</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Convert first character to lowercase as initial comparison character</span>
        <span class="kt">char</span> <span class="n">prev</span> <span class="o">=</span> <span class="nc">Character</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>

        <span class="c1">// Iterate through each character in the string</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Convert current character to lowercase for comparison</span>
            <span class="kt">char</span> <span class="n">curr</span> <span class="o">=</span> <span class="nc">Character</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>

            <span class="c1">// If current character is different from previous, increment change counter</span>
            <span class="k">if</span><span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="n">prev</span><span class="o">){</span>
                <span class="n">change</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">change</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"aAbBcC"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">s1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 2"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countKeyChanges</span><span class="o">(</span><span class="n">s1</span><span class="o">));</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"AaAaAaaA"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2: "</span> <span class="o">+</span> <span class="n">s2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 0"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countKeyChanges</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"mZiEPOz"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 3: "</span> <span class="o">+</span> <span class="n">s3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countKeyChanges</span><span class="o">(</span><span class="n">s3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[You are given a 0-indexed string s typed by a user. Changing a key is defined as using a key different from the last used key. For example, s="ab" has a change of a key while s="bBBb" does not have any. Return *the number of times the user had to change the key.** *Note: Modifiers like shift or caps lock won’t be counted in changing the key that is if a user typed the letter 'a' and then the letter 'A' then it will not be considered as a changing of key.]]></summary></entry><entry><title type="html">1408. String Matching in an Array</title><link href="https://zhengstar94.github.io//blog/2025/StringMatchingInAnArray/" rel="alternate" type="text/html" title="1408. String Matching in an Array"/><published>2025-01-07T00:00:00+00:00</published><updated>2025-01-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/StringMatchingInAnArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/StringMatchingInAnArray/"><![CDATA[<ul> <li>Given an array of string <code class="language-plaintext highlighter-rouge">words</code>, return <em>all strings in</em> <code class="language-plaintext highlighter-rouge">words</code> <em>that is a <strong>substring</strong> of another word</em>. You can return the answer in <strong>any order</strong>.</li> <li>A <strong>substring</strong> is a contiguous sequence of characters within a string</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["mass","as","hero","superhero"]
Output: ["as","hero"]
Explanation: "as" is substring of "mass" and "hero" is substring of "superhero".
["hero","as"] is also a valid answer.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["leetcode","et","code"]
Output: ["et","code"]
Explanation: "et", "code" are substring of "leetcode".
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["blue","green","bu"]
Output: []
Explanation: No string of words is substring of another string.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2) time | O(k) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringMatchingInAnArray</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">stringMatching</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="c1">// Iterate through each word in the array</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="c1">// Compare current word with all other words</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="c1">// Skip if comparing word with itself</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">continue</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// Check if words[i] is a substring of words[j]</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">contains</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
          <span class="c1">// Add words[i] to result and break inner loop since one match is sufficient</span>
          <span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
          <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Test case 1</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"mass"</span><span class="o">,</span> <span class="s">"as"</span><span class="o">,</span> <span class="s">"hero"</span><span class="o">,</span> <span class="s">"superhero"</span><span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">stringMatching</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>
    <span class="c1">// Expected output: [as, hero]</span>

    <span class="c1">// Test case 2</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"leetcode"</span><span class="o">,</span> <span class="s">"et"</span><span class="o">,</span> <span class="s">"code"</span><span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">stringMatching</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>
    <span class="c1">// Expected output: [et, code]</span>

    <span class="c1">// Test case 3</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"blue"</span><span class="o">,</span> <span class="s">"green"</span><span class="o">,</span> <span class="s">"bu"</span><span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">stringMatching</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>
    <span class="c1">// Expected output: []</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[Given an array of string words, return all strings in words that is a substring of another word. You can return the answer in any order. A substring is a contiguous sequence of characters within a string]]></summary></entry><entry><title type="html">2274. Maximum Consecutive Floors Without Special Floors</title><link href="https://zhengstar94.github.io//blog/2025/MaximumConsecutiveFloorsWithoutSpecialFloors/" rel="alternate" type="text/html" title="2274. Maximum Consecutive Floors Without Special Floors"/><published>2025-01-06T00:00:00+00:00</published><updated>2025-01-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MaximumConsecutiveFloorsWithoutSpecialFloors</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MaximumConsecutiveFloorsWithoutSpecialFloors/"><![CDATA[<ul> <li>Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be <strong>special floors</strong>, used for relaxation only.</li> <li>You are given two integers <code class="language-plaintext highlighter-rouge">bottom</code> and <code class="language-plaintext highlighter-rouge">top</code>, which denote that Alice has rented all the floors from <code class="language-plaintext highlighter-rouge">bottom</code> to <code class="language-plaintext highlighter-rouge">top</code> (<strong>inclusive</strong>). You are also given the integer array <code class="language-plaintext highlighter-rouge">special</code>, where <code class="language-plaintext highlighter-rouge">special[i]</code> denotes a special floor that Alice has designated for relaxation.</li> <li>Return <em>the <strong>maximum</strong> number of consecutive floors without a special floor</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: bottom = 2, top = 9, special = [4,6]
Output: 3
Explanation: The following are the ranges (inclusive) of consecutive floors without a special floor:
- (2, 3) with a total amount of 2 floors.
- (5, 5) with a total amount of 1 floor.
- (7, 9) with a total amount of 3 floors.
Therefore, we return the maximum number which is 3 floors.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: bottom = 6, top = 8, special = [7,6,8]
Output: 0
Explanation: Every floor rented is a special floor, so we return 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumConsecutiveFloorsWithoutSpecialFloors</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maxConsecutive</span><span class="o">(</span><span class="kt">int</span> <span class="n">bottom</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">special</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">special</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Check the first consecutive non-special floors (from bottom to first special floor)</span>
        <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">special</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="n">bottom</span><span class="o">);</span>

        <span class="c1">// Check consecutive non-special floors between adjacent special floors</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">special</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">special</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">special</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Check the last consecutive non-special floors (from last special floor to top)</span>
        <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">top</span> <span class="o">-</span> <span class="n">special</span><span class="o">[</span><span class="n">special</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>

        <span class="k">return</span> <span class="n">maxLen</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span> <span class="n">bottom1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">top1</span> <span class="o">=</span> <span class="mi">9</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">special1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">maxConsecutive</span><span class="o">(</span><span class="n">bottom1</span><span class="o">,</span> <span class="n">top1</span><span class="o">,</span> <span class="n">special1</span><span class="o">));</span>  <span class="c1">// Expected output: 3</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span> <span class="n">bottom2</span> <span class="o">=</span> <span class="mi">6</span><span class="o">,</span> <span class="n">top2</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">special2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">7</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">maxConsecutive</span><span class="o">(</span><span class="n">bottom2</span><span class="o">,</span> <span class="n">top2</span><span class="o">,</span> <span class="n">special2</span><span class="o">));</span>  <span class="c1">// Expected output: 0</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only. You are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation. Return the maximum number of consecutive floors without a special floor.]]></summary></entry></feed>