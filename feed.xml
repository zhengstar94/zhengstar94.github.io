<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-11T03:01:56+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">2717. Semi-Ordered Permutation</title><link href="https://zhengstar94.github.io//blog/2024/SemiOrderedPermutation/" rel="alternate" type="text/html" title="2717. Semi-Ordered Permutation"/><published>2024-12-11T00:00:00+00:00</published><updated>2024-12-11T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/SemiOrderedPermutation</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/SemiOrderedPermutation/"><![CDATA[<ul> <li>ou are given a <strong>0-indexed</strong> permutation of <code class="language-plaintext highlighter-rouge">n</code> integers <code class="language-plaintext highlighter-rouge">nums</code>.</li> <li>A permutation is called <strong>semi-ordered</strong> if the first number equals <code class="language-plaintext highlighter-rouge">1</code> and the last number equals <code class="language-plaintext highlighter-rouge">n</code>. You can perform the below operation as many times as you want until you make <code class="language-plaintext highlighter-rouge">nums</code> a <strong>semi-ordered</strong> permutation: <ul> <li>Pick two adjacent elements in <code class="language-plaintext highlighter-rouge">nums</code>, then swap them.</li> </ul> </li> <li>Return <em>the minimum number of operations to make</em> <code class="language-plaintext highlighter-rouge">nums</code> <em>a <strong>semi-ordered permutation</strong></em>.</li> <li>A <strong>permutation</strong> is a sequence of integers from <code class="language-plaintext highlighter-rouge">1</code> to <code class="language-plaintext highlighter-rouge">n</code> of length <code class="language-plaintext highlighter-rouge">n</code> containing each number exactly once.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,1,4,3]
Output: 2
Explanation: We can make the permutation semi-ordered using these sequence of operations: 
1 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].
2 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].
It can be proved that there is no sequence of less than two operations that make nums a semi-ordered permutation. 
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,4,1,3]
Output: 3
Explanation: We can make the permutation semi-ordered using these sequence of operations:
1 - swap i = 1 and j = 2. The permutation becomes [2,1,4,3].
2 - swap i = 0 and j = 1. The permutation becomes [1,2,4,3].
3 - swap i = 2 and j = 3. The permutation becomes [1,2,3,4].
It can be proved that there is no sequence of less than three operations that make nums a semi-ordered permutation.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,3,4,2,5]
Output: 0
Explanation: The permutation is already a semi-ordered permutation.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/11
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SemiOrderedPermutation</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">semiOrderedPermutation</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of the input array</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Initialize indices for numbers 1 and n</span>
        <span class="c1">// Set to -1 to indicate not found initially</span>
        <span class="kt">int</span> <span class="n">oneIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">nIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Find the positions of numbers 1 and n in the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Record the index of number 1</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
                <span class="n">oneIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Record the index of number n</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">n</span><span class="o">){</span>
                <span class="n">nIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Special case: if 1 is already at the first position</span>
        <span class="c1">// and n is already at the last position, no swaps needed</span>
        <span class="k">if</span><span class="o">(</span><span class="n">oneIndex</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nIndex</span> <span class="o">==</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Swap calculation explanation:</span>
        <span class="c1">// The formula `oneIndex + (n - 1 - nIndex)` calculates the total number of swaps needed</span>
        <span class="c1">// Let's break it down step by step:</span>

        <span class="c1">// `oneIndex`:</span>
        <span class="c1">// - Represents the number of swaps needed to move 1 to the first position (index 0)</span>
        <span class="c1">// - Higher index means more swaps required to bring 1 to the start</span>
        <span class="c1">// - Example: In [2,1,4,3], oneIndex is 1, so 1 swap is needed to move 1 to start</span>

        <span class="c1">// `(n - 1 - nIndex)`:</span>
        <span class="c1">// - Represents the number of swaps needed to move n to the last position (index n-1)</span>
        <span class="c1">// - Calculates how far n is from the end of the array</span>
        <span class="c1">// - Example: In [2,4,1,3], nIndex is 1, so (3-1-1) = 1 swap is needed to move n to end</span>

        <span class="c1">// Total swaps = swaps to move 1 to start + swaps to move n to end</span>
        <span class="kt">int</span> <span class="n">swap</span> <span class="o">=</span> <span class="n">oneIndex</span> <span class="o">+</span> <span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">nIndex</span><span class="o">);</span>

        <span class="c1">// Special handling: If 1 appears after n in the original array</span>
        <span class="c1">// We can optimize by reducing one swap</span>
        <span class="c1">// This is because 1 and n might be swapped in a single operation</span>
        <span class="k">if</span><span class="o">(</span><span class="n">oneIndex</span> <span class="o">&gt;</span> <span class="n">nIndex</span><span class="o">){</span>
            <span class="n">swap</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">swap</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Requires 2 swaps</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span>

        <span class="c1">// Test case 2: Requires 3 swaps</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Already semi-ordered, no swaps needed</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums3</span><span class="o">));</span>

        <span class="c1">// Test case 4: 1 at the end, n at the beginning</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums4</span><span class="o">));</span>

        <span class="c1">// Test case 5: Short array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums5</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 5: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums5</span><span class="o">));</span>

        <span class="c1">// Test case 6: Larger array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums6</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 6: "</span> <span class="o">+</span> <span class="n">semiOrderedPermutation</span><span class="o">(</span><span class="n">nums6</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[ou are given a 0-indexed permutation of n integers nums. A permutation is called semi-ordered if the first number equals 1 and the last number equals n. You can perform the below operation as many times as you want until you make nums a semi-ordered permutation: Pick two adjacent elements in nums, then swap them. Return the minimum number of operations to make nums a semi-ordered permutation. A permutation is a sequence of integers from 1 to n of length n containing each number exactly once.]]></summary></entry><entry><title type="html">38. Count and Say</title><link href="https://zhengstar94.github.io//blog/2024/CountAndSay/" rel="alternate" type="text/html" title="38. Count and Say"/><published>2024-12-10T00:00:00+00:00</published><updated>2024-12-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/CountAndSay</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/CountAndSay/"><![CDATA[<ul> <li> <p>The <strong>count-and-say</strong> sequence is a sequence of digit strings defined by the recursive formula:</p> <ul> <li><code class="language-plaintext highlighter-rouge">countAndSay(1) = "1"</code></li> <li><code class="language-plaintext highlighter-rouge">countAndSay(n)</code> is the run-length encoding of <code class="language-plaintext highlighter-rouge">countAndSay(n - 1)</code>.</li> </ul> </li> <li> <p><a href="http://en.wikipedia.org/wiki/Run-length_encoding">Run-length encoding</a> (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string <code class="language-plaintext highlighter-rouge">"3322251"</code> we replace <code class="language-plaintext highlighter-rouge">"33"</code> with <code class="language-plaintext highlighter-rouge">"23"</code>, replace <code class="language-plaintext highlighter-rouge">"222"</code> with <code class="language-plaintext highlighter-rouge">"32"</code>, replace <code class="language-plaintext highlighter-rouge">"5"</code> with <code class="language-plaintext highlighter-rouge">"15"</code> and replace <code class="language-plaintext highlighter-rouge">"1"</code> with <code class="language-plaintext highlighter-rouge">"11"</code>. Thus the compressed string becomes <code class="language-plaintext highlighter-rouge">"23321511"</code>.</p> <p>Given a positive integer <code class="language-plaintext highlighter-rouge">n</code>, return <em>the</em> <code class="language-plaintext highlighter-rouge">nth</code> <em>element of the <strong>count-and-say</strong> sequence</em>.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 4
Output: "1211"

Explanation:
countAndSay(1) = "1"
countAndSay(2) = RLE of "1" = "11"
countAndSay(3) = RLE of "11" = "21"
countAndSay(4) = RLE of "21" = "1211"
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 1
Output: "1"

Explanation:
This is the base case.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(2<span class="p">^</span>n) time | O(2<span class="p">^</span>n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountAndSay</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">countAndSay</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Base case: when n = 1, return "1"</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">"1"</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Recursively get the previous sequence</span>
        <span class="nc">String</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

        <span class="c1">// StringBuilder to build the current sequence</span>
        <span class="nc">StringBuilder</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="c1">// Variables to track the current character and its count</span>
        <span class="kt">char</span> <span class="n">currentChar</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Iterate through the previous sequence</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">prev</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">prev</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">currentChar</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Increment the count if the same character is repeated</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Append the count and character to the result</span>
                <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">currentChar</span><span class="o">);</span>

                <span class="c1">// Reset the current character and its count</span>
                <span class="n">currentChar</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Append the last group of characters</span>
        <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">count</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">currentChar</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: n = 1</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n1</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n1</span><span class="o">));</span>

        <span class="c1">// Test case 2: n = 2</span>
        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n2</span><span class="o">));</span>

        <span class="c1">// Test case 3: n = 3</span>
        <span class="kt">int</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n3</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n3</span><span class="o">));</span>

        <span class="c1">// Test case 4: n = 4</span>
        <span class="kt">int</span> <span class="n">n4</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n4</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n4</span><span class="o">));</span>

        <span class="c1">// Test case 5: n = 5</span>
        <span class="kt">int</span> <span class="n">n5</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case n = "</span> <span class="o">+</span> <span class="n">n5</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">countAndSay</span><span class="o">(</span><span class="n">n5</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[The count-and-say sequence is a sequence of digit strings defined by the recursive formula:]]></summary></entry><entry><title type="html">2981. Find Longest Special Substring That Occurs Thrice I</title><link href="https://zhengstar94.github.io//blog/2024/FindLongestSpecialSubstringThatOccursThriceI/" rel="alternate" type="text/html" title="2981. Find Longest Special Substring That Occurs Thrice I"/><published>2024-12-10T00:00:00+00:00</published><updated>2024-12-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindLongestSpecialSubstringThatOccursThriceI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindLongestSpecialSubstringThatOccursThriceI/"><![CDATA[<ul> <li>You are given a string <code class="language-plaintext highlighter-rouge">s</code> that consists of lowercase English letters.</li> <li>A string is called <strong>special</strong> if it is made up of only a single character. For example, the string <code class="language-plaintext highlighter-rouge">"abc"</code> is not special, whereas the strings <code class="language-plaintext highlighter-rouge">"ddd"</code>, <code class="language-plaintext highlighter-rouge">"zz"</code>, and <code class="language-plaintext highlighter-rouge">"f"</code> are special.</li> <li>Return <em>the length of the <strong>longest special substring</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code> <em>which occurs <strong>at least thrice</strong></em>, <em>or</em> <code class="language-plaintext highlighter-rouge">-1</code> <em>if no special substring occurs at least thrice</em>.</li> <li>A <strong>substring</strong> is a contiguous <strong>non-empty</strong> sequence of characters within a string.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aaaa"
Output: 2
Explanation: The longest special substring which occurs thrice is "aa": substrings "aaaa", "aaaa", and "aaaa".
It can be shown that the maximum length achievable is 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abcdef"
Output: -1
Explanation: There exists no special substring which occurs at least thrice. Hence return -1.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abcaba"
Output: 1
Explanation: The longest special substring which occurs thrice is "a": substrings "abcaba", "abcaba", and "abcaba".
It can be shown that the maximum length achievable is 1.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindLongestSpecialSubstringThatOccursThriceI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maximumLength</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Convert the input string to a character array for easier manipulation in the next steps</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">tempArray</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>

        <span class="c1">// Create an array of lists to store the lengths of contiguous substrings for each character (26 letters in the alphabet)</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">groups</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">setAll</span><span class="o">(</span><span class="n">groups</span><span class="o">,</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>

        <span class="c1">// Variable to count the length of the current contiguous substring</span>
        <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate over the character array to group contiguous occurrences of each character</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">tempArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">cnt</span><span class="o">++;</span> <span class="c1">// Increment the current substring length</span>
            <span class="c1">// If we reach the end of the string or the current character is different from the next</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">tempArray</span><span class="o">.</span><span class="na">length</span> <span class="o">||</span> <span class="n">tempArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">tempArray</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]){</span>
                <span class="c1">// Add the length of the current contiguous substring to the appropriate group</span>
                <span class="n">groups</span><span class="o">[</span><span class="n">tempArray</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">cnt</span><span class="o">);</span>
                <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Reset the counter for the next substring</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Variable to store the overall maximum length of a special substring</span>
        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate over each group (i.e., each letter's contiguous substring lengths)</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nl">group:</span> <span class="n">groups</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Skip empty groups (i.e., letters that don't appear in the string)</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">group</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">// Add two zeroes to simulate the case where there are less than 3 substrings</span>
            <span class="n">group</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// Adding zero as a placeholder</span>
            <span class="n">group</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// Adding another zero as a placeholder</span>

            <span class="c1">// Calculate case 1: the longest substring minus 2 (this assumes the longest substring is the special one)</span>
            <span class="kt">int</span> <span class="n">case1</span> <span class="o">=</span> <span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span>

            <span class="c1">// Calculate case 2: the best possible substring when there are at least two substrings (find the minimum of the first two, then maximize it with the third)</span>
            <span class="kt">int</span> <span class="n">case2</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">)),</span> <span class="n">group</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>

            <span class="c1">// Update the answer by comparing the current maximum with the newly calculated cases</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ans</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">case1</span><span class="o">,</span> <span class="n">case2</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// Return the result, or -1 if no valid special substring was found</span>
        <span class="k">return</span> <span class="n">ans</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">ans</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: The string "aaabbcaaa" contains several groups of contiguous characters.</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"aaabbcaaa"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: The string "aabbaa" has a mix of substrings but not all substrings are of the same length.</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"aabbaa"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>

        <span class="c1">// Test case 3: The string "abc" contains no repeated substrings, so the maximum length will be 1.</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>

        <span class="c1">// Test case 4: The string "aaaaa" has a single repeated character for a long length.</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"aaaaa"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 4: "</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>

        <span class="c1">// Test case 5: The string "a" has only one character, so the maximum length will be 1.</span>
        <span class="nc">String</span> <span class="n">test5</span> <span class="o">=</span> <span class="s">"a"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 5: "</span> <span class="o">+</span> <span class="n">test5</span> <span class="o">+</span> <span class="s">" -&gt; Maximum length: "</span> <span class="o">+</span> <span class="n">maximumLength</span><span class="o">(</span><span class="n">test5</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[You are given a string s that consists of lowercase English letters. A string is called special if it is made up of only a single character. For example, the string "abc" is not special, whereas the strings "ddd", "zz", and "f" are special. Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice. A substring is a contiguous non-empty sequence of characters within a string.]]></summary></entry><entry><title type="html">935. Knight Dialer</title><link href="https://zhengstar94.github.io//blog/2024/KnightDialer/" rel="alternate" type="text/html" title="935. Knight Dialer"/><published>2024-12-10T00:00:00+00:00</published><updated>2024-12-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/KnightDialer</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/KnightDialer/"><![CDATA[<ul> <li>The chess knight has a <strong>unique movement</strong>, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an <strong>L</strong>). The possible movements of chess knight are shown in this diagram:</li> <li>Given an integer <code class="language-plaintext highlighter-rouge">n</code>, return how many distinct phone numbers of length <code class="language-plaintext highlighter-rouge">n</code> we can dial.</li> <li>You are allowed to place the knight <strong>on any numeric cell</strong> initially and then you should perform <code class="language-plaintext highlighter-rouge">n - 1</code> jumps to dial a number of length <code class="language-plaintext highlighter-rouge">n</code>. All jumps should be <strong>valid</strong> knight jumps.</li> <li>As the answer may be very large, <strong>return the answer modulo</strong> <code class="language-plaintext highlighter-rouge">109 + 7</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 2
Output: 20
Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: n = 3131
Output: 136006598
Explanation: Please take care of the mod.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.DynamicProgramming</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">KnightDialer</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">knightDialer</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Special case: if number length is 1, return 10 (all digits 0-9 are valid)</span>
        <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">10</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Predefined array showing how many moves are possible from each digit</span>
        <span class="c1">// Index represents the current digit (0-9)</span>
        <span class="c1">// Value represents the number of possible next moves</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">help</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">};</span>

        <span class="c1">// Create a copy of the help array to track current state</span>
        <span class="kt">long</span><span class="o">[]</span> <span class="n">cur</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">help</span><span class="o">,</span> <span class="n">help</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>

        <span class="c1">// Dynamic Programming: Iterate to build phone numbers of length n</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Calculate possible moves for each digit based on previous state</span>
            <span class="c1">// These calculations follow the knight's move rules on a phone keypad</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span>       <span class="c1">// 0 can be reached from 4 and 6</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>        <span class="c1">// 1 can be reached from 6 and 8</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">9</span><span class="o">];</span>        <span class="c1">// 2 can be reached from 7 and 9</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>        <span class="c1">// 3 can be reached from 4 and 8</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// 4 can be reached from 3, 9, and 0</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>                        <span class="c1">// 5 cannot be reached by knight's move</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span> <span class="c1">// 6 can be reached from 1, 7, and 0</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span>        <span class="c1">// 7 can be reached from 2 and 6</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>        <span class="c1">// 8 can be reached from 1 and 3</span>
            <span class="n">cur</span><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="o">=</span> <span class="n">help</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">help</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>        <span class="c1">// 9 can be reached from 2 and 4</span>

            <span class="c1">// Update help array and apply modulo to prevent integer overflow</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                <span class="n">help</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">cur</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">%</span> <span class="o">(</span><span class="mi">1000000007</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Sum up all possible phone numbers and apply final modulo</span>
        <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">cur</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">%</span> <span class="o">(</span><span class="mi">1000000007</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases with different number lengths</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">knightDialer</span><span class="o">(</span><span class="n">n1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"For n = "</span> <span class="o">+</span> <span class="n">n1</span> <span class="o">+</span> <span class="s">", the number of distinct phone numbers is: "</span> <span class="o">+</span> <span class="n">result1</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">knightDialer</span><span class="o">(</span><span class="n">n2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"For n = "</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="s">", the number of distinct phone numbers is: "</span> <span class="o">+</span> <span class="n">result2</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">3131</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">knightDialer</span><span class="o">(</span><span class="n">n3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"For n = "</span> <span class="o">+</span> <span class="n">n3</span> <span class="o">+</span> <span class="s">", the number of distinct phone numbers is: "</span> <span class="o">+</span> <span class="n">result3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Dynamic Programming"/><category term="Medium"/><summary type="html"><![CDATA[The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagram: Given an integer n, return how many distinct phone numbers of length n we can dial. You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps. As the answer may be very large, return the answer modulo 109 + 7.]]></summary></entry><entry><title type="html">1812. Determine Color of a Chessboard Square</title><link href="https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare/" rel="alternate" type="text/html" title="1812. Determine Color of a Chessboard Square"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare/"><![CDATA[<ul> <li> <p>You are given <code class="language-plaintext highlighter-rouge">coordinates</code>, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.</p> </li> <li> <p>Return <code class="language-plaintext highlighter-rouge">true</code> <em>if the square is white, and</em> <code class="language-plaintext highlighter-rouge">false</code> <em>if the square is black</em>.</p> <p>The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "a1"
Output: false
Explanation: From the chessboard above, the square with coordinates "a1" is black, so return false.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "h3"
Output: true
Explanation: From the chessboard above, the square with coordinates "h3" is white, so return true.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "c7"
Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DetermineColorOfAChessboardSquare</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">squareIsWhite</span><span class="o">(</span><span class="nc">String</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Convert column letter to zero-based index (a=0, b=1, ...)</span>
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">coordinates</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">;</span>
        <span class="c1">// Convert row number to zero-based index (1=0, 2=1, ...)</span>
        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">coordinates</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'1'</span><span class="o">;</span>

        <span class="c1">// If the sum of column and row indices is odd, the square is white</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">col</span> <span class="o">+</span> <span class="n">row</span><span class="o">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Black square</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"a1"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: White square</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"h3"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Black square</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"c7"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"e4"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.]]></summary></entry><entry><title type="html">3152. Special Array II</title><link href="https://zhengstar94.github.io//blog/2024/SpecialArrayII/" rel="alternate" type="text/html" title="3152. Special Array II"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/SpecialArrayII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/SpecialArrayII/"><![CDATA[<ul> <li>An array is considered <strong>special</strong> if every pair of its adjacent elements contains two numbers with different parity.</li> <li>You are given an array of integer <code class="language-plaintext highlighter-rouge">nums</code> and a 2D integer matrix <code class="language-plaintext highlighter-rouge">queries</code>, where for <code class="language-plaintext highlighter-rouge">queries[i] = [fromi, toi]</code> your task is to check that subarray <code class="language-plaintext highlighter-rouge">nums[fromi..toi]</code> is <strong>special</strong> or not.</li> <li>Return an array of booleans <code class="language-plaintext highlighter-rouge">answer</code> such that <code class="language-plaintext highlighter-rouge">answer[i]</code> is <code class="language-plaintext highlighter-rouge">true</code> if <code class="language-plaintext highlighter-rouge">nums[fromi..toi]</code> is special.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,4,1,2,6], queries = [ [0,4] ]
Output: [false]

Explanation:
The subarray is [3,4,1,2,6]. 2 and 6 are both even.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,3,1,6], queries = [ [0,2],[2,3] ]
Output: [false,true]

Explanation:
1. The subarray is [4,3,1]. 3 and 1 are both odd. So the answer to this query is false.
2. The subarray is [1,6]. There is only one pair: (1,6) and it contains numbers with different parity. So the answer to this query is true.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n + q) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpecialArrayII</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="nf">isArraySpecial</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">queries</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Prefix sum array to track consecutive same parity elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">preSum</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

        <span class="c1">// Calculate prefix sum by checking parity of consecutive elements</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// If two consecutive elements have the same parity (both odd or both even),</span>
            <span class="c1">// increment the prefix sum to mark a break in the "special array" condition</span>
            <span class="c1">// If elements have different parity, keep the prefix sum unchanged</span>
            <span class="n">preSum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">preSum</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="o">((</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)</span> <span class="o">==</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Result array to store query results</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">m</span><span class="o">];</span>

        <span class="c1">// Process each query to check if the subarray is special</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// If prefix sums at start and end of query range are equal,</span>
            <span class="c1">// it means no consecutive same-parity elements exist in the subarray</span>
            <span class="n">result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">preSum</span><span class="o">[</span><span class="n">queries</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">1</span><span class="o">]]</span> <span class="o">==</span> <span class="n">preSum</span><span class="o">[</span><span class="n">queries</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]]);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries1</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">isArraySpecial</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">queries1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result:"</span><span class="o">);</span>
        <span class="n">printBooleanArray</span><span class="o">(</span><span class="n">result1</span><span class="o">);</span>  <span class="c1">// Expected output: [false, true]</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">4</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">isArraySpecial</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">queries2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest Case 2 Result:"</span><span class="o">);</span>
        <span class="n">printBooleanArray</span><span class="o">(</span><span class="n">result2</span><span class="o">);</span>  <span class="c1">// Expected output: [false]</span>

        <span class="c1">// Test case 3: More complex example</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">queries3</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">7</span> <span class="o">}</span> <span class="o">};</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">isArraySpecial</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">queries3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest Case 3 Result:"</span><span class="o">);</span>
        <span class="n">printBooleanArray</span><span class="o">(</span><span class="n">result3</span><span class="o">);</span>  <span class="c1">// Expected output: [true, true, true]</span>
    <span class="o">}</span>

   
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printBooleanArray</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">", "</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[An array is considered special if every pair of its adjacent elements contains two numbers with different parity. You are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that subarray nums[fromi..toi] is special or not. Return an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.]]></summary></entry><entry><title type="html">468. Validate IP Address</title><link href="https://zhengstar94.github.io//blog/2024/ValidateIPAddress/" rel="alternate" type="text/html" title="468. Validate IP Address"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ValidateIPAddress</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ValidateIPAddress/"><![CDATA[<ul> <li> <p>Given a string <code class="language-plaintext highlighter-rouge">queryIP</code>, return <code class="language-plaintext highlighter-rouge">"IPv4"</code> if IP is a valid IPv4 address, <code class="language-plaintext highlighter-rouge">"IPv6"</code> if IP is a valid IPv6 address or <code class="language-plaintext highlighter-rouge">"Neither"</code> if IP is not a correct IP of any type.</p> </li> <li> <p><strong>A valid IPv4</strong> address is an IP in the form <code class="language-plaintext highlighter-rouge">"x1.x2.x3.x4"</code> where <code class="language-plaintext highlighter-rouge">0 &lt;= xi &lt;= 255</code> and <code class="language-plaintext highlighter-rouge">xi</code> <strong>cannot contain</strong> leading zeros. For example, <code class="language-plaintext highlighter-rouge">"192.168.1.1"</code> and <code class="language-plaintext highlighter-rouge">"192.168.1.0"</code> are valid IPv4 addresses while <code class="language-plaintext highlighter-rouge">"192.168.01.1"</code>, <code class="language-plaintext highlighter-rouge">"192.168.1.00"</code>, and <code class="language-plaintext highlighter-rouge">"192.168@1.1"</code> are invalid IPv4 addresses.</p> </li> <li> <p><strong>A valid IPv6</strong> address is an IP in the form <code class="language-plaintext highlighter-rouge">"x1:x2:x3:x4:x5:x6:x7:x8"</code> where:</p> <ul> <li><code class="language-plaintext highlighter-rouge">1 &lt;= xi.length &lt;= 4</code></li> <li><code class="language-plaintext highlighter-rouge">xi</code> is a <strong>hexadecimal string</strong> which may contain digits, lowercase English letter (<code class="language-plaintext highlighter-rouge">'a'</code> to <code class="language-plaintext highlighter-rouge">'f'</code>) and upper-case English letters (<code class="language-plaintext highlighter-rouge">'A'</code> to <code class="language-plaintext highlighter-rouge">'F'</code>).</li> <li>Leading zeros are allowed in <code class="language-plaintext highlighter-rouge">xi</code>.</li> </ul> </li> <li> <p>For example, “<code class="language-plaintext highlighter-rouge">2001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> and “<code class="language-plaintext highlighter-rouge">2001:db8:85a3:0:0:8A2E:0370:7334"</code> are valid IPv6 addresses, while “<code class="language-plaintext highlighter-rouge">2001:0db8:85a3::8A2E:037j:7334"</code> and “<code class="language-plaintext highlighter-rouge">02001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> are invalid IPv6 addresses.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: queryIP = "172.16.254.1"
Output: "IPv4"
Explanation: This is a valid IPv4 address, return "IPv4".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"
Output: "IPv6"
Explanation: This is a valid IPv6 address, return "IPv6".
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: queryIP = "256.256.256.256"
Output: "Neither"
Explanation: This is neither a IPv4 address nor a IPv6 address.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidateIPAddress</span> <span class="o">{</span>
    <span class="c1">// Constants for IP address types</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">IPV4</span> <span class="o">=</span> <span class="s">"IPv4"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">IPV6</span> <span class="o">=</span> <span class="s">"IPv6"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NEITHER</span> <span class="o">=</span> <span class="s">"Neither"</span><span class="o">;</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">validIPAddress</span><span class="o">(</span><span class="nc">String</span> <span class="n">queryIP</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Check if it's an IPv4 address (contains dot)</span>
        <span class="k">if</span><span class="o">(</span><span class="n">queryIP</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"."</span><span class="o">)){</span>
            <span class="k">return</span> <span class="nf">handleIPV4</span><span class="o">(</span><span class="n">queryIP</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// Check if it's an IPv6 address (contains colon)</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">queryIP</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">":"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="nf">handleIPV6</span><span class="o">(</span><span class="n">queryIP</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// If neither dot nor colon, it's an invalid address</span>
        <span class="k">else</span><span class="o">{</span>
            <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Validate IPv4 address
     *
     * @param queryIP the IPv4 address to validate
     * @return "IPv4" if valid, "Neither" otherwise
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">handleIPV4</span><span class="o">(</span><span class="nc">String</span> <span class="n">queryIP</span><span class="o">){</span>
        <span class="c1">// Split the IP address into parts</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipParts</span> <span class="o">=</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>

        <span class="c1">// Check basic IPv4 structure</span>
        <span class="k">if</span><span class="o">(</span><span class="n">ipParts</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">4</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"."</span><span class="o">)</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">"."</span><span class="o">)){</span>
            <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Validate each part of the IPv4 address</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="nl">ipPart:</span> <span class="n">ipParts</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Check for invalid leading zeros</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ipPart</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"0"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">ipPart</span><span class="o">,</span> <span class="s">"0"</span><span class="o">)){</span>
                <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// Convert part to integer and check range</span>
                <span class="kt">int</span> <span class="n">ipPartInt</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ipPart</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">ipPartInt</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ipPartInt</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="o">){</span>
                    <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
                <span class="c1">// If conversion fails, it's invalid</span>
                <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">IPV4</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Validate IPv6 address
     *
     * @param queryIP the IPv6 address to validate
     * @return "IPv6" if valid, "Neither" otherwise
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">handleIPV6</span><span class="o">(</span><span class="nc">String</span> <span class="n">queryIP</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Split the IP address into parts</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipParts</span> <span class="o">=</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>

        <span class="c1">// Check basic IPv6 structure</span>
        <span class="k">if</span><span class="o">(</span><span class="n">ipParts</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">8</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">":"</span><span class="o">)</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">":"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Validate each part of the IPv6 address</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="nl">ipPart:</span> <span class="n">ipParts</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Check part length (1-4 characters)</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">ipPart</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">ipPart</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="o">){</span>
                <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Validate each character</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="nl">c:</span> <span class="n">ipPart</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
                <span class="c1">// Only allow 0-9, a-f, A-F</span>
                <span class="k">if</span> <span class="o">((</span><span class="n">c</span> <span class="o">&lt;</span> <span class="sc">'0'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="sc">'9'</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="sc">'a'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="sc">'f'</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="sc">'A'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="sc">'F'</span><span class="o">)){</span>
                    <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">IPV6</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// IPv4 test cases</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipv4TestCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"172.16.254.1"</span><span class="o">,</span>       <span class="c1">// Valid IPv4</span>
                <span class="s">"0.0.0.0"</span><span class="o">,</span>            <span class="c1">// Special valid IPv4</span>
                <span class="s">"255.255.255.255"</span><span class="o">,</span>    <span class="c1">// Maximum IPv4</span>
                <span class="s">"256.256.256.256"</span><span class="o">,</span>    <span class="c1">// Invalid IPv4 - Out of range</span>
                <span class="s">"1.1.1.1."</span><span class="o">,</span>           <span class="c1">// Invalid IPv4 - Ends with dot</span>
                <span class="s">"01.01.01.01"</span><span class="o">,</span>        <span class="c1">// Invalid IPv4 - Leading zeros</span>
                <span class="s">"123.045.067.089"</span>     <span class="c1">// Invalid IPv4 - Leading zeros</span>
        <span class="o">};</span>

        <span class="c1">// IPv6 test cases</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipv6TestCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"2001:0db8:85a3:0:0:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6</span>
                <span class="s">"2001:db8:85a3:01:0:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6 - Single character part</span>
                <span class="s">"2001:0db8:85a3:0:0:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6</span>
                <span class="s">"2001:0db8:85a3:0000:0000:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6</span>
                <span class="s">"::1"</span><span class="o">,</span>                <span class="c1">// Invalid IPv6 - Insufficient segments</span>
                <span class="s">"1:2:3:4:5:6:7:8:9"</span><span class="o">,</span>  <span class="c1">// Invalid IPv6 - Too many segments</span>
                <span class="s">"2001:0db8:85a3:0:0:8A2E:0370:g334"</span> <span class="c1">// Invalid IPv6 - Invalid character</span>
        <span class="o">};</span>

        <span class="c1">// Test IPv4 cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"IPv4 Test Results:"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">ipv4TestCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testCase</span> <span class="o">+</span> <span class="s">" : "</span> <span class="o">+</span> <span class="n">validIPAddress</span><span class="o">(</span><span class="n">testCase</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// Test IPv6 cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nIPv6 Test Results:"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">ipv6TestCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testCase</span> <span class="o">+</span> <span class="s">" : "</span> <span class="o">+</span> <span class="n">validIPAddress</span><span class="o">(</span><span class="n">testCase</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Given a string queryIP, return "IPv4" if IP is a valid IPv4 address, "IPv6" if IP is a valid IPv6 address or "Neither" if IP is not a correct IP of any type.]]></summary></entry><entry><title type="html">66. Plus One</title><link href="https://zhengstar94.github.io//blog/2024/PlusOne/" rel="alternate" type="text/html" title="66. Plus One"/><published>2024-12-08T00:00:00+00:00</published><updated>2024-12-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/PlusOne</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/PlusOne/"><![CDATA[<ul> <li>You are given a <strong>large integer</strong> represented as an integer array <code class="language-plaintext highlighter-rouge">digits</code>, where each <code class="language-plaintext highlighter-rouge">digits[i]</code> is the <code class="language-plaintext highlighter-rouge">ith</code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code class="language-plaintext highlighter-rouge">0</code>’s.</li> <li>Increment the large integer by one and return <em>the resulting array of digits</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlusOne</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">plusOne</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Iterate from the least significant digit (rightmost) to the most significant (leftmost)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="c1">// If the current digit is less than 9, we can simply increment and return</span>
            <span class="c1">// This handles most cases where no carrying is needed</span>
            <span class="k">if</span><span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">){</span>
                <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>
                <span class="k">return</span> <span class="n">digits</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// If the current digit is 9, set it to 0 and continue to the next digit</span>
            <span class="c1">// This handles the carrying scenario</span>
            <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Special case: when all digits are 9 (e.g., [9,9,9])</span>
        <span class="c1">// We need to create a new array with an additional digit</span>
        <span class="c1">// The new array will have 1 at the most significant position</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">newDigits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="n">newDigits</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">newDigits</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Normal scenario - last digit less than 9</span>
        <span class="c1">// Input: [1,2,3] → Expected Output: [1,2,4]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1 - Input: [1,2,3], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Scenario with 9 at the end requiring carry</span>
        <span class="c1">// Input: [1,9,9] → Expected Output: [2,0,0]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2 - Input: [1,9,9], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: All 9s scenario - requires creating a new array</span>
        <span class="c1">// Input: [9,9,9] → Expected Output: [1,0,0,0]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3 - Input: [9,9,9], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result3</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">arrayToString</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s. Increment the large integer by one and return the resulting array of digits.]]></summary></entry><entry><title type="html">8. String to Integer (atoi)</title><link href="https://zhengstar94.github.io//blog/2024/StringToInteger/" rel="alternate" type="text/html" title="8. String to Integer (atoi)"/><published>2024-12-08T00:00:00+00:00</published><updated>2024-12-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/StringToInteger</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/StringToInteger/"><![CDATA[<ul> <li>Implement the <code class="language-plaintext highlighter-rouge">myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer.</li> <li>The algorithm for <code class="language-plaintext highlighter-rouge">myAtoi(string s)</code> is as follows: <ol> <li><strong>Whitespace</strong>: Ignore any leading whitespace (<code class="language-plaintext highlighter-rouge">" "</code>).</li> <li><strong>Signedness</strong>: Determine the sign by checking if the next character is <code class="language-plaintext highlighter-rouge">'-'</code> or <code class="language-plaintext highlighter-rouge">'+'</code>, assuming positivity if neither present.</li> <li><strong>Conversion</strong>: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.</li> <li><strong>Rounding</strong>: If the integer is out of the 32-bit signed integer range <code class="language-plaintext highlighter-rouge">[-231, 231 - 1]</code>, then round the integer to remain in the range. Specifically, integers less than <code class="language-plaintext highlighter-rouge">-231</code> should be rounded to <code class="language-plaintext highlighter-rouge">-231</code>, and integers greater than <code class="language-plaintext highlighter-rouge">231 - 1</code> should be rounded to <code class="language-plaintext highlighter-rouge">231 - 1</code>.</li> </ol> </li> <li>Return the integer as the final result.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "42"

Output: 42

Explanation:

The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
				 ^
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = " -042"

Output: -42

Explanation:

Step 1: "   -042" (leading whitespace is read and ignored)
            ^
Step 2: "   -042" ('-' is read, so the result should be negative)
             ^
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)
						   ^
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "1337c0d3"

Output: 1337

Explanation:

Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
         ^
Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "1337c0d3" ("1337" is read in; reading stops because the next character is a non-digit)       ^
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringToInteger</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">myAtoi</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Step 1: Remove leading and trailing whitespaces</span>
        <span class="c1">// Ensures no unnecessary spaces affect conversion</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>

        <span class="c1">// Step 2: Handle empty string case</span>
        <span class="c1">// If string is empty after trimming, return 0</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Step 3: Sign handling</span>
        <span class="c1">// Default to positive, track sign and starting index</span>
        <span class="kt">int</span> <span class="n">sign</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>  <span class="c1">// 1 for positive, -1 for negative</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Check for explicit sign character</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'-'</span><span class="o">){</span>
            <span class="c1">// Negative sign found</span>
            <span class="n">sign</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'+'</span><span class="o">){</span>
            <span class="c1">// Positive sign found (optional)</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="c1">// Step 4: Digit conversion</span>
        <span class="c1">// Use long to prevent intermediate overflow during conversion</span>
        <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Continue reading digits until non-digit or end of string</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="nc">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">))){</span>
            <span class="c1">// Convert character digit to numeric value</span>
            <span class="c1">// Subtracting '0' converts character to its numeric equivalent</span>
            <span class="kt">int</span> <span class="n">digit</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">;</span>

            <span class="c1">// Step 5: Overflow Prevention</span>
            <span class="c1">// Two-condition check to detect potential 32-bit integer overflow</span>
            <span class="c1">// Condition 1: result already exceeds MAX_VALUE / 10</span>
            <span class="c1">// Condition 2: result equals MAX_VALUE / 10 and next digit exceeds MAX_VALUE's last digit</span>
            <span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">/</span> <span class="mi">10</span> <span class="o">||</span>
                    <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">/</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">digit</span> <span class="o">&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">%</span> <span class="mi">10</span><span class="o">)</span>
            <span class="o">){</span>
                <span class="c1">// Handle overflow by returning boundary values</span>
                <span class="c1">// Depends on the sign of the number</span>
                <span class="k">return</span> <span class="n">sign</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">:</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Build number digit by digit</span>
            <span class="c1">// Multiply existing result by 10 and add new digit</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">digit</span><span class="o">;</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="c1">// Final step: Apply sign and convert to 32-bit integer</span>
        <span class="c1">// Multiplies result by sign and casts to int</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">sign</span> <span class="o">*</span> <span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test cases covering different scenarios</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">testCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"42"</span><span class="o">,</span>           <span class="c1">// Simple positive number</span>
                <span class="s">" -042"</span><span class="o">,</span>        <span class="c1">// Negative number with leading zeros and spaces</span>
                <span class="s">"1337c0d3"</span><span class="o">,</span>     <span class="c1">// Number with non-digit characters</span>
                <span class="s">"  +  413"</span><span class="o">,</span>     <span class="c1">// Invalid number with spaces</span>
                <span class="s">"words and 987"</span><span class="o">,</span><span class="c1">// Words before number</span>
                <span class="s">"-91283472332"</span><span class="o">,</span> <span class="c1">// Number beyond Integer.MIN_VALUE</span>
                <span class="s">"91283472332"</span>   <span class="c1">// Number beyond Integer.MAX_VALUE</span>
        <span class="o">};</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: \""</span> <span class="o">+</span> <span class="n">testCase</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">myAtoi</span><span class="o">(</span><span class="n">testCase</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer. The algorithm for myAtoi(string s) is as follows: Whitespace: Ignore any leading whitespace (" "). Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present. Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0. Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1. Return the integer as the final result.]]></summary></entry><entry><title type="html">28. Find the Index of the First Occurrence in a String</title><link href="https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString/" rel="alternate" type="text/html" title="28. Find the Index of the First Occurrence in a String"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString/"><![CDATA[<ul> <li>Given two strings <code class="language-plaintext highlighter-rouge">needle</code> and <code class="language-plaintext highlighter-rouge">haystack</code>, return the index of the first occurrence of <code class="language-plaintext highlighter-rouge">needle</code> in <code class="language-plaintext highlighter-rouge">haystack</code>, or <code class="language-plaintext highlighter-rouge">-1</code> if <code class="language-plaintext highlighter-rouge">needle</code> is not part of <code class="language-plaintext highlighter-rouge">haystack</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindTheIndexOfTheFirstOccurrenceInAString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">strStr</span><span class="o">(</span><span class="nc">String</span> <span class="n">haystack</span><span class="o">,</span> <span class="nc">String</span> <span class="n">needle</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the lengths of the haystack and needle</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// Special case: if needle is empty, return 0</span>
        <span class="k">if</span><span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Iterate through possible starting positions in haystack</span>
        <span class="c1">// Stop at n - m to prevent index out of bounds</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>

            <span class="c1">// Index used to iterate through the characters of the needle (substring)</span>
            <span class="c1">// Helps track the current character position during the matching process</span>
            <span class="c1">// Resets to 0 for each new potential starting position in the haystack</span>
            <span class="kt">int</span> <span class="n">j</span><span class="o">;</span>

            <span class="c1">// Compare characters in the current window</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// If characters don't match, break the inner loop</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">haystack</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="n">needle</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// If all characters in the window match the needle</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Return the starting index of the match</span>
                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If no match is found after checking all possible positions</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Standard matching</span>
        <span class="nc">String</span> <span class="n">haystack1</span> <span class="o">=</span> <span class="s">"sadbutsad"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle1</span> <span class="o">=</span> <span class="s">"sad"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack1</span><span class="o">,</span> <span class="n">needle1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: No matching substring</span>
        <span class="nc">String</span> <span class="n">haystack2</span> <span class="o">=</span> <span class="s">"leetcode"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle2</span> <span class="o">=</span> <span class="s">"leeto"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack2</span><span class="o">,</span> <span class="n">needle2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Empty needle</span>
        <span class="nc">String</span> <span class="n">haystack3</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle3</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack3</span><span class="o">,</span> <span class="n">needle3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Multiple possible matches, return the first</span>
        <span class="nc">String</span> <span class="n">haystack4</span> <span class="o">=</span> <span class="s">"mississippi"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle4</span> <span class="o">=</span> <span class="s">"issip"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack4</span><span class="o">,</span> <span class="n">needle4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.]]></summary></entry></feed>