<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-04T05:20:28+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">blank</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">227.Basic Calculator II</title><link href="https://zhengstar94.github.io//blog/2024/BasicCalculatorII/" rel="alternate" type="text/html" title="227.Basic Calculator II"/><published>2024-11-04T00:00:00+00:00</published><updated>2024-11-04T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/BasicCalculatorII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/BasicCalculatorII/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code> which represents an expression, <em>evaluate this expression and return its value</em>.</li> <li>The integer division should truncate toward zero.</li> <li>You may assume that the given expression is always valid. All intermediate results will be in the range of <code class="language-plaintext highlighter-rouge">[-231, 231 - 1]</code>.</li> <li><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code class="language-plaintext highlighter-rouge">eval()</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "3+2*2"
Output: 7
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = " 3/2 "
Output: 1
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = " 3+5 / 2 "
Output: 5
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Stack</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/11/04
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BasicCalculatorII</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">calculate</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases: empty or null string</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Stack to store numbers. For subtraction, we store negative numbers</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="c1">// Initial sign is '+', used to track the previous operator</span>
        <span class="kt">char</span> <span class="n">sign</span> <span class="o">=</span> <span class="sc">'+'</span><span class="o">;</span>
        <span class="c1">// Accumulator for building multi-digit numbers</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate through each character in the expression</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

            <span class="c1">// If current character is a digit, build the number</span>
            <span class="c1">// For example: "14" -&gt; first digit '1': num = 0*10 + 1 = 1</span>
            <span class="c1">//                  -&gt; second digit '4': num = 1*10 + 4 = 14</span>
            <span class="k">if</span> <span class="o">(</span><span class="nc">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="o">(</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="c1">// Process the number when we hit an operator or reach the end of string</span>
            <span class="c1">// The condition "i == s.length() - 1" ensures we process the last number</span>
            <span class="k">if</span> <span class="o">(!</span><span class="nc">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">!=</span> <span class="sc">' '</span> <span class="o">||</span> <span class="n">i</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Process the number based on the previous operator (sign)</span>
                <span class="k">switch</span> <span class="o">(</span><span class="n">sign</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">case</span> <span class="sc">'+'</span><span class="o">:</span>
                        <span class="c1">// For addition, simply push the number</span>
                        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="sc">'-'</span><span class="o">:</span>
                        <span class="c1">// For subtraction, push the negative number</span>
                        <span class="c1">// This converts "a-b" to "a+(-b)"</span>
                        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(-</span><span class="n">num</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="sc">'*'</span><span class="o">:</span>
                        <span class="c1">// For multiplication, multiply with previous number</span>
                        <span class="c1">// Pop the previous number, multiply, and push result</span>
                        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span> <span class="o">*</span> <span class="n">num</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="k">case</span> <span class="sc">'/'</span><span class="o">:</span>
                        <span class="c1">// For division, divide the previous number</span>
                        <span class="c1">// Pop the previous number, divide, and push result</span>
                        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">()</span> <span class="o">/</span> <span class="n">num</span><span class="o">);</span>
                        <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="c1">// Update sign for next iteration</span>
                <span class="n">sign</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
                <span class="c1">// Reset number accumulator</span>
                <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Calculate final result by summing all numbers in stack</span>
        <span class="c1">// For example: 14-3*2 -&gt; stack will contain [14, -6]</span>
        <span class="c1">// Final result will be 14 + (-6) = 8</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases array</span>
        <span class="c1">// Each expression demonstrates different operator combinations</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">expressions</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"3+2*2"</span><span class="o">,</span>      <span class="c1">// Tests multiplication precedence: 3+(2*2) = 7</span>
                <span class="s">"14-3*2"</span><span class="o">,</span>     <span class="c1">// Tests subtraction and multiplication: 14+(-3*2) = 8</span>
                <span class="s">"100-20*3+2"</span><span class="o">,</span> <span class="c1">// Tests complex expression: 100+(-20*3)+2 = 42</span>
                <span class="s">"3/2"</span><span class="o">,</span>        <span class="c1">// Tests division: = 1 (integer division truncates)</span>
                <span class="s">"2*3*4"</span>       <span class="c1">// Tests multiple multiplications: = 24</span>
        <span class="o">};</span>

        <span class="c1">// Process each test case and print results</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">exp</span> <span class="o">:</span> <span class="n">expressions</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">calculate</span><span class="o">(</span><span class="n">exp</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"表达式: "</span> <span class="o">+</span> <span class="n">exp</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Stack"/><summary type="html"><![CDATA[Given a string s which represents an expression, evaluate this expression and return its value. The integer division should truncate toward zero. You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1]. Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().]]></summary></entry><entry><title type="html">Design a URL Shortener</title><link href="https://zhengstar94.github.io//blog/2024/DesignAURLShortener/" rel="alternate" type="text/html" title="Design a URL Shortener"/><published>2024-11-03T00:00:00+00:00</published><updated>2024-11-03T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/DesignAURLShortener</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/DesignAURLShortener/"><![CDATA[<h2 id="understanding-the-problem-what-is-a-url-shortener">Understanding the Problem (What is a URL Shortener)</h2> <p>A URL shortening service (abbreviated as short link) is a web service that converts long URLs into shorter ones. Whenever users visit this short link, the system automatically redirects them to the original long URL.</p> <h3 id="why-do-we-need-url-shortening-services">Why Do We Need URL Shortening Services?</h3> <p>URL shortening services primarily address several practical issues:</p> <ol> <li>Enhanced User Experience <ul> <li>Generated links are shorter, easier to share and remember</li> <li>Users are less likely to mistype URLs</li> <li>More practical on social media platforms with character limits</li> </ul> </li> <li>Link Management <ul> <li>Ability to track link clicks</li> <li>Support for cross-device access statistics</li> <li>Convenient management and analysis of multiple links</li> </ul> </li> <li>Technical Features <ul> <li>Highly scalable system architecture</li> <li>Guarantee of short link uniqueness</li> <li>Quick redirect response</li> </ul> </li> </ol> <h3 id="example">Example</h3> <p>Consider a lengthy shopping link:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://www.example.com/shop/category/electronics/phones/iphone-15-pro-max?color=black&amp;storage=256gb&amp;seller=official
</code></pre></div></div> <p>After using the URL shortening service, it can be converted to:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://xy.ly/3xyzABC
</code></pre></div></div> <p>This concise link is not only easier to share but also enables tracking of visits, greatly improving link usability.</p> <h2 id="requirements">Requirements</h2> <h3 id="functional-requirements">Functional Requirements</h3> <ol> <li>Users can submit a long URL and receive a shorter, unique alias</li> <li>When users visit the short link, the system redirects them to the original link</li> <li>Users can specify custom aliases for their URLs</li> <li>The system provides default validity periods for generated links, and users can customize expiration times</li> </ol> <h3 id="non-functional-requirements">Non-Functional Requirements</h3> <ol> <li>The system needs to ensure 99.99% high availability, with redirect latency controlled within 100ms</li> <li>Support for storing 1 billion short links and handling billions of daily active users</li> <li>Generated short links must be unpredictable, with anti-abuse mechanisms to ensure system security</li> <li>Ensure short links are globally unique without conflicts, prioritizing availability over strong consistency in system design</li> <li>Provide REST API interfaces supporting link access statistics and analysis functionality</li> </ol> <h2 id="estimates-and-constraints">Estimates and Constraints</h2> <h3 id="traffic">Traffic</h3> <p>As this is a read-heavy system, we assume a read-to-write ratio of <strong>100:1</strong>, generating 100 million short links per month</p> <p><strong>Monthly Read/Write Volume</strong></p> <ul> <li>Read volume: 100 × 100 million = 10 billion/month</li> <li>Write volume: 1 × 100 million = 100 million/month</li> </ul> <p><strong>Requests Per Second (RPS)</strong></p> <ul> <li>Converting 100 million monthly requests to requests per second: approximately 40 requests per second <ul> <li>100 million/(30 days × 24 hrs × 3600 seconds) = ~40 URLs/second</li> </ul> </li> <li>Considering the 100:1 read-to-write ratio, redirect count: <ul> <li>100 × 40 URLs/second = 4000 requests/second</li> </ul> </li> </ul> <p><strong>Bandwidth</strong></p> <ul> <li>For write requests (inbound traffic): <ul> <li>Assuming each request is 500 bytes</li> <li>40 × 500 bytes = 20 KB/second</li> </ul> </li> <li>For read requests (outbound traffic): <ul> <li>4000 URLs/second × 500 bytes = ~2 MB/second</li> </ul> </li> </ul> <p><strong>Storage</strong></p> <ul> <li>Assuming 10-year storage in database</li> <li>Total number of records to store: <ul> <li>100 million × 10 years × 12 months = 12 billion</li> </ul> </li> <li>Assuming each record takes 500 bytes, total storage space: <ul> <li>12 billion × 500 bytes = 6 TB</li> </ul> </li> </ul> <p><strong>Caching</strong></p> <ul> <li>Applying the classic Pareto principle (80/20 rule)</li> <li>Means 80% of requests target 20% of data, so we cache 20% of requests</li> <li>Daily request calculation: <ul> <li>4000 URLs/second × 24 hours × 3600 seconds = ~350 million requests/day</li> </ul> </li> <li>Required cache memory: <ul> <li>20 percent × 350 million × 500 bytes = 35 GB/day</li> </ul> </li> </ul> <p><strong>High-Level Estimates</strong></p> <table> <thead> <tr> <th>Type</th> <th>Estimate</th> </tr> </thead> <tbody> <tr> <td>Write (New URLs)</td> <td>40/s</td> </tr> <tr> <td>Read (Redirects)</td> <td>4K/s</td> </tr> <tr> <td>Bandwidth (Inbound)</td> <td>20 KB/s</td> </tr> <tr> <td>Bandwidth (Outbound)</td> <td>2 MB/s</td> </tr> <tr> <td>Storage (10 years)</td> <td>6 TB</td> </tr> <tr> <td>Memory (Cache)</td> <td>~35 GB/day</td> </tr> </tbody> </table> <h2 id="apis">APIs</h2> <h3 id="1-create-short-link-api">1. Create Short Link API</h3> <p><strong>Description</strong>: This API allows users to submit a long URL and returns a short link, with options for custom aliases and expiration dates.</p> <p><strong>Request</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST /urls
<span class="o">{</span>
  <span class="s2">"long_url"</span>: <span class="s2">"https://www.example.com/some/very/long/url"</span>,
  <span class="s2">"custom_alias"</span>: <span class="s2">"optional_custom_alias"</span>,
  <span class="s2">"expiration_date"</span>: <span class="s2">"optional_expiration_date"</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Response</strong>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"short_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://short.ly/abc123"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="2-redirect-to-long-url-api">2. Redirect to Long URL API</h3> <p><strong>Description</strong>: This API handles redirect requests when users visit short links, ensuring users are successfully redirected to the original long URL.</p> <p><strong>Request</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /<span class="o">{</span>short_code<span class="o">}</span>
</code></pre></div></div> <p><strong>Response</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP 302 Found
Location: <span class="s2">"https://www.example.com/some/very/long/url"</span>
</code></pre></div></div> <hr/> <h3 id="3-get-short-link-information-api">3. Get Short Link Information API</h3> <p><strong>Description</strong>: This API allows users to query detailed information about short links, including long URL, creation time, expiration time, and click count.</p> <p><strong>Request</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET /urls/<span class="o">{</span>short_code<span class="o">}</span>
</code></pre></div></div> <p><strong>Response</strong>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"long_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://www.example.com/some/very/long/url"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"short_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://short.ly/abc123"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"custom_alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"optional_custom_alias"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"creation_date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-01-01T12:00:00Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"expiration_date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-12-31T23:59:59Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"click_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">150</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="4-update-short-link-information-api">4. Update Short Link Information API</h3> <p><strong>Description</strong>: This API allows users to update properties of existing short links, such as custom aliases and expiration dates.</p> <p><strong>Request</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PUT /urls/<span class="o">{</span>short_code<span class="o">}</span>
<span class="o">{</span>
  <span class="s2">"custom_alias"</span>: <span class="s2">"new_custom_alias"</span>,
  <span class="s2">"expiration_date"</span>: <span class="s2">"new_optional_expiration_date"</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Response</strong>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"short_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://short.ly/abc123"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"long_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://www.example.com/some/very/long/url"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"custom_alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"new_custom_alias"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"expiration_date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"new_optional_expiration_date"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <hr/> <h3 id="5-delete-short-link-api">5. Delete Short Link API</h3> <p><strong>Description</strong>: This API allows users to delete short links that are no longer needed for management and maintenance purposes.</p> <p><strong>Request</strong>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DELETE /urls/<span class="o">{</span>short_code<span class="o">}</span>
</code></pre></div></div> <p><strong>Response</strong>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Short URL successfully deleted."</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h2 id="database-design">Database Design</h2> <p>Since the data doesn’t require a strong relational structure, we can choose a NoSQL database to better handle the high concurrency and flexibility requirements of the URL shortening system. Here we’ll use a document database (such as <strong>MongoDB</strong>) to illustrate the data model design.</p> <h3 id="urls-collection">URLs Collection</h3> <p><strong>Collection Name</strong>: <code class="language-plaintext highlighter-rouge">urls</code></p> <table> <thead> <tr> <th>Field Name</th> <th>Data Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>_id</td> <td>ObjectId</td> <td>Automatically generated unique identifier by MongoDB</td> </tr> <tr> <td>short_code</td> <td>String</td> <td>Short link identifier (unique)</td> </tr> <tr> <td>long_url</td> <td>String</td> <td>Original long URL</td> </tr> <tr> <td>custom_alias</td> <td>String</td> <td>User-defined alias (optional)</td> </tr> <tr> <td>creation_date</td> <td>Date</td> <td>Creation date</td> </tr> <tr> <td>expiration_date</td> <td>Date</td> <td>Short link expiration date (optional)</td> </tr> <tr> <td>click_count</td> <td>Number</td> <td>Number of times short link clicked (default 0)</td> </tr> </tbody> </table> <p><strong>Example Document</strong>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"64e5f2c3d5b6b9a01d2f4e12"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"short_code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"abc123"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"long_url"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://www.example.com/some/very/long/url"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"custom_alias"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-custom-alias"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"creation_date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-11-03T12:00:00Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"expiration_date"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-12-31T23:59:59Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"click_count"</span><span class="p">:</span><span class="w"> </span><span class="mi">150</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="users-collection-optional">Users Collection (Optional)</h3> <p><strong>Collection Name</strong>: <code class="language-plaintext highlighter-rouge">users</code></p> <table> <thead> <tr> <th>Field Name</th> <th>Data Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>_id</td> <td>ObjectId</td> <td>Automatically generated unique identifier by MongoDB</td> </tr> <tr> <td>username</td> <td>String</td> <td>Username (unique)</td> </tr> <tr> <td>password_hash</td> <td>String</td> <td>Password hash value</td> </tr> <tr> <td>email</td> <td>String</td> <td>User email (unique)</td> </tr> <tr> <td>created_at</td> <td>Date</td> <td>User registration date</td> </tr> </tbody> </table> <p><strong>Example Document</strong>:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"64e5f2c3d5b6b9a01d2f4e34"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"john_doe"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"password_hash"</span><span class="p">:</span><span class="w"> </span><span class="s2">"hashed_password_example"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"email"</span><span class="p">:</span><span class="w"> </span><span class="s2">"john.doe@example.com"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"created_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2024-10-01T15:30:00Z"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <h3 id="design-features-and-considerations">Design Features and Considerations</h3> <ul> <li><strong>High Concurrency Support</strong>: MongoDB naturally supports horizontal scaling, facilitating large-scale read/write operations</li> <li><strong>Index Optimization</strong>: <ul> <li>Create unique indexes on <code class="language-plaintext highlighter-rouge">short_code</code> and <code class="language-plaintext highlighter-rouge">custom_alias</code> fields to ensure query efficiency and data uniqueness</li> <li>Create unique indexes on <code class="language-plaintext highlighter-rouge">username</code> and <code class="language-plaintext highlighter-rouge">email</code> fields in the users collection to ensure user data uniqueness</li> </ul> </li> <li><strong>TTL Index</strong>: Can set TTL index on <code class="language-plaintext highlighter-rouge">expiration_date</code> field to automatically clean expired short link data</li> </ul> <h2 id="high-level-design">High-Level Design</h2> <h3 id="1-encoding-urls">1. Encoding URLs</h3> <p>When designing a URL shortening service, ensuring that generated short codes are unique and efficient is crucial.</p> <ul> <li><strong>Uniqueness</strong>: Ensure generated short codes are unique in the database to avoid redirect errors</li> <li><strong>Conciseness</strong>: Keep short codes as brief as possible to enhance user experience and shareability</li> <li><strong>Efficiency</strong>: Make the encoding process efficient to support high-concurrency URL generation requests</li> </ul> <blockquote> <p>We adopt a counter-based approach combined with Base62 encoding to achieve this goal</p> </blockquote> <h4 id="encoding-method-based-on-unique-counter-and-base62">Encoding Method: Based on Unique Counter and Base62</h4> <ol> <li><strong>Uniqueness Guarantee</strong>: <ul> <li>Use a global counter to track unique numbers for each new URL. The counter increments each time a new URL needs a short code, ensuring each value is unique.</li> <li>Convert counter values to strings composed of lowercase letters (a-z), uppercase letters (A-Z), and numbers (0-9) using Base62 encoding. This encoding method generates short codes that are concise and human-readable.</li> </ul> </li> <li><strong>Efficient Generation</strong>: <ul> <li>Each counter value directly maps to a short code, eliminating the need for additional hash calculations or database conflict checks.</li> <li>The process of generating and looking up short codes is efficient, supporting high-throughput system requirements.</li> </ul> </li> </ol> <p>Considering the system’s requirement to generate approximately <strong>12 billion URLs</strong> annually:</p> <ul> <li>Using <strong>6 characters</strong> encoding can meet about <strong>4.7 years</strong> of demand (56.8 billion / 12 billion ≈ 4.7 years).</li> <li>Using <strong>7 characters</strong> encoding can support <strong>29+ years</strong> of demand, capable of handling additional load from future traffic increases.</li> </ul> <p>This design not only ensures short code uniqueness and generation efficiency but also provides high scalability to support long-term system growth.</p> <h4 id="conflict-issues">Conflict Issues</h4> <p>This approach presents a potential issue as it might lead to duplicates or conflicts in the database (although unlikely). One solution is to use a counter that tracks counts (0-3.5 trillion), ensuring that encoding the counter value in each case guarantees no duplicates or conflicts will occur.</p> <p><strong>Let’s examine how to use the counter.</strong> We’ll use a server to maintain the counter. Whenever application servers receive requests, they communicate with the counter, which returns a unique number and increments the count.</p> <p>The counter is an incremental number used to track generated URLs (e.g., starting from <code class="language-plaintext highlighter-rouge">0</code> and incrementing up to 3.5 trillion). Each time a new URL request arrives, the counter returns the current value and automatically increments. This method ensures each generated short code is unique, thus avoiding conflict risks.</p> <p><strong>However, this raises two issues</strong></p> <ol> <li>Single point of failure.</li> <li>Our counter host might not handle request surges effectively.</li> </ol> <p>In this case, we’ll utilize a distributed system manager like Zookeeper. Here’s how a distributed system manager like Zookeeper addresses our issues:</p> <ol> <li><strong>Unused Range Allocation</strong>: Zookeeper assigns unique counter ranges to each application server. For example, one server might get range <code class="language-plaintext highlighter-rouge">1 → 1,000,000</code>, another <code class="language-plaintext highlighter-rouge">1,000,001 → 2,000,000</code>.</li> <li><strong>Multiple Instance Deployment</strong>: To prevent Zookeeper itself from becoming a single point of failure, we run multiple Zookeeper instances. Even if one instance fails, others can continue allocating ranges to application servers, ensuring high availability.</li> <li><strong>Dynamic Range Allocation</strong>: If a server exhausts its allocated range, it can request a new unused range from Zookeeper to continue serving new requests.</li> <li><strong>Range Waste Tolerance</strong>: If a server fails before exhausting its range, some keys might be wasted. However, given our total of 3.5 trillion keys, this waste is acceptable and won’t impact overall system availability.</li> <li><strong>Adding Randomness</strong>: To prevent security threats from sequential URL generation, we can append 10-15 random digits to counter-generated values. This makes short codes harder for malicious users to predict and exploit.</li> </ol> <p><strong>But isn’t using ZooKeeper as a counter potentially over-engineering?</strong> This is a valid point for discussion. While ZooKeeper provides powerful functionality for managing counters in distributed systems, it might seem overly complex in some scenarios. For smaller systems with moderate request volumes, a simple counter might suffice. When designing systems, we need to balance complexity against actual requirements, ensuring our chosen solution meets current needs while allowing for future expansion.</p> <p>Additionally, using Redis as a counter is a popular alternative. Redis’s fast read-write capabilities and support for atomic operations make it perform well in handling high-concurrency requests. Compared to ZooKeeper, Redis is typically simpler to set up and manage, making it suitable for rapid prototyping or smaller-scale systems. However, Redis also risks losing counter records during outages, which might require mitigation through persistence or periodic backups. The choice between Redis and ZooKeeper depends on specific system requirements, expected request volume, and availability and data consistency requirements.</p> <h4 id="specific-process">Specific Process</h4> <ol> <li><strong>Receive Long URL</strong>: <ul> <li>Users submit long URLs for shortening, along with optional custom aliases and expiration dates (if any).</li> </ul> </li> <li><strong>Increment Counter</strong>: <ul> <li>System retrieves current counter value from database or distributed storage.</li> <li>Counter auto-increments to generate a new unique ID.</li> </ul> </li> <li><strong>Base62 Encoding</strong>: <ul> <li>Apply Base62 encoding to the incremented counter value to obtain a short code.</li> <li>Take first N characters (e.g., 7 characters) of encoding result as needed.</li> </ul> </li> <li><strong>Save to Database</strong>: <ul> <li>Store long URL, short code, optional custom alias, creation date, expiration date, and click count in the URLs table of the database.</li> <li>Ensure short codes are unique in database through index optimization.</li> </ul> </li> <li><strong>Return Short Link</strong>: <ul> <li>Return generated short URL to user in format <code class="language-plaintext highlighter-rouge">http://short.ly/{short_code}</code>.</li> </ul> </li> <li><strong>Handle Redirect Requests</strong>: <ul> <li>When users visit generated short links, system receives redirect requests.</li> <li>Look up long URL in database using short code.</li> <li>Record click count, update database click counter.</li> <li>Finally, redirect users to original long URL.</li> </ul> </li> </ol> <h5 id="pseudocode-demonstration">Pseudocode Demonstration</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">function</span> <span class="nf">shortenUrl</span><span class="p">(</span><span class="n">longUrl</span><span class="p">,</span> <span class="n">customAlias</span> <span class="o">=</span> <span class="n">null</span><span class="p">,</span> <span class="n">expirationDate</span> <span class="o">=</span> <span class="n">null</span><span class="p">):</span>
    <span class="o">//</span> <span class="n">Step</span> <span class="mi">1</span><span class="p">:</span> <span class="n">Receive</span> <span class="nb">long</span> <span class="n">URL</span>
    <span class="k">if</span> <span class="nf">isValidUrl</span><span class="p">(</span><span class="n">longUrl</span><span class="p">)</span> <span class="ow">is</span> <span class="n">false</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">error</span><span class="p">(</span><span class="sh">"</span><span class="s">Invalid URL</span><span class="sh">"</span><span class="p">)</span>

    <span class="o">//</span> <span class="n">Step</span> <span class="mi">2</span><span class="p">:</span> <span class="n">Increment</span> <span class="n">counter</span>
    <span class="n">newId</span> <span class="o">=</span> <span class="nf">getNextCounterValue</span><span class="p">()</span> <span class="o">//</span> <span class="n">Counter</span> <span class="n">auto</span><span class="o">-</span><span class="n">increments</span>

    <span class="o">//</span> <span class="n">Step</span> <span class="mi">3</span><span class="p">:</span> <span class="n">Base62</span> <span class="n">encoding</span>
    <span class="n">shortCode</span> <span class="o">=</span> <span class="nf">base62Encode</span><span class="p">(</span><span class="n">newId</span><span class="p">)</span> <span class="o">//</span> <span class="n">Base62</span> <span class="n">encode</span> <span class="n">counter</span> <span class="n">value</span>

    <span class="o">//</span> <span class="n">Step</span> <span class="mi">4</span><span class="p">:</span> <span class="n">Save</span> <span class="n">to</span> <span class="n">database</span>
    <span class="nf">saveToDatabase</span><span class="p">(</span><span class="n">longUrl</span><span class="p">,</span> <span class="n">shortCode</span><span class="p">,</span> <span class="n">customAlias</span><span class="p">,</span> <span class="n">expirationDate</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">//</span> <span class="n">Click</span> <span class="n">count</span> <span class="n">starts</span> <span class="n">at</span> <span class="mi">0</span>

    <span class="o">//</span> <span class="n">Step</span> <span class="mi">5</span><span class="p">:</span> <span class="n">Return</span> <span class="n">short</span> <span class="n">link</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">http://short.ly/</span><span class="sh">"</span> <span class="o">+</span> <span class="n">shortCode</span>

<span class="n">function</span> <span class="nf">redirect</span><span class="p">(</span><span class="n">shortCode</span><span class="p">):</span>
    <span class="o">//</span> <span class="n">Step</span> <span class="mi">6</span><span class="p">:</span> <span class="n">Handle</span> <span class="n">redirect</span> <span class="n">requests</span>
    <span class="n">longUrl</span> <span class="o">=</span> <span class="nf">findLongUrlByShortCode</span><span class="p">(</span><span class="n">shortCode</span><span class="p">)</span> <span class="o">//</span> <span class="n">Look</span> <span class="n">up</span> <span class="nb">long</span> <span class="n">URL</span> <span class="n">by</span> <span class="n">short</span> <span class="n">code</span>
    <span class="k">if</span> <span class="n">longUrl</span> <span class="ow">is</span> <span class="n">null</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">error</span><span class="p">(</span><span class="sh">"</span><span class="s">URL not found</span><span class="sh">"</span><span class="p">)</span>

    <span class="nf">incrementClickCount</span><span class="p">(</span><span class="n">shortCode</span><span class="p">)</span> <span class="o">//</span> <span class="n">Update</span> <span class="n">click</span> <span class="n">count</span>
    <span class="nf">redirectUser</span><span class="p">(</span><span class="n">longUrl</span><span class="p">)</span> <span class="o">//</span> <span class="n">Redirect</span> <span class="n">user</span> <span class="n">to</span> <span class="nb">long</span> <span class="n">URL</span>
</code></pre></div></div> <h3 id="2-caching">2. Caching</h3> <p>When handling a large URL shortener database, quickly finding the correct match is crucial for a smooth user experience. Without optimization, the system would need to check every short URL and original URL pair in the database to find what we want, and this “full table scan” is very slow, especially when URL count grows to millions or billions. Therefore, optimizing the reading process is particularly important.</p> <h4 id="implementing-memory-cache">Implementing Memory Cache</h4> <p>To improve redirect speed, we can introduce a memory cache (like Redis or Memcached) between application servers and the database. This cache stores frequently accessed mappings of short codes to long URLs. When a redirect request arrives, the server first checks the cache. If the short code is found in cache (cache hit), the server retrieves the long URL from cache, significantly reducing latency. If not found (cache miss), the server queries the database, retrieves the long URL, then stores it in cache for future requests. To enhance URL redirect speed, we’ll use the Least Recently Used (LRU) algorithm as the cache eviction strategy. The LRU algorithm monitors short link usage in cache and automatically removes least recently accessed entries when cache reaches maximum capacity, making room for new data.</p> <h4 id="process-of-caching-short-links">Process of Caching Short Links</h4> <ol> <li><strong>Cache Design</strong>: Map short links as keys to original URLs as values, stored in a structure supporting fast lookup and updates (like hash table combined with doubly linked list).</li> <li><strong>Cache Hit</strong>: <ul> <li>When short link is requested, first check cache:</li> </ul> <ul> <li><strong>Hit</strong>: Return original URL directly from cache.</li> <li><strong>Miss</strong>: Query database, get original URL, store in cache, and update usage order.</li> </ul> </li> <li><strong>Automatic Updates</strong>: When cache is full, LRU algorithm deletes least recently used short links, ensuring cache retains most frequently used entries.</li> </ol> <h3 id="3-scaling">3. Scaling</h3> <h4 id="1-what-measures-can-we-take-to-ensure-high-availability-if-the-database-fails">1. What measures can we take to ensure high availability if the database fails?</h4> <ol> <li><strong>Database Replication</strong>: By using databases supporting replication (like Postgres), we can create multiple identical copies of the database on different servers. If one server fails, we can redirect to another. This increases system design complexity as we now need to ensure our primary server can interact with any replica without issues. This can be challenging and increases operational overhead.</li> <li><strong>Database Backup</strong>: We can also implement a backup system that takes periodic snapshots of the database and stores them in separate locations. This increases system design complexity as we now need to ensure the primary server can interact with backups without issues. This can be challenging and increases operational overhead.</li> </ol> <h4 id="2-how-can-we-architect-the-primary-server-to-handle-high-frequency-read-demands">2. How can we architect the primary server to handle high-frequency read demands?</h4> <ul> <li>We can scale the primary server by separating read and write operations, adopting a microservices architecture. Read services focus on handling redirect requests, while write services handle creating new short URLs. This allows independent scaling of each service based on their specific requirements to handle load.</li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2024/11/DesignaURLShortener-480.webp 480w,/assets/img/2024/11/DesignaURLShortener-800.webp 800w,/assets/img/2024/11/DesignaURLShortener-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2024/11/DesignaURLShortener.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure>]]></content><author><name></name></author><category term="System Design New"/><category term="System"/><category term="Design"/><summary type="html"><![CDATA[Understanding the Problem (What is a URL Shortener)]]></summary></entry><entry><title type="html">1380. Lucky Numbers in a Matrix</title><link href="https://zhengstar94.github.io//blog/2024/LuckyNumbersInAMatrix/" rel="alternate" type="text/html" title="1380. Lucky Numbers in a Matrix"/><published>2024-11-02T00:00:00+00:00</published><updated>2024-11-02T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/LuckyNumbersInAMatrix</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/LuckyNumbersInAMatrix/"><![CDATA[<ul> <li>Given an <code class="language-plaintext highlighter-rouge">m x n</code> matrix of <strong>distinct</strong> numbers, return <em>all <strong>lucky numbers</strong> in the matrix in <strong>any</strong> order</em>.</li> <li>A <strong>lucky number</strong> is an element of the matrix such that it is the minimum element in its row and maximum in its column.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m * n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/11/02
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LuckyNumbersInAMatrix</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">luckyNumbers</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Iterate through each row of the matrix</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Find the column index of minimum element in current row</span>
            <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">findMinCol</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">matrix</span><span class="o">);</span>

            <span class="c1">// Check if this minimum element is also maximum in its column</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">confirmCol</span><span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">col</span><span class="o">],</span> <span class="n">col</span><span class="o">,</span> <span class="n">matrix</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">col</span><span class="o">]);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findMinCol</span><span class="o">(</span><span class="kt">int</span> <span class="n">row</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">minRow</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Column index of minimum element</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>  <span class="c1">// Current minimum value</span>

        <span class="c1">// Iterate through each column in the specified row</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">col</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Update minimum value and its column index if current element is smaller</span>
            <span class="k">if</span><span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="o">){</span>
                <span class="n">min</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">];</span>
                <span class="n">minRow</span> <span class="o">=</span> <span class="n">col</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">minRow</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">confirmCol</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Check each element in the specified column</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// If any element is greater than our number, return false</span>
            <span class="k">if</span><span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">){</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// If no greater element found, return true</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Expected output [15]</span>
        <span class="c1">// Matrix where 15 is minimum in its row and maximum in its column</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix1</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">13</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">15</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">17</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">luckyNumbers</span><span class="o">(</span><span class="n">matrix1</span><span class="o">));</span>

        <span class="c1">// Test case 2: Expected output [12]</span>
        <span class="c1">// Matrix where 12 is minimum in its row and maximum in its column</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix2</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">15</span><span class="o">,</span> <span class="mi">16</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">12</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">luckyNumbers</span><span class="o">(</span><span class="n">matrix2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Expected output [7]</span>
        <span class="c1">// Small matrix where 7 is minimum in its row and maximum in its column</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix3</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">luckyNumbers</span><span class="o">(</span><span class="n">matrix3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><summary type="html"><![CDATA[Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order. A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.]]></summary></entry><entry><title type="html">953.Verifying an Alien Dictionary</title><link href="https://zhengstar94.github.io//blog/2024/VerifyingAnAlienDictionary/" rel="alternate" type="text/html" title="953.Verifying an Alien Dictionary"/><published>2024-11-01T00:00:00+00:00</published><updated>2024-11-01T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/VerifyingAnAlienDictionary</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/VerifyingAnAlienDictionary/"><![CDATA[<ul> <li>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code class="language-plaintext highlighter-rouge">order</code>. The <code class="language-plaintext highlighter-rouge">order</code> of the alphabet is some permutation of lowercase letters.</li> <li>Given a sequence of <code class="language-plaintext highlighter-rouge">words</code> written in the alien language, and the <code class="language-plaintext highlighter-rouge">order</code> of the alphabet, return <code class="language-plaintext highlighter-rouge">true</code> if and only if the given <code class="language-plaintext highlighter-rouge">words</code> are sorted lexicographically in this alien language.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = [ "hello","leetcode" ], order = "hlabcdefgijkmnopqrstuvwxyz"
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = [ "word","world","row" ], order = "worldabcefghijkmnpqstuvxyz"
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] &gt; words[1], hence the sequence is unsorted.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = [ "apple","app" ], order = "abcdefghijklmnopqrstuvwxyz"
Output: false
Explanation: The first three characters "app" match, and the second string is shorter (in size.) According to lexicographical rules "apple" &gt; "app", because 'l' &gt; '∅', where '∅' is defined as the blank character which is less than any other character (More info).
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m * n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.HashTable</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/11/01
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">VerifyingAnAlienDictionary</span> <span class="o">{</span>
    <span class="c1">// Character mapping array to store the order of characters in alien dictionary</span>
    <span class="c1">// Index represents the character (a-z), value represents its position in alien order</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">charMap</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isAlienSorted</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">,</span> <span class="nc">String</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize character mapping array (size 26 for lowercase letters a-z)</span>
        <span class="n">charMap</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>

        <span class="c1">// Build character mapping: store each character's position in the alien order</span>
        <span class="c1">// For example: if order = "hlabcd", then h-&gt;0, l-&gt;1, a-&gt;2, b-&gt;3, etc.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">charMap</span><span class="o">[</span><span class="n">order</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Compare adjacent words pairwise</span>
        <span class="c1">// If any pair is in wrong order, return false</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">compare</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">words</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>  <span class="c1">// Current word is greater than next word (wrong order)</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>  <span class="c1">// All pairs are in correct order</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">String</span> <span class="n">word1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">word2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get lengths of both words</span>
        <span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">word1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">word2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// Find the length of shorter word to avoid ArrayIndexOutOfBounds</span>
        <span class="kt">int</span> <span class="n">minLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">len1</span><span class="o">,</span> <span class="n">len2</span><span class="o">);</span>

        <span class="c1">// Compare characters at each position</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">minLen</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">c1</span> <span class="o">=</span> <span class="n">word1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="kt">char</span> <span class="n">c2</span> <span class="o">=</span> <span class="n">word2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">c1</span> <span class="o">!=</span> <span class="n">c2</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If characters differ, compare their positions in alien order</span>
                <span class="c1">// charMap[c1-'a'] gives position of c1 in alien order</span>
                <span class="k">return</span> <span class="n">charMap</span><span class="o">[</span><span class="n">c1</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">-</span> <span class="n">charMap</span><span class="o">[</span><span class="n">c2</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If all characters match up to minLen, longer word should come after</span>
        <span class="c1">// Example: "app" should come before "apple"</span>
        <span class="k">return</span> <span class="n">len1</span> <span class="o">-</span> <span class="n">len2</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Basic sorting with modified alphabet</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"hello"</span><span class="o">,</span> <span class="s">"leetcode"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">order1</span> <span class="o">=</span> <span class="s">"hlabcdefgijkmnopqrstuvwxyz"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: true"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">isAlienSorted</span><span class="o">(</span><span class="n">words1</span><span class="o">,</span> <span class="n">order1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: Words in wrong order</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"word"</span><span class="o">,</span> <span class="s">"world"</span><span class="o">,</span> <span class="s">"row"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">order2</span> <span class="o">=</span> <span class="s">"worldabcefghijkmnpqstuvxyz"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: false"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">isAlienSorted</span><span class="o">(</span><span class="n">words2</span><span class="o">,</span> <span class="n">order2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Prefix case (longer word before shorter prefix)</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"apple"</span><span class="o">,</span> <span class="s">"app"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">order3</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: false"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">isAlienSorted</span><span class="o">(</span><span class="n">words3</span><span class="o">,</span> <span class="n">order3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Single character difference</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words4</span> <span class="o">=</span> <span class="o">{</span><span class="s">"aa"</span><span class="o">,</span> <span class="s">"ab"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">order4</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: true"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">isAlienSorted</span><span class="o">(</span><span class="n">words4</span><span class="o">,</span> <span class="n">order4</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 5: Identical words</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words5</span> <span class="o">=</span> <span class="o">{</span><span class="s">"app"</span><span class="o">,</span> <span class="s">"app"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">order5</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 5:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: true"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual: "</span> <span class="o">+</span> <span class="n">isAlienSorted</span><span class="o">(</span><span class="n">words5</span><span class="o">,</span> <span class="n">order5</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode HashTable"/><summary type="html"><![CDATA[In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters. Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.]]></summary></entry><entry><title type="html">5.Longest Palindromic Substring</title><link href="https://zhengstar94.github.io//blog/2024/LongestPalindromicSubstring/" rel="alternate" type="text/html" title="5.Longest Palindromic Substring"/><published>2024-10-31T00:00:00+00:00</published><updated>2024-10-31T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/LongestPalindromicSubstring</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/LongestPalindromicSubstring/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code>, return <em>the longest</em> <em>palindromic</em> <em>substring</em> in <code class="language-plaintext highlighter-rouge">s</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "cbbd"
Output: "bb"
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2) time | O(n<span class="p">^</span>2) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.DynamicProgramming</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/08/31
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongestPalindromicSubstring</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of the input string</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// Create a 2D boolean array for dynamic programming</span>
        <span class="c1">// dp[i][j] will be true if the substring from index i to j is a palindrome</span>
        <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>

        <span class="c1">// Variables to keep track of the longest palindrome found</span>
        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Starting index of the longest palindrome</span>
        <span class="kt">int</span> <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// Length of the longest palindrome</span>

        <span class="c1">// Initialize base case: all substrings of length 1 are palindromes</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Fill the dp array</span>
        <span class="c1">// Outer loop: iterate over all possible lengths of substrings</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">len</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">len</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Inner loop: check all substrings of the current length</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// Calculate the ending index of the current substring</span>
                <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Check if the current substring is a palindrome</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">len</span> <span class="o">&lt;=</span> <span class="mi">3</span> <span class="o">||</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="c1">// Mark the current substring as a palindrome</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

                    <span class="c1">// Update the longest palindrome if necessary</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="n">maxLen</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                        <span class="n">maxLen</span> <span class="o">=</span> <span class="n">len</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the longest palindromic substring</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">start</span> <span class="o">+</span> <span class="n">maxLen</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="c1">// Main method for testing</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">testCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"babad"</span><span class="o">,</span>
                <span class="s">"cbbd"</span><span class="o">,</span>
                <span class="s">"a"</span><span class="o">,</span>
                <span class="s">"ac"</span><span class="o">,</span>
                <span class="s">"racecar"</span><span class="o">,</span>
                <span class="s">"aacabdkacaa"</span><span class="o">,</span>
                <span class="s">""</span>
        <span class="o">};</span>

        <span class="c1">// Expected results</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">expectedResults</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"bab"</span><span class="o">,</span>  <span class="c1">// or "aba"</span>
                <span class="s">"bb"</span><span class="o">,</span>
                <span class="s">"a"</span><span class="o">,</span>
                <span class="s">"a"</span><span class="o">,</span>
                <span class="s">"racecar"</span><span class="o">,</span>
                <span class="s">"aca"</span><span class="o">,</span>
                <span class="s">""</span>
        <span class="o">};</span>

        <span class="c1">// Run tests</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">testCases</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">longestPalindrome</span><span class="o">(</span><span class="n">testCases</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case "</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">":"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: \""</span> <span class="o">+</span> <span class="n">testCases</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: \""</span> <span class="o">+</span> <span class="n">result</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: \""</span> <span class="o">+</span> <span class="n">expectedResults</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">expectedResults</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">?</span> <span class="s">"PASS"</span> <span class="o">:</span> <span class="s">"FAIL"</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div> <h2 id="method-2">Method 2</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/10/31
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongestPalindromicSubstring</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// If the input string is null or has a length less than 1, return an empty string</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="s">""</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Initialize starting index of the longest palindrome and its maximum length</span>
        <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Loop through each character in the string to consider it as a center of potential palindrome</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Check for longest palindrome with odd length (center at i)</span>
            <span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">expandAroundCenter</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="c1">// Check for longest palindrome with even length (center between i and i+1)</span>
            <span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">expandAroundCenter</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>

            <span class="c1">// Take the maximum length found from odd and even cases</span>
            <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">len1</span><span class="o">,</span> <span class="n">len2</span><span class="o">);</span>

            <span class="c1">// If we found a longer palindrome, update maxLen and starting index</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">len</span> <span class="o">&gt;</span> <span class="n">maxLen</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">maxLen</span> <span class="o">=</span> <span class="n">len</span><span class="o">;</span>
                <span class="c1">// Calculate the starting index of the current longest palindrome</span>
                <span class="c1">// "len - 1" represents the number of characters on either side of the center.</span>
                <span class="c1">// Dividing it by 2 gives the left-side distance from i to start of the palindrome.</span>
                <span class="n">start</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="o">(</span><span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the substring starting from 'start' and with length 'maxLen'</span>
        <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">start</span> <span class="o">+</span> <span class="n">maxLen</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">expandAroundCenter</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Expand as long as the characters on the left and right match and stay within bounds</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">left</span><span class="o">--;</span>
            <span class="n">right</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="c1">// Length is right - left - 1 because left and right have moved one extra position</span>
        <span class="k">return</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="c1">// Test case 1: A normal case with palindrome in the middle</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"babad"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">longestPalindrome</span><span class="o">(</span><span class="n">s1</span><span class="o">));</span>
        <span class="c1">// Expected output: "bab" or "aba"</span>

        <span class="c1">// Test case 2: The entire string is a palindrome</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"racecar"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">longestPalindrome</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span>
        <span class="c1">// Expected output: "racecar"</span>

        <span class="c1">// Test case 3: No palindrome longer than one character</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">longestPalindrome</span><span class="o">(</span><span class="n">s3</span><span class="o">));</span>
        <span class="c1">// Expected output: "a" or "b" or "c"</span>

        <span class="c1">// Test case 4: Even-length palindrome</span>
        <span class="nc">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="s">"cbbd"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">longestPalindrome</span><span class="o">(</span><span class="n">s4</span><span class="o">));</span>
        <span class="c1">// Expected output: "bb"</span>

        <span class="c1">// Test case 5: Single character</span>
        <span class="nc">String</span> <span class="n">s5</span> <span class="o">=</span> <span class="s">"a"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">longestPalindrome</span><span class="o">(</span><span class="n">s5</span><span class="o">));</span>
        <span class="c1">// Expected output: "a"</span>

        <span class="c1">// Test case 6: Empty string</span>
        <span class="nc">String</span> <span class="n">s6</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">longestPalindrome</span><span class="o">(</span><span class="n">s6</span><span class="o">));</span>
        <span class="c1">// Expected output: ""</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Dynamic Programming"/><summary type="html"><![CDATA[Given a string s, return the longest palindromic substring in s.]]></summary></entry><entry><title type="html">31.Next Permutation</title><link href="https://zhengstar94.github.io//blog/2024/NextPermutation/" rel="alternate" type="text/html" title="31.Next Permutation"/><published>2024-10-30T00:00:00+00:00</published><updated>2024-10-30T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/NextPermutation</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/NextPermutation/"><![CDATA[<ul> <li>A <strong>permutation</strong> of an array of integers is an arrangement of its members into a sequence or linear order. <ul> <li>For example, for <code class="language-plaintext highlighter-rouge">arr = [1,2,3]</code>, the following are all the permutations of <code class="language-plaintext highlighter-rouge">arr</code>: <code class="language-plaintext highlighter-rouge">[1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]</code>.</li> </ul> </li> <li>The <strong>next permutation</strong> of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the <strong>next permutation</strong> of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). <ul> <li>For example, the next permutation of <code class="language-plaintext highlighter-rouge">arr = [1,2,3]</code> is <code class="language-plaintext highlighter-rouge">[1,3,2]</code>.</li> <li>Similarly, the next permutation of <code class="language-plaintext highlighter-rouge">arr = [2,3,1]</code> is <code class="language-plaintext highlighter-rouge">[3,1,2]</code>.</li> <li>While the next permutation of <code class="language-plaintext highlighter-rouge">arr = [3,2,1]</code> is <code class="language-plaintext highlighter-rouge">[1,2,3]</code> because <code class="language-plaintext highlighter-rouge">[3,2,1]</code> does not have a lexicographical larger rearrangement.</li> </ul> </li> <li>Given an array of integers <code class="language-plaintext highlighter-rouge">nums</code>, <em>find the next permutation of</em> <code class="language-plaintext highlighter-rouge">nums</code>.</li> <li>The replacement must be <strong><a href="http://en.wikipedia.org/wiki/In-place_algorithm">in place</a></strong> and use only constant extra memory.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3]
Output: [1,3,2]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [3,2,1]
Output: [1,2,3]
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,1,5]
Output: [1,5,1]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/10/30
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NextPermutation</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">nextPermutation</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 1. Boundary check - return if array is null or has length &lt;= 1</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">;</span>

        <span class="c1">// 2. Find first decreasing element from right</span>
        <span class="c1">// Example: in [1,5,8,4,7,6,5,3,1], find 4 because 4 &lt; 7</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">i</span><span class="o">--;</span>
        <span class="o">}</span>

        <span class="c1">// 3. If we found a decreasing element (i.e., i &gt;= 0)</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="c1">// Find the smallest element from right that's greater than nums[i]</span>
            <span class="c1">// This element will exist because nums[i] &lt; nums[i+1]</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">j</span><span class="o">--;</span>
            <span class="o">}</span>
            <span class="c1">// Swap nums[i] with this element</span>
            <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 4. Reverse all elements after position i to get the smallest permutation</span>
        <span class="c1">// This works because elements after i are in descending order</span>
        <span class="n">reverse</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
        <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">swap</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">start</span><span class="o">++,</span> <span class="n">end</span><span class="o">--);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Normal case</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="n">nextPermutation</span><span class="o">(</span><span class="n">test1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: [ 1,2,3 ] -&gt; "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">test1</span><span class="o">)</span> <span class="o">+</span> <span class="s">" (Expected: [ 1,3,2 ] )"</span><span class="o">);</span>

        <span class="c1">// Test Case 2: Decreasing order - should return increasing order</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="n">nextPermutation</span><span class="o">(</span><span class="n">test2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2: [ 3,2,1 ] -&gt; "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">test2</span><span class="o">)</span> <span class="o">+</span> <span class="s">" (Expected: [ 1,2,3 ] )"</span><span class="o">);</span>

        <span class="c1">// Test Case 3: Array with duplicates</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>
        <span class="n">nextPermutation</span><span class="o">(</span><span class="n">test3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3: [ 1,1,5 ] -&gt; "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">test3</span><span class="o">)</span> <span class="o">+</span> <span class="s">" (Expected: [ 1,5,1 ] )"</span><span class="o">);</span>

        <span class="c1">// Test Case 4: Larger array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="n">nextPermutation</span><span class="o">(</span><span class="n">test4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 4: [ 1,3,5,4,2 ] -&gt; "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">test4</span><span class="o">)</span> <span class="o">+</span> <span class="s">" (Expected: [ 1,4,2,3,5 ] )"</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">arrayToString</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arr</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span> <span class="s">"null"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><summary type="html"><![CDATA[A permutation of an array of integers is an arrangement of its members into a sequence or linear order. For example, for arr=[1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1]. The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order). For example, the next permutation of arr=[1,2,3] is [1,3,2]. Similarly, the next permutation of arr=[2,3,1] is [3,1,2]. While the next permutation of arr=[3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement. Given an array of integers nums, find the next permutation of nums. The replacement must be in place and use only constant extra memory.]]></summary></entry><entry><title type="html">735.Asteroid Collision</title><link href="https://zhengstar94.github.io//blog/2024/AsteroidCollision/" rel="alternate" type="text/html" title="735.Asteroid Collision"/><published>2024-10-29T00:00:00+00:00</published><updated>2024-10-29T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/AsteroidCollision</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/AsteroidCollision/"><![CDATA[<ul> <li>We are given an array <code class="language-plaintext highlighter-rouge">asteroids</code> of integers representing asteroids in a row.</li> <li>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</li> <li>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Stack</span><span class="o">;</span>


<span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/10/29
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AsteroidCollision</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">asteroidCollision</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">asteroids</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Use a deque to store asteroids, more efficient than a stack</span>
        <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">asteroid</span> <span class="o">:</span> <span class="n">asteroids</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">asteroid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Case 1: Queue is empty, add the asteroid directly</span>
                <span class="c1">// Case 2: Current asteroid is moving right, no collision with previous asteroids</span>
                <span class="n">q</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">asteroid</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Current asteroid is moving left (asteroid &lt; 0), so handle collisions</span>

                <span class="c1">// Loop to handle collisions: if the asteroid at the end of the queue</span>
                <span class="c1">// is moving right and has less mass than the current asteroid</span>
                <span class="c1">// (q.peekLast() + asteroid &lt; 0 means the right-moving asteroid is smaller in mass</span>
                <span class="c1">// because asteroid is negative, and their sum &lt; 0 implies |asteroid| is larger)</span>
                <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">.</span><span class="na">peekLast</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">q</span><span class="o">.</span><span class="na">peekLast</span><span class="o">()</span> <span class="o">+</span> <span class="n">asteroid</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span> <span class="c1">// Remove the asteroid at the end of the queue (it explodes)</span>
                <span class="o">}</span>

                <span class="c1">// Three situations after handling collisions:</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">q</span><span class="o">.</span><span class="na">peekLast</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Case 1: Queue is empty, add the asteroid directly</span>
                    <span class="c1">// Case 2: Asteroid at the end of the queue is moving left, no collision, add directly</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">asteroid</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">q</span><span class="o">.</span><span class="na">peekLast</span><span class="o">()</span> <span class="o">+</span> <span class="n">asteroid</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Case 3: Equal mass, both explode, remove the last asteroid from the queue and do not add the current one</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="c1">// Implicit Case 4: Current asteroid has smaller mass and is destroyed, no action needed</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Convert the deque to an array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">()];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">testCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="o">-</span><span class="mi">5</span> <span class="o">},</span>          <span class="c1">// No collision, output [ 5, 10 ]</span>
                <span class="o">{</span> <span class="mi">8</span><span class="o">,</span> <span class="o">-</span><span class="mi">8</span> <span class="o">},</span>              <span class="c1">// Equal mass, both explode, output []</span>
                <span class="o">{</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">5</span> <span class="o">},</span>          <span class="c1">// -5 collides with 2, 2 explodes, final output [ 10]</span>
                <span class="o">{</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span> <span class="o">},</span>       <span class="c1">// All asteroids move left or right, no collision, output [ -2, -1, 1, 2 ]</span>
                <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span> <span class="o">},</span>       <span class="c1">// Each pair 1 and -1 collide, all explode, output []</span>
                <span class="o">{</span> <span class="mi">10</span><span class="o">,</span> <span class="o">-</span><span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="o">-</span><span class="mi">15</span><span class="o">,</span> <span class="mi">20</span> <span class="o">}</span> <span class="c1">// 10 and -10 collide, 5 and -15 collide, output [ 20 ]</span>
        <span class="o">};</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">testCases</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">asteroidCollision</span><span class="o">(</span><span class="n">testCases</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case "</span> <span class="o">+</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Stack"/><summary type="html"><![CDATA[We are given an array asteroids of integers representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed. Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.]]></summary></entry><entry><title type="html">72.Edit Distance</title><link href="https://zhengstar94.github.io//blog/2024/EditDistance/" rel="alternate" type="text/html" title="72.Edit Distance"/><published>2024-10-28T00:00:00+00:00</published><updated>2024-10-28T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/EditDistance</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/EditDistance/"><![CDATA[<ul> <li>Given two strings <code class="language-plaintext highlighter-rouge">word1</code> and <code class="language-plaintext highlighter-rouge">word2</code>, return <em>the minimum number of operations required to convert <code class="language-plaintext highlighter-rouge">word1</code> to <code class="language-plaintext highlighter-rouge">word2</code></em>.</li> <li>You have the following three operations permitted on a word: <ul> <li>Insert a character</li> <li>Delete a character</li> <li>Replace a character</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -&gt; rorse (replace 'h' with 'r')
rorse -&gt; rose (remove 'r')
rose -&gt; ros (remove 'e')
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -&gt; inention (remove 't')
inention -&gt; enention (replace 'i' with 'e')
enention -&gt; exention (replace 'n' with 'x')
exention -&gt; exection (replace 'n' with 'c')
exection -&gt; execution (insert 'u')
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m * n) time | O(m * n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.DynamicProgramming</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/10/28
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EditDistance</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minDistance</span><span class="o">(</span><span class="nc">String</span> <span class="n">word1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">word2</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">word1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">word2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

        <span class="c1">// Initialize dp array for base cases</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="c1">// Minimum steps when word2 is empty (deletions only)</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span> <span class="c1">// Minimum steps when word1 is empty (insertions only)</span>
        <span class="o">}</span>

        <span class="c1">// Fill the dp array using dynamic programming</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// If characters are equal, carry forward the value from dp[i-1][j-1]</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">word1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">word2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// Compute minimum operations by comparing:</span>
                    <span class="c1">// 1. Replacement (dp[i-1][j-1] + 1)</span>
                    <span class="c1">// 2. Insertion (dp[i][j-1] + 1)</span>
                    <span class="c1">// 3. Deletion (dp[i-1][j] + 1)</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span>
                            <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">m</span><span class="o">][</span><span class="n">n</span><span class="o">];</span> <span class="c1">// Final edit distance</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test case 1</span>
        <span class="nc">String</span> <span class="n">word1</span> <span class="o">=</span> <span class="s">"horse"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2</span> <span class="o">=</span> <span class="s">"ros"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">minDistance</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">));</span>  <span class="c1">// Expected: 3</span>

        <span class="c1">// Test case 2</span>
        <span class="n">word1</span> <span class="o">=</span> <span class="s">"intention"</span><span class="o">;</span>
        <span class="n">word2</span> <span class="o">=</span> <span class="s">"execution"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">minDistance</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">));</span>  <span class="c1">// Expected: 5</span>

        <span class="c1">// Test case 3</span>
        <span class="n">word1</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="n">word2</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">minDistance</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">));</span>  <span class="c1">// Expected: 3</span>

        <span class="c1">// Test case 4</span>
        <span class="n">word1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="n">word2</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">minDistance</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">));</span>  <span class="c1">// Expected: 3</span>

        <span class="c1">// Test case 5</span>
        <span class="n">word1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="n">word2</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">minDistance</span><span class="o">(</span><span class="n">word1</span><span class="o">,</span> <span class="n">word2</span><span class="o">));</span>  <span class="c1">// Expected: 0</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Dynamic Programming"/><summary type="html"><![CDATA[Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You have the following three operations permitted on a word: Insert a character Delete a character Replace a character]]></summary></entry><entry><title type="html">283.Move Zeroes</title><link href="https://zhengstar94.github.io//blog/2024/MoveZeroes/" rel="alternate" type="text/html" title="283.Move Zeroes"/><published>2024-10-26T00:00:00+00:00</published><updated>2024-10-26T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/MoveZeroes</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/MoveZeroes/"><![CDATA[<ul> <li>Given an integer array <code class="language-plaintext highlighter-rouge">nums</code>, move all <code class="language-plaintext highlighter-rouge">0</code>’s to the end of it while maintaining the relative order of the non-zero elements.</li> <li><strong>Note</strong> that you must do this in-place without making a copy of the array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/10/26
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MoveZeroes</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">moveZeroes</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">nonZeroIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// First pass: Move all non-zero elements to the beginning of the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">nonZeroIndex</span><span class="o">++]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Second pass: Fill the rest of the array with zeroes</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nonZeroIndex</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">12</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Before moveZeroes:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>
        <span class="n">moveZeroes</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After moveZeroes:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nBefore moveZeroes:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>
        <span class="n">moveZeroes</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After moveZeroes:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[Given an integer array nums, move all 0’s to the end of it while maintaining the relative order of the non-zero elements. Note that you must do this in-place without making a copy of the array.]]></summary></entry><entry><title type="html">75.Sort Colors</title><link href="https://zhengstar94.github.io//blog/2024/SortColors/" rel="alternate" type="text/html" title="75.Sort Colors"/><published>2024-10-26T00:00:00+00:00</published><updated>2024-10-26T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/SortColors</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/SortColors/"><![CDATA[<ul> <li>Given an array <code class="language-plaintext highlighter-rouge">nums</code> with <code class="language-plaintext highlighter-rouge">n</code> objects colored red, white, or blue, sort them <strong><a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong> so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</li> <li>We will use the integers <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">1</code>, and <code class="language-plaintext highlighter-rouge">2</code> to represent the color red, white, and blue, respectively.</li> <li>You must solve this problem without using the library’s sort function.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,0,1]
Output: [0,1,2]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2024/10/26
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SortColors</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sortColors</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Iterate until mid passes high</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">mid</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Case 1: Current element is 0, swap with the element at 'low' pointer</span>
                <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">low</span><span class="o">];</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">low</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">];</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
                <span class="c1">// Increment both low and mid pointers after swap</span>
                <span class="n">mid</span><span class="o">++;</span>
                <span class="n">low</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Case 2: Current element is 1, it's already in the correct place</span>
                <span class="c1">// Just move the mid pointer to the right</span>
                <span class="n">mid</span><span class="o">++;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Case 3: Current element is 2, swap with the element at 'high' pointer</span>
                <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">];</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">high</span><span class="o">];</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">high</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
                <span class="c1">// Decrement high pointer, but keep mid at the same position to recheck swapped element</span>
                <span class="n">high</span><span class="o">--;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Before sortColors:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>
        <span class="n">sortColors</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After sortColors:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums1</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nBefore sortColors:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>
        <span class="n">sortColors</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After sortColors:"</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">nums2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><summary type="html"><![CDATA[Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively. You must solve this problem without using the library’s sort function.]]></summary></entry></feed>