<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-19T04:44:44+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">2375. Construct Smallest Number From DI String</title><link href="https://zhengstar94.github.io//blog/2025/ConstructSmallestNumberFromDIString/" rel="alternate" type="text/html" title="2375. Construct Smallest Number From DI String"/><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ConstructSmallestNumberFromDIString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ConstructSmallestNumberFromDIString/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> string <code class="language-plaintext highlighter-rouge">pattern</code> of length <code class="language-plaintext highlighter-rouge">n</code> consisting of the characters <code class="language-plaintext highlighter-rouge">'I'</code> meaning <strong>increasing</strong> and <code class="language-plaintext highlighter-rouge">'D'</code> meaning <strong>decreasing</strong>.</li> <li>A <strong>0-indexed</strong> string <code class="language-plaintext highlighter-rouge">num</code> of length <code class="language-plaintext highlighter-rouge">n + 1</code> is created using the following conditions: <ul> <li><code class="language-plaintext highlighter-rouge">num</code> consists of the digits <code class="language-plaintext highlighter-rouge">'1'</code> to <code class="language-plaintext highlighter-rouge">'9'</code>, where each digit is used <strong>at most</strong> once.</li> <li>If <code class="language-plaintext highlighter-rouge">pattern[i] == 'I'</code>, then <code class="language-plaintext highlighter-rouge">num[i] &lt; num[i + 1]</code>.</li> <li>If <code class="language-plaintext highlighter-rouge">pattern[i] == 'D'</code>, then <code class="language-plaintext highlighter-rouge">num[i] &gt; num[i + 1]</code>.</li> </ul> </li> <li>Return <em>the lexicographically <strong>smallest</strong> possible string</em> <code class="language-plaintext highlighter-rouge">num</code> <em>that meets the conditions.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: pattern = "IIIDIDDD"
Output: "123549876"
Explanation:
At indices 0, 1, 2, and 4 we must have that num[i] &lt; num[i+1].
At indices 3, 5, 6, and 7 we must have that num[i] &gt; num[i+1].
Some possible values of num are "245639871", "135749862", and "123849765".
It can be proven that "123549876" is the smallest possible num that meets the conditions.
Note that "123414321" is not possible because the digit '1' is used more than once.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: pattern = "DDD"
Output: "4321"
Explanation:
Some possible values of num are "9876", "7321", and "8742".
It can be proven that "4321" is the smallest possible num that meets the conditions.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Stack</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>

<span class="cm">/**
 * Author: zhengxingxing
 * Date: 2025/02/19
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConstructSmallestNumberFromDIString</span> <span class="o">{</span>
    <span class="c1">// Method to construct the smallest number based on the given pattern</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">smallestNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">pattern</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span> <span class="c1">// StringBuilder to store the final result</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>  <span class="c1">// Stack to temporarily store digits</span>

        <span class="c1">// Iterate through the pattern (including one extra pass for the last number)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// Push the current number (i+1) onto the stack.</span>

            <span class="c1">// If we encounter 'I' (increasing) in the pattern, OR we reach the end of the pattern:</span>
            <span class="c1">// Pop all numbers from the stack and append them to the result.</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">pattern</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">||</span> <span class="n">pattern</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'I'</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="c1">// Return the constructed smallest number as a string</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// Main method - serves as an entry point to test the program</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Example test cases</span>
        <span class="nc">String</span> <span class="n">pattern1</span> <span class="o">=</span> <span class="s">"IIIDIDDD"</span><span class="o">;</span> <span class="c1">// Pattern: Increasing-Increasing-Increasing-Decreasing-Increasing-Decreasing-Decreasing-Decreasing</span>
        <span class="nc">String</span> <span class="n">pattern2</span> <span class="o">=</span> <span class="s">"DDD"</span><span class="o">;</span>      <span class="c1">// Pattern: Decreasing-Decreasing-Decreasing</span>

        <span class="c1">// Outputs the smallest numbers corresponding to each pattern</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">pattern1</span> <span class="o">+</span> <span class="s">" Output: "</span> <span class="o">+</span> <span class="n">smallestNumber</span><span class="o">(</span><span class="n">pattern1</span><span class="o">));</span> <span class="c1">// Output: "123549876"</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">pattern2</span> <span class="o">+</span> <span class="s">" Output: "</span> <span class="o">+</span> <span class="n">smallestNumber</span><span class="o">(</span><span class="n">pattern2</span><span class="o">));</span> <span class="c1">// Output: "4321"</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Stack"/><category term="Medium"/><summary type="html"><![CDATA[You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing. A 0-indexed string num of length n + 1 is created using the following conditions: num consists of the digits '1' to '9', where each digit is used at most once. If pattern[i] == 'I', then num[i] &lt; num[i + 1]. If pattern[i] == 'D', then num[i] &gt; num[i + 1]. Return the lexicographically smallest possible string num that meets the conditions.]]></summary></entry><entry><title type="html">624. Maximum Distance in Arrays</title><link href="https://zhengstar94.github.io//blog/2025/MaximumDistanceInArrays/" rel="alternate" type="text/html" title="624. Maximum Distance in Arrays"/><published>2025-02-19T00:00:00+00:00</published><updated>2025-02-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MaximumDistanceInArrays</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MaximumDistanceInArrays/"><![CDATA[<ul> <li>You are given <code class="language-plaintext highlighter-rouge">m</code> <code class="language-plaintext highlighter-rouge">arrays</code>, where each array is sorted in <strong>ascending order</strong>.</li> <li>You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> to be their absolute difference <code class="language-plaintext highlighter-rouge">|a - b|</code>.</li> <li>Return <em>the maximum distance</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arrays = [[1,2,3],[4,5],[1,2,3]]
Output: 4
Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arrays = [[1],[1]]
Output: 0
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/19
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumDistanceInArrays</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maxDistance</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases: if input is null or has less than 2 arrays</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arrays</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">arrays</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Initialize maximum distance found so far</span>
        <span class="kt">int</span> <span class="n">maxDistance</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Initialize minVal and maxVal with the first array's values</span>
        <span class="c1">// Since arrays are sorted, first element is minimum and last element is maximum</span>
        <span class="kt">int</span> <span class="n">minVal</span> <span class="o">=</span> <span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>                      <span class="c1">// Get minimum of first array</span>
        <span class="kt">int</span> <span class="n">maxVal</span> <span class="o">=</span> <span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// Get maximum of first array</span>

        <span class="c1">// Start from second array (index 1) since we've used first array for initialization</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arrays</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">array</span> <span class="o">=</span> <span class="n">arrays</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

            <span class="c1">// Get current array's minimum (first element) and maximum (last element)</span>
            <span class="kt">int</span> <span class="n">currentMin</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>                      <span class="c1">// Current array's minimum</span>
            <span class="kt">int</span> <span class="n">currentMax</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">array</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>       <span class="c1">// Current array's maximum</span>

            <span class="cm">/* Key Part 1: Calculate maximum distance
             * We need to compare two possibilities:
             * 1. currentMax - minVal: Distance between current array's maximum and previous minimum
             *    Example: If previous minVal = 1 and currentMax = 5, distance = |5-1| = 4
             * 2. currentMin - maxVal: Distance between current array's minimum and previous maximum
             *    Example: If previous maxVal = 3 and currentMin = 4, distance = |4-3| = 1
             */</span>
            <span class="n">maxDistance</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxDistance</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">currentMax</span> <span class="o">-</span> <span class="n">minVal</span><span class="o">));</span>
            <span class="n">maxDistance</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxDistance</span><span class="o">,</span> <span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">currentMin</span> <span class="o">-</span> <span class="n">maxVal</span><span class="o">));</span>

            <span class="cm">/* Key Part 2: Update global minimum and maximum values
             * After processing current array, update global min and max for next iterations
             * minVal: Keep track of the smallest value seen so far
             * maxVal: Keep track of the largest value seen so far
             *
             * Example:
             * If current state: minVal = 1, maxVal = 3
             * Current array: [4,5]
             * After update: minVal = min(1,4) = 1, maxVal = max(3,5) = 5
             */</span>
            <span class="n">minVal</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minVal</span><span class="o">,</span> <span class="n">currentMin</span><span class="o">);</span>    <span class="c1">// Update global minimum</span>
            <span class="n">maxVal</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxVal</span><span class="o">,</span> <span class="n">currentMax</span><span class="o">);</span>    <span class="c1">// Update global maximum</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">maxDistance</span><span class="o">;</span>    <span class="c1">// Return the maximum distance found</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Example with three arrays</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">arrays1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>     <span class="c1">// First array</span>
        <span class="n">arrays1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>        <span class="c1">// Second array</span>
        <span class="n">arrays1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>     <span class="c1">// Third array</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">arrays1</span> <span class="o">+</span> <span class="s">" -&gt; Output: "</span> <span class="o">+</span> <span class="n">maxDistance</span><span class="o">(</span><span class="n">arrays1</span><span class="o">));</span> <span class="c1">// Expected: 4</span>

        <span class="c1">// Test Case 2: Minimum case with two arrays</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">arrays2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>           <span class="c1">// First array</span>
        <span class="n">arrays2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>           <span class="c1">// Second array</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">arrays2</span> <span class="o">+</span> <span class="s">" -&gt; Output: "</span> <span class="o">+</span> <span class="n">maxDistance</span><span class="o">(</span><span class="n">arrays2</span><span class="o">));</span> <span class="c1">// Expected: 0</span>

        <span class="c1">// Test Case 3: Example with increasing values</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">arrays3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">arrays3</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>        <span class="c1">// First array</span>
        <span class="n">arrays3</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">8</span><span class="o">));</span>     <span class="c1">// Second array</span>
        <span class="n">arrays3</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">12</span><span class="o">));</span>      <span class="c1">// Third array</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: "</span> <span class="o">+</span> <span class="n">arrays3</span> <span class="o">+</span> <span class="s">" -&gt; Output: "</span> <span class="o">+</span> <span class="n">maxDistance</span><span class="o">(</span><span class="n">arrays3</span><span class="o">));</span> <span class="c1">// Expected: 11</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given m arrays, where each array is sorted in ascending order. You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|. Return the maximum distance.]]></summary></entry><entry><title type="html">1750. Minimum Length of String After Deleting Similar Ends</title><link href="https://zhengstar94.github.io//blog/2025/MinimumLengthOfStringAfterDeletingSimilarEnds/" rel="alternate" type="text/html" title="1750. Minimum Length of String After Deleting Similar Ends"/><published>2025-02-18T00:00:00+00:00</published><updated>2025-02-18T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MinimumLengthOfStringAfterDeletingSimilarEnds</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MinimumLengthOfStringAfterDeletingSimilarEnds/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code> consisting only of characters <code class="language-plaintext highlighter-rouge">'a'</code>, <code class="language-plaintext highlighter-rouge">'b'</code>, and <code class="language-plaintext highlighter-rouge">'c'</code>. You are asked to apply the following algorithm on the string any number of times: <ol> <li>Pick a <strong>non-empty</strong> prefix from the string <code class="language-plaintext highlighter-rouge">s</code> where all the characters in the prefix are equal.</li> <li>Pick a <strong>non-empty</strong> suffix from the string <code class="language-plaintext highlighter-rouge">s</code> where all the characters in this suffix are equal.</li> <li>The prefix and the suffix should not intersect at any index.</li> <li>The characters from the prefix and suffix must be the same.</li> <li>Delete both the prefix and the suffix.</li> </ol> </li> <li>Return <em>the <strong>minimum length</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code> <em>after performing the above operation any number of times (possibly zero times)</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "ca"
Output: 2
Explanation: You can't remove any characters, so the string stays as is.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "cabaabac"
Output: 0
Explanation: An optimal sequence of operations is:
- Take prefix = "c" and suffix = "c" and remove them, s = "abaaba".
- Take prefix = "a" and suffix = "a" and remove them, s = "baab".
- Take prefix = "b" and suffix = "b" and remove them, s = "aa".
- Take prefix = "a" and suffix = "a" and remove them, s = "".
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aabccabba"
Output: 3
Explanation: An optimal sequence of operations is:
- Take prefix = "aa" and suffix = "a" and remove them, s = "bccabb".
- Take prefix = "b" and suffix = "bb" and remove them, s = "cca".
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/18
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumLengthOfStringAfterDeletingSimilarEnds</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minimumLength</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Initialize two pointers</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Continue while pointers haven't met and characters at both ends are same</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">))</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">current</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">);</span>

            <span class="c1">// Move left pointer while same character continues</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">left</span><span class="o">)</span> <span class="o">==</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Move right pointer while same character continues</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">right</span><span class="o">)</span> <span class="o">==</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">right</span><span class="o">--;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return remaining length</span>
        <span class="k">return</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"ca"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">s1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s1</span><span class="o">));</span>  <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"cabaabac"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2: "</span> <span class="o">+</span> <span class="n">s2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span>  <span class="c1">// Expected output: 0</span>

        <span class="c1">// Test case 3</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"aabccabba"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 3: "</span> <span class="o">+</span> <span class="n">s3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s3</span><span class="o">));</span>  <span class="c1">// Expected output: 3</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">s4</span> <span class="o">=</span> <span class="s">"bbbbbbbbbbbbbbbbbbb"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 4: "</span> <span class="o">+</span> <span class="n">s4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Result: "</span> <span class="o">+</span> <span class="n">minimumLength</span><span class="o">(</span><span class="n">s4</span><span class="o">));</span>  <span class="c1">// Expected output: 0</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode TwoPointers"/><category term="Medium"/><summary type="html"><![CDATA[Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times: Pick a non-empty prefix from the string s where all the characters in the prefix are equal. Pick a non-empty suffix from the string s where all the characters in this suffix are equal. The prefix and the suffix should not intersect at any index. The characters from the prefix and suffix must be the same. Delete both the prefix and the suffix. Return the minimum length of s after performing the above operation any number of times (possibly zero times).]]></summary></entry><entry><title type="html">344. Reverse String</title><link href="https://zhengstar94.github.io//blog/2025/ReverseString/" rel="alternate" type="text/html" title="344. Reverse String"/><published>2025-02-18T00:00:00+00:00</published><updated>2025-02-18T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ReverseString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ReverseString/"><![CDATA[<ul> <li>Write a function that reverses a string. The input string is given as an array of characters <code class="language-plaintext highlighter-rouge">s</code>.</li> <li>You must do this by modifying the input array <a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a> with <code class="language-plaintext highlighter-rouge">O(1)</code> extra memory.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = ["H","a","n","n","a","h"]
Output: ["h","a","n","n","a","H"]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/18
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReverseString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">reverseString</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// Swap characters from both ends until pointers meet in middle &lt;sup data-citation="3" className="inline select-none [&amp;&gt;a]:rounded-2xl [&amp;&gt;a]:border [&amp;&gt;a]:px-1.5 [&amp;&gt;a]:py-0.5 [&amp;&gt;a]:transition-colors shadow [&amp;&gt;a]:bg-ds-bg-subtle [&amp;&gt;a]:text-xs [&amp;&gt;svg]:w-4 [&amp;&gt;svg]:h-4 relative -top-[2px] citation-shimmer"&gt;&lt;a href="https://codegym.cc/groups/posts/1015-different-ways-to-reverse-a-string-in-java"&gt;3&lt;/a&gt;&lt;/sup&gt;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Swap characters at left and right pointers</span>
            <span class="kt">char</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">left</span><span class="o">];</span>
            <span class="n">s</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">right</span><span class="o">];</span>
            <span class="n">s</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>

            <span class="n">left</span><span class="o">++;</span>
            <span class="n">right</span><span class="o">--;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Original string: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
        <span class="n">reverseString</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"After reverse: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">"umbrella"</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Original string: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str2</span><span class="o">);</span>
        <span class="n">reverseString</span><span class="o">(</span><span class="n">str2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"After reverse: "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode TwoPointers"/><category term="Easy"/><summary type="html"><![CDATA[Write a function that reverses a string. The input string is given as an array of characters s. You must do this by modifying the input array in-place with O(1) extra memory.]]></summary></entry><entry><title type="html">1287. Element Appearing More Than 25% In Sorted Array</title><link href="https://zhengstar94.github.io//blog/2025/ElementAppearingMoreThan25PercentInSortedArray/" rel="alternate" type="text/html" title="1287. Element Appearing More Than 25% In Sorted Array"/><published>2025-02-17T00:00:00+00:00</published><updated>2025-02-17T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ElementAppearingMoreThan25PercentInSortedArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ElementAppearingMoreThan25PercentInSortedArray/"><![CDATA[<ul> <li>Given an integer array <strong>sorted</strong> in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [1,1]
Output: 1
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/17
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ElementAppearingMoreThan25PercentInSortedArray</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findSpecialInteger</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the length of input array</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Calculate quarter of array length</span>
        <span class="c1">// This is our window size as element must appear more than 25%</span>
        <span class="kt">int</span> <span class="n">quarter</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">4</span><span class="o">;</span>

        <span class="c1">// Iterate through array until (n - quarter)</span>
        <span class="c1">// This ensures we don't get ArrayIndexOutOfBounds when checking arr[i + quarter]</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">quarter</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// If current element equals element at quarter distance ahead</span>
            <span class="c1">// We found our answer as it spans more than 25% of array</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">quarter</span><span class="o">])</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return last element for special cases:</span>
        <span class="c1">// 1. When array length is very small (≤ 4)</span>
        <span class="c1">// 2. When all elements are the same</span>
        <span class="c1">// This works because array is sorted and answer must exist</span>
        <span class="k">return</span> <span class="n">arr</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Element appears in middle of array</span>
        <span class="c1">// Expected output: 6 (appears 4 times, which is more than 25% of 9)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">input1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">10</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findSpecialInteger</span><span class="o">(</span><span class="n">input1</span><span class="o">));</span>

        <span class="c1">// Test case 2: Minimal array with two same elements</span>
        <span class="c1">// Expected output: 1 (appears 2 times, which is 100% of array)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">input2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findSpecialInteger</span><span class="o">(</span><span class="n">input2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Element appears at the beginning</span>
        <span class="c1">// Expected output: 2 (appears 4 times, which is more than 25% of 7)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">input3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findSpecialInteger</span><span class="o">(</span><span class="n">input3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.]]></summary></entry><entry><title type="html">(Review)1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</title><link href="https://zhengstar94.github.io//blog/2025/LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit/" rel="alternate" type="text/html" title="(Review)1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit"/><published>2025-02-16T00:00:00+00:00</published><updated>2025-02-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit/"><![CDATA[<ul> <li>Given an array of integers <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">limit</code>, return the size of the longest <strong>non-empty</strong> subarray such that the absolute difference between any two elements of this subarray is less than or equal to <code class="language-plaintext highlighter-rouge">limit</code><em>.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 &lt;= 4.
[8,2] with maximum absolute diff |8-2| = 6 &gt; 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 &gt; 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 &gt; 4.
[2] with maximum absolute diff |2-2| = 0 &lt;= 4.
[2,4] with maximum absolute diff |2-4| = 2 &lt;= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 &gt; 4.
[4] with maximum absolute diff |4-4| = 0 &lt;= 4.
[4,7] with maximum absolute diff |4-7| = 3 &lt;= 4.
[7] with maximum absolute diff |7-7| = 0 &lt;= 4. 
Therefore, the size of the longest subarray is 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 &lt;= 5.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow.DynamicSlidingWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LongestContinuousSubarrayWithAbsoluteDiffLessThanOrEqualToLimit</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">longestSubarray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Monotonic decreasing deque to maintain window maximum</span>
        <span class="c1">// Elements are stored in decreasing order, so first element is always the maximum</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">maxDeque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Monotonic increasing deque to maintain window minimum</span>
        <span class="c1">// Elements are stored in increasing order, so first element is always the minimum</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">minDeque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Left pointer of the sliding window</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Length of the longest valid subarray found so far</span>
        <span class="kt">int</span> <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Right pointer iterates through the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Maintain the monotonic decreasing property of maxDeque</span>
            <span class="c1">// Remove all elements smaller than the current element from the back</span>
            <span class="c1">// This ensures that maxDeque.peekFirst() always gives the maximum element</span>
            <span class="k">while</span> <span class="o">(!</span><span class="n">maxDeque</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">maxDeque</span><span class="o">.</span><span class="na">peekLast</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">maxDeque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">maxDeque</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]);</span>

            <span class="c1">// Maintain the monotonic increasing property of minDeque</span>
            <span class="c1">// Remove all elements larger than the current element from the back</span>
            <span class="c1">// This ensures that minDeque.peekFirst() always gives the minimum element</span>
            <span class="k">while</span> <span class="o">(!</span><span class="n">minDeque</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">minDeque</span><span class="o">.</span><span class="na">peekLast</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">minDeque</span><span class="o">.</span><span class="na">pollLast</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">minDeque</span><span class="o">.</span><span class="na">offerLast</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">right</span><span class="o">]);</span>

            <span class="c1">// Shrink the window if the difference between max and min exceeds limit</span>
            <span class="c1">// Keep shrinking until the window becomes valid or empty</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">maxDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">()</span> <span class="o">-</span> <span class="n">minDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">limit</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the leftmost element is the current maximum, remove it from maxDeque</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">==</span> <span class="n">maxDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">maxDeque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="c1">// If the leftmost element is the current minimum, remove it from minDeque</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">==</span> <span class="n">minDeque</span><span class="o">.</span><span class="na">peekFirst</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">minDeque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">();</span>
                <span class="o">}</span>
                <span class="c1">// Move the left pointer to shrink the window</span>
                <span class="n">left</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Update the maximum length if current window is valid</span>
            <span class="c1">// Current window size is (right - left + 1)</span>
            <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">maxLen</span><span class="o">;</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Expected output: 2</span>
        <span class="c1">// Valid subarrays are [2,4] and [4,7] with max diff &lt;= 4</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">8</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">limit1</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">longestSubarray</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">limit1</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Expected output: 4</span>
        <span class="c1">// Longest valid subarray is [2,4,7,2] with max diff &lt;= 5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">limit2</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">longestSubarray</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">limit2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: Expected output: 3</span>
        <span class="c1">// Longest valid subarray contains equal elements (either [2,2,2] or [4,4,4])</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">limit3</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">longestSubarray</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">limit3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode DynamicSlidingWindowMax"/><category term="Medium"/><category term="SlideWindow"/><category term="Review"/><summary type="html"><![CDATA[Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.]]></summary></entry><entry><title type="html">1299. Replace Elements with Greatest Element on Right Side</title><link href="https://zhengstar94.github.io//blog/2025/ReplaceElementsWithGreatestElementOnRightSide/" rel="alternate" type="text/html" title="1299. Replace Elements with Greatest Element on Right Side"/><published>2025-02-16T00:00:00+00:00</published><updated>2025-02-16T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ReplaceElementsWithGreatestElementOnRightSide</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ReplaceElementsWithGreatestElementOnRightSide/"><![CDATA[<ul> <li>Given an array <code class="language-plaintext highlighter-rouge">arr</code>, replace every element in that array with the greatest element among the elements to its right, and replace the last element with <code class="language-plaintext highlighter-rouge">-1</code>.</li> <li>After doing so, return the array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --&gt; the greatest element to the right of index 0 is index 1 (18).
- index 1 --&gt; the greatest element to the right of index 1 is index 4 (6).
- index 2 --&gt; the greatest element to the right of index 2 is index 4 (6).
- index 3 --&gt; the greatest element to the right of index 3 is index 4 (6).
- index 4 --&gt; the greatest element to the right of index 4 is index 5 (1).
- index 5 --&gt; there are no elements to the right of index 5, so we put -1.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: arr = [400]
Output: [-1]
Explanation: There are no elements to the right of index 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/16
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReplaceElementsWithGreatestElementOnRightSide</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">replaceElements</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>  <span class="c1">// Get the length of input array</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>        <span class="c1">// Initialize max as -1 (will be the value for the last element)</span>

        <span class="c1">// Traverse array from right to left</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>    <span class="c1">// Store current element temporarily</span>
            <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">max</span><span class="o">;</span>         <span class="c1">// Replace current element with maximum value seen so far</span>
            <span class="n">max</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max</span><span class="o">,</span> <span class="n">temp</span><span class="o">);</span>  <span class="c1">// Update maximum value</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">arr</span><span class="o">;</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Array with multiple elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">17</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">replaceElements</span><span class="o">(</span><span class="n">arr1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span> <span class="c1">// Expected output: [18, 6, 6, 6, 1, -1]</span>

        <span class="c1">// Test Case 2: Array with single element</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">400</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">replaceElements</span><span class="o">(</span><span class="n">arr2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span> <span class="c1">// Expected output: [-1]</span>

        <span class="c1">// Test Case 3: Array with decreasing sequence</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">replaceElements</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">result</span><span class="o">));</span> <span class="c1">// Expected output: [4, 3, 2, 1, -1]</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1. After doing so, return the array.]]></summary></entry><entry><title type="html">1706. Where Will the Ball Fall</title><link href="https://zhengstar94.github.io//blog/2025/WhereWillTheBallFall/" rel="alternate" type="text/html" title="1706. Where Will the Ball Fall"/><published>2025-02-15T00:00:00+00:00</published><updated>2025-02-15T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/WhereWillTheBallFall</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/WhereWillTheBallFall/"><![CDATA[<ul> <li>You have a 2-D <code class="language-plaintext highlighter-rouge">grid</code> of size <code class="language-plaintext highlighter-rouge">m x n</code> representing a box, and you have <code class="language-plaintext highlighter-rouge">n</code> balls. The box is open on the top and bottom sides.</li> <li>Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left. <ul> <li>A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as <code class="language-plaintext highlighter-rouge">1</code>.</li> <li>A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as <code class="language-plaintext highlighter-rouge">-1</code>.</li> </ul> </li> <li>We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a “V” shaped pattern between two boards or if a board redirects the ball into either wall of the box.</li> <li>Return <em>an array</em> <code class="language-plaintext highlighter-rouge">answer</code> <em>of size</em> <code class="language-plaintext highlighter-rouge">n</code> <em>where</em> <code class="language-plaintext highlighter-rouge">answer[i]</code> <em>is the column that the ball falls out of at the bottom after dropping the ball from the</em> <code class="language-plaintext highlighter-rouge">ith</code> <em>column at the top, or <code class="language-plaintext highlighter-rouge">-1</code> *if the ball gets stuck in the box*.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: grid = [ [1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1] ]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the photo.
Ball b0 is dropped at column 0 and falls out of the box at column 1.
Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.
Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.
Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.
Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: grid = [ [-1] ]
Output: [-1]
Explanation: The ball gets stuck against the left wall.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: grid = [ [ 1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1 ] ]
Output: [0,1,2,3,4,-1]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * m) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/15
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WhereWillTheBallFall</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findBall</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">grid</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the width of the grid (number of columns)</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">grid</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
        <span class="c1">// Initialize result array to store the exit positions for each ball</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

        <span class="c1">// Simulate dropping a ball from each column</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Track current column position of the ball</span>
            <span class="c1">// Initially, ball starts from column j</span>
            <span class="kt">int</span> <span class="n">curCol</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>

            <span class="c1">// Iterate through each row of the grid</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span> <span class="n">grid</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Get the direction of the current board</span>
                <span class="c1">// d = 1: board directs ball to right</span>
                <span class="c1">// d = -1: board directs ball to left</span>
                <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">row</span><span class="o">[</span><span class="n">curCol</span><span class="o">];</span>

                <span class="c1">// Move ball to next position based on board direction</span>
                <span class="n">curCol</span> <span class="o">+=</span> <span class="n">d</span><span class="o">;</span>

                <span class="c1">// Check if ball gets stuck:</span>
                <span class="c1">// 1. curCol &lt; 0: ball hits left boundary</span>
                <span class="c1">// 2. curCol == n: ball hits right boundary</span>
                <span class="c1">// 3. row[curCol] != d: forms V-shape with adjacent board</span>
                <span class="c1">//    Example: Current board goes right (1) but next position board goes left (-1)</span>
                <span class="c1">//    or current board goes left (-1) but next position board goes right (1)</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">curCol</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">curCol</span> <span class="o">==</span> <span class="n">n</span> <span class="o">||</span> <span class="n">row</span><span class="o">[</span><span class="n">curCol</span><span class="o">]</span> <span class="o">!=</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Ball is stuck, mark position as -1</span>
                    <span class="n">curCol</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                    <span class="c1">// Stop simulating this ball's path</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c1">// Store final position for ball dropped from column j</span>
            <span class="n">ans</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">curCol</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Complex path with multiple directions</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">grid1</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">},</span>
                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">},</span>
                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">findBall</span><span class="o">(</span><span class="n">grid1</span><span class="o">)));</span>

        <span class="c1">// Test Case 2: Simplest case with single cell</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">grid2</span> <span class="o">=</span> <span class="o">{</span> <span class="o">{</span> <span class="o">-</span><span class="mi">1</span> <span class="o">}</span> <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">findBall</span><span class="o">(</span><span class="n">grid2</span><span class="o">)));</span>

        <span class="c1">// Test Case 3: Alternating rows of same direction</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">grid3</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>
                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>
                <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">findBall</span><span class="o">(</span><span class="n">grid3</span><span class="o">)));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides. Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left. A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1. A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1. We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a “V” shaped pattern between two boards or if a board redirects the ball into either wall of the box. Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 *if the ball gets stuck in the box*.]]></summary></entry><entry><title type="html">1352. Product of the Last K Numbers</title><link href="https://zhengstar94.github.io//blog/2025/ProductOfNumbers/" rel="alternate" type="text/html" title="1352. Product of the Last K Numbers"/><published>2025-02-14T00:00:00+00:00</published><updated>2025-02-14T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ProductOfNumbers</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ProductOfNumbers/"><![CDATA[<ul> <li>Design an algorithm that accepts a stream of integers and retrieves (vt. 重新得到；恢复；检索 vi. 找回猎物) the product of the last <code class="language-plaintext highlighter-rouge">k</code> integers of the stream.</li> <li>Implement the <code class="language-plaintext highlighter-rouge">ProductOfNumbers</code> class: <ul> <li><code class="language-plaintext highlighter-rouge">ProductOfNumbers()</code> Initializes the object with an empty stream.</li> <li><code class="language-plaintext highlighter-rouge">void add(int num)</code> Appends the integer <code class="language-plaintext highlighter-rouge">num</code> to the stream.</li> <li><code class="language-plaintext highlighter-rouge">int getProduct(int k)</code> Returns the product of the last <code class="language-plaintext highlighter-rouge">k</code> numbers in the current list. You can assume that always the current list has at least <code class="language-plaintext highlighter-rouge">k</code> numbers.</li> </ul> </li> <li>The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

Output
[null,null,null,null,null,null,20,40,0,null,32]

Explanation
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * Author: zhengxingxing
 * Date: 2025/02/14
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductOfNumbers</span> <span class="o">{</span>
    <span class="c1">// Use ArrayList to store the prefix product of the numbers in the stream.</span>
    <span class="c1">// prefixProduct[i] represents the product of all numbers from the start of the list to index i.</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">prefixProduct</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">ProductOfNumbers</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">prefixProduct</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">prefixProduct</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// Add 1 as the initial base of the prefix product list.</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// If the number is 0, reset the prefix product list.</span>
            <span class="c1">// This resets the product calculation due to the zero.</span>
            <span class="n">prefixProduct</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">prefixProduct</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// Start fresh with 1 again as the base.</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// If the number is not zero, calculate the new prefix product </span>
            <span class="c1">// by multiplying the last prefix product with the new number.</span>
            <span class="n">prefixProduct</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">prefixProduct</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">prefixProduct</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">*</span> <span class="n">num</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getProduct</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">prefixProduct</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="c1">// If `k` is greater than or equal to the size of the prefix list,</span>
        <span class="c1">// it means the range includes a zero, so the product is 0.</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="c1">// Return the product of the last `k` numbers using:</span>
        <span class="c1">// prefixProduct[n-1] (total product up to the last number)</span>
        <span class="c1">// divided by prefixProduct[n-k-1] (product up to the last `n-k` numbers).</span>
        <span class="k">return</span> <span class="n">prefixProduct</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">/</span> <span class="n">prefixProduct</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ProductOfNumbers</span> <span class="n">productOfNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProductOfNumbers</span><span class="o">();</span>

        <span class="c1">// Test case 1</span>
        <span class="n">productOfNumbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">// Stream: [3]</span>
        <span class="n">productOfNumbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// Stream: [3,0] - reset due to zero</span>
        <span class="n">productOfNumbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">// Stream: [2] - starting fresh</span>
        <span class="n">productOfNumbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span> <span class="c1">// Stream: [2,5]</span>
        <span class="n">productOfNumbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> <span class="c1">// Stream: [2,5,4]</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">productOfNumbers</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span> <span class="c1">// Expected output: 20 (5 * 4)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">productOfNumbers</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span> <span class="c1">// Expected output: 40 (2 * 5 * 4)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">productOfNumbers</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span> <span class="c1">// Expected output: 0 (due to zero in the range)</span>
        <span class="n">productOfNumbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span> <span class="c1">// Stream: [2,5,4,8]</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">productOfNumbers</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span> <span class="c1">// Expected output: 32 (4 * 8)</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">ProductOfNumbers</span> <span class="n">test2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ProductOfNumbers</span><span class="o">();</span>
        <span class="n">test2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="c1">// Stream: [2]</span>
        <span class="n">test2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="c1">// Stream: [2,3]</span>
        <span class="n">test2</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span> <span class="c1">// Stream: [2,3,4]</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test2</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span> <span class="c1">// Expected output: 12 (3 * 4)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test2</span><span class="o">.</span><span class="na">getProduct</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span> <span class="c1">// Expected output: 24 (2 * 3 * 4)</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Medium"/><summary type="html"><![CDATA[Design an algorithm that accepts a stream of integers and retrieves (vt. 重新得到；恢复；检索 vi. 找回猎物) the product of the last k integers of the stream. Implement the ProductOfNumbers class: ProductOfNumbers() Initializes the object with an empty stream. void add(int num) Appends the integer num to the stream. int getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers. The test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.]]></summary></entry><entry><title type="html">930. Binary Subarrays With Sum</title><link href="https://zhengstar94.github.io//blog/2025/BinarySubarraysWithSum/" rel="alternate" type="text/html" title="930. Binary Subarrays With Sum"/><published>2025-02-13T00:00:00+00:00</published><updated>2025-02-13T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/BinarySubarraysWithSum</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/BinarySubarraysWithSum/"><![CDATA[<ul> <li>Given a binary array <code class="language-plaintext highlighter-rouge">nums</code> and an integer <code class="language-plaintext highlighter-rouge">goal</code>, return <em>the number of non-empty <strong>subarrays</strong> with a sum</em> <code class="language-plaintext highlighter-rouge">goal</code>.</li> <li>A <strong>subarray</strong> is a contiguous part of the array.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [0,0,0,0,0], goal = 0
Output: 15
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow.DynamicSlidingWindowCountExact</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/02/13
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinarySubarraysWithSum</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">numSubarraysWithSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">goal</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Result counter to store the number of valid subarrays</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// sum1: tracks sum for window1 (sum &gt;= goal)</span>
        <span class="c1">// sum2: tracks sum for window2 (sum &gt;= goal + 1)</span>
        <span class="kt">int</span> <span class="n">sum1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">sum2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Using three pointers:</span>
        <span class="c1">// l1: left boundary for sum &gt;= goal</span>
        <span class="c1">// l2: left boundary for sum &gt;= goal + 1</span>
        <span class="c1">// r: right boundary for both windows</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">l1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">l2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">r</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Expand both windows by adding the current element</span>
            <span class="n">sum1</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>
            <span class="n">sum2</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>

            <span class="c1">// First window: contract from left while sum1 &gt;= goal</span>
            <span class="c1">// This window finds all subarrays with sum &gt;= goal</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">l1</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">sum1</span> <span class="o">&gt;=</span> <span class="n">goal</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sum1</span> <span class="o">-=</span> <span class="n">nums</span><span class="o">[</span><span class="n">l1</span><span class="o">];</span>
                <span class="n">l1</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Second window: contract from left while sum2 &gt;= goal + 1</span>
            <span class="c1">// This window finds all subarrays with sum &gt;= goal + 1</span>
            <span class="c1">// The purpose is to exclude subarrays with sum greater than goal</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">l2</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">sum2</span> <span class="o">&gt;=</span> <span class="n">goal</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sum2</span> <span class="o">-=</span> <span class="n">nums</span><span class="o">[</span><span class="n">l2</span><span class="o">];</span>
                <span class="n">l2</span><span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// The difference (l1 - l2) gives us the count of subarrays</span>
            <span class="c1">// with sum exactly equal to goal ending at current right pointer 'r'</span>
            <span class="c1">// Because:</span>
            <span class="c1">// l1 represents: how many positions we can place left boundary to get sum &gt;= goal</span>
            <span class="c1">// l2 represents: how many positions we can place left boundary to get sum &gt;= goal+1</span>
            <span class="c1">// Their difference is exactly the count of subarrays with sum == goal</span>
            <span class="n">res</span> <span class="o">+=</span> <span class="n">l1</span> <span class="o">-</span> <span class="n">l2</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Regular case with mixed 0s and 1s</span>
        <span class="c1">// Expected subarrays with sum=2: [1,0,1], [1,0,1], [0,1,0,1], [1,0,1]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">goal1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">numSubarraysWithSum</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">goal1</span><span class="o">));</span> <span class="c1">// Output: 4</span>

        <span class="c1">// Test Case 2: Array with all zeros</span>
        <span class="c1">// Every subarray has sum=0, total number of subarrays = n*(n+1)/2 where n=5</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">goal2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">numSubarraysWithSum</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">goal2</span><span class="o">));</span> <span class="c1">// Output: 15</span>

        <span class="c1">// Test Case 3: Array with all ones</span>
        <span class="c1">// Subarrays with sum=3: [1,1,1], [1,1,1], [1,1,1]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">goal3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">numSubarraysWithSum</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">goal3</span><span class="o">));</span> <span class="c1">// Output: 3</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode DynamicSlidingWindowCountExact"/><category term="Medium"/><category term="SlideWindow"/><summary type="html"><![CDATA[Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal. A subarray is a contiguous part of the array.]]></summary></entry></feed>