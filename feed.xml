<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-12-09T02:53:38+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">1812. Determine Color of a Chessboard Square</title><link href="https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare/" rel="alternate" type="text/html" title="1812. Determine Color of a Chessboard Square"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/DetermineColorOfAChessboardSquare/"><![CDATA[<ul> <li> <p>You are given <code class="language-plaintext highlighter-rouge">coordinates</code>, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.</p> </li> <li> <p>Return <code class="language-plaintext highlighter-rouge">true</code> <em>if the square is white, and</em> <code class="language-plaintext highlighter-rouge">false</code> <em>if the square is black</em>.</p> <p>The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "a1"
Output: false
Explanation: From the chessboard above, the square with coordinates "a1" is black, so return false.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "h3"
Output: true
Explanation: From the chessboard above, the square with coordinates "h3" is white, so return true.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: coordinates = "c7"
Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DetermineColorOfAChessboardSquare</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">squareIsWhite</span><span class="o">(</span><span class="nc">String</span> <span class="n">coordinates</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Convert column letter to zero-based index (a=0, b=1, ...)</span>
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">coordinates</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">;</span>
        <span class="c1">// Convert row number to zero-based index (1=0, 2=1, ...)</span>
        <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">coordinates</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'1'</span><span class="o">;</span>

        <span class="c1">// If the sum of column and row indices is odd, the square is white</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">col</span> <span class="o">+</span> <span class="n">row</span><span class="o">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Black square</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"a1"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: White square</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"h3"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Black square</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"c7"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"e4"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Is coordinate "</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">" white? "</span> <span class="o">+</span> <span class="n">squareIsWhite</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.]]></summary></entry><entry><title type="html">468. Validate IP Address</title><link href="https://zhengstar94.github.io//blog/2024/ValidateIPAddress/" rel="alternate" type="text/html" title="468. Validate IP Address"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/ValidateIPAddress</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/ValidateIPAddress/"><![CDATA[<ul> <li> <p>Given a string <code class="language-plaintext highlighter-rouge">queryIP</code>, return <code class="language-plaintext highlighter-rouge">"IPv4"</code> if IP is a valid IPv4 address, <code class="language-plaintext highlighter-rouge">"IPv6"</code> if IP is a valid IPv6 address or <code class="language-plaintext highlighter-rouge">"Neither"</code> if IP is not a correct IP of any type.</p> </li> <li> <p><strong>A valid IPv4</strong> address is an IP in the form <code class="language-plaintext highlighter-rouge">"x1.x2.x3.x4"</code> where <code class="language-plaintext highlighter-rouge">0 &lt;= xi &lt;= 255</code> and <code class="language-plaintext highlighter-rouge">xi</code> <strong>cannot contain</strong> leading zeros. For example, <code class="language-plaintext highlighter-rouge">"192.168.1.1"</code> and <code class="language-plaintext highlighter-rouge">"192.168.1.0"</code> are valid IPv4 addresses while <code class="language-plaintext highlighter-rouge">"192.168.01.1"</code>, <code class="language-plaintext highlighter-rouge">"192.168.1.00"</code>, and <code class="language-plaintext highlighter-rouge">"192.168@1.1"</code> are invalid IPv4 addresses.</p> </li> <li> <p><strong>A valid IPv6</strong> address is an IP in the form <code class="language-plaintext highlighter-rouge">"x1:x2:x3:x4:x5:x6:x7:x8"</code> where:</p> <ul> <li><code class="language-plaintext highlighter-rouge">1 &lt;= xi.length &lt;= 4</code></li> <li><code class="language-plaintext highlighter-rouge">xi</code> is a <strong>hexadecimal string</strong> which may contain digits, lowercase English letter (<code class="language-plaintext highlighter-rouge">'a'</code> to <code class="language-plaintext highlighter-rouge">'f'</code>) and upper-case English letters (<code class="language-plaintext highlighter-rouge">'A'</code> to <code class="language-plaintext highlighter-rouge">'F'</code>).</li> <li>Leading zeros are allowed in <code class="language-plaintext highlighter-rouge">xi</code>.</li> </ul> </li> <li> <p>For example, “<code class="language-plaintext highlighter-rouge">2001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> and “<code class="language-plaintext highlighter-rouge">2001:db8:85a3:0:0:8A2E:0370:7334"</code> are valid IPv6 addresses, while “<code class="language-plaintext highlighter-rouge">2001:0db8:85a3::8A2E:037j:7334"</code> and “<code class="language-plaintext highlighter-rouge">02001:0db8:85a3:0000:0000:8a2e:0370:7334"</code> are invalid IPv6 addresses.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: queryIP = "172.16.254.1"
Output: "IPv4"
Explanation: This is a valid IPv4 address, return "IPv4".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: queryIP = "2001:0db8:85a3:0:0:8A2E:0370:7334"
Output: "IPv6"
Explanation: This is a valid IPv6 address, return "IPv6".
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: queryIP = "256.256.256.256"
Output: "Neither"
Explanation: This is neither a IPv4 address nor a IPv6 address.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValidateIPAddress</span> <span class="o">{</span>
    <span class="c1">// Constants for IP address types</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">IPV4</span> <span class="o">=</span> <span class="s">"IPv4"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">IPV6</span> <span class="o">=</span> <span class="s">"IPv6"</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NEITHER</span> <span class="o">=</span> <span class="s">"Neither"</span><span class="o">;</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">validIPAddress</span><span class="o">(</span><span class="nc">String</span> <span class="n">queryIP</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Check if it's an IPv4 address (contains dot)</span>
        <span class="k">if</span><span class="o">(</span><span class="n">queryIP</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"."</span><span class="o">)){</span>
            <span class="k">return</span> <span class="nf">handleIPV4</span><span class="o">(</span><span class="n">queryIP</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// Check if it's an IPv6 address (contains colon)</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">queryIP</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">":"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="nf">handleIPV6</span><span class="o">(</span><span class="n">queryIP</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// If neither dot nor colon, it's an invalid address</span>
        <span class="k">else</span><span class="o">{</span>
            <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Validate IPv4 address
     *
     * @param queryIP the IPv4 address to validate
     * @return "IPv4" if valid, "Neither" otherwise
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">handleIPV4</span><span class="o">(</span><span class="nc">String</span> <span class="n">queryIP</span><span class="o">){</span>
        <span class="c1">// Split the IP address into parts</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipParts</span> <span class="o">=</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>

        <span class="c1">// Check basic IPv4 structure</span>
        <span class="k">if</span><span class="o">(</span><span class="n">ipParts</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">4</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"."</span><span class="o">)</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">"."</span><span class="o">)){</span>
            <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Validate each part of the IPv4 address</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="nl">ipPart:</span> <span class="n">ipParts</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Check for invalid leading zeros</span>
            <span class="k">if</span><span class="o">(</span><span class="n">ipPart</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"0"</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nc">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">ipPart</span><span class="o">,</span> <span class="s">"0"</span><span class="o">)){</span>
                <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// Convert part to integer and check range</span>
                <span class="kt">int</span> <span class="n">ipPartInt</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ipPart</span><span class="o">);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">ipPartInt</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ipPartInt</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="o">){</span>
                    <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
                <span class="c1">// If conversion fails, it's invalid</span>
                <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">IPV4</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Validate IPv6 address
     *
     * @param queryIP the IPv6 address to validate
     * @return "IPv6" if valid, "Neither" otherwise
     */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">handleIPV6</span><span class="o">(</span><span class="nc">String</span> <span class="n">queryIP</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Split the IP address into parts</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipParts</span> <span class="o">=</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>

        <span class="c1">// Check basic IPv6 structure</span>
        <span class="k">if</span><span class="o">(</span><span class="n">ipParts</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">8</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">":"</span><span class="o">)</span> <span class="o">||</span> <span class="n">queryIP</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">":"</span><span class="o">)){</span>
            <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Validate each part of the IPv6 address</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="nl">ipPart:</span> <span class="n">ipParts</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Check part length (1-4 characters)</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">ipPart</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">ipPart</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="o">){</span>
                <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Validate each character</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="nl">c:</span> <span class="n">ipPart</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
                <span class="c1">// Only allow 0-9, a-f, A-F</span>
                <span class="k">if</span> <span class="o">((</span><span class="n">c</span> <span class="o">&lt;</span> <span class="sc">'0'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="sc">'9'</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="sc">'a'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="sc">'f'</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="sc">'A'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">&gt;</span> <span class="sc">'F'</span><span class="o">)){</span>
                    <span class="k">return</span> <span class="no">NEITHER</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">IPV6</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// IPv4 test cases</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipv4TestCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"172.16.254.1"</span><span class="o">,</span>       <span class="c1">// Valid IPv4</span>
                <span class="s">"0.0.0.0"</span><span class="o">,</span>            <span class="c1">// Special valid IPv4</span>
                <span class="s">"255.255.255.255"</span><span class="o">,</span>    <span class="c1">// Maximum IPv4</span>
                <span class="s">"256.256.256.256"</span><span class="o">,</span>    <span class="c1">// Invalid IPv4 - Out of range</span>
                <span class="s">"1.1.1.1."</span><span class="o">,</span>           <span class="c1">// Invalid IPv4 - Ends with dot</span>
                <span class="s">"01.01.01.01"</span><span class="o">,</span>        <span class="c1">// Invalid IPv4 - Leading zeros</span>
                <span class="s">"123.045.067.089"</span>     <span class="c1">// Invalid IPv4 - Leading zeros</span>
        <span class="o">};</span>

        <span class="c1">// IPv6 test cases</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ipv6TestCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"2001:0db8:85a3:0:0:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6</span>
                <span class="s">"2001:db8:85a3:01:0:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6 - Single character part</span>
                <span class="s">"2001:0db8:85a3:0:0:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6</span>
                <span class="s">"2001:0db8:85a3:0000:0000:8A2E:0370:7334"</span><span class="o">,</span> <span class="c1">// Valid IPv6</span>
                <span class="s">"::1"</span><span class="o">,</span>                <span class="c1">// Invalid IPv6 - Insufficient segments</span>
                <span class="s">"1:2:3:4:5:6:7:8:9"</span><span class="o">,</span>  <span class="c1">// Invalid IPv6 - Too many segments</span>
                <span class="s">"2001:0db8:85a3:0:0:8A2E:0370:g334"</span> <span class="c1">// Invalid IPv6 - Invalid character</span>
        <span class="o">};</span>

        <span class="c1">// Test IPv4 cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"IPv4 Test Results:"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">ipv4TestCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testCase</span> <span class="o">+</span> <span class="s">" : "</span> <span class="o">+</span> <span class="n">validIPAddress</span><span class="o">(</span><span class="n">testCase</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="c1">// Test IPv6 cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nIPv6 Test Results:"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">ipv6TestCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">testCase</span> <span class="o">+</span> <span class="s">" : "</span> <span class="o">+</span> <span class="n">validIPAddress</span><span class="o">(</span><span class="n">testCase</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Given a string queryIP, return "IPv4" if IP is a valid IPv4 address, "IPv6" if IP is a valid IPv6 address or "Neither" if IP is not a correct IP of any type.]]></summary></entry><entry><title type="html">66. Plus One</title><link href="https://zhengstar94.github.io//blog/2024/PlusOne/" rel="alternate" type="text/html" title="66. Plus One"/><published>2024-12-08T00:00:00+00:00</published><updated>2024-12-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/PlusOne</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/PlusOne/"><![CDATA[<ul> <li>You are given a <strong>large integer</strong> represented as an integer array <code class="language-plaintext highlighter-rouge">digits</code>, where each <code class="language-plaintext highlighter-rouge">digits[i]</code> is the <code class="language-plaintext highlighter-rouge">ith</code> digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading <code class="language-plaintext highlighter-rouge">0</code>’s.</li> <li>Increment the large integer by one and return <em>the resulting array of digits</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PlusOne</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">plusOne</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">digits</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Iterate from the least significant digit (rightmost) to the most significant (leftmost)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">digits</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="c1">// If the current digit is less than 9, we can simply increment and return</span>
            <span class="c1">// This handles most cases where no carrying is needed</span>
            <span class="k">if</span><span class="o">(</span><span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="o">){</span>
                <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>
                <span class="k">return</span> <span class="n">digits</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// If the current digit is 9, set it to 0 and continue to the next digit</span>
            <span class="c1">// This handles the carrying scenario</span>
            <span class="n">digits</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Special case: when all digits are 9 (e.g., [9,9,9])</span>
        <span class="c1">// We need to create a new array with an additional digit</span>
        <span class="c1">// The new array will have 1 at the most significant position</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">newDigits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">digits</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="n">newDigits</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">newDigits</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Normal scenario - last digit less than 9</span>
        <span class="c1">// Input: [1,2,3] → Expected Output: [1,2,4]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1 - Input: [1,2,3], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result1</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Scenario with 9 at the end requiring carry</span>
        <span class="c1">// Input: [1,9,9] → Expected Output: [2,0,0]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 2 - Input: [1,9,9], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result2</span><span class="o">));</span>

        <span class="c1">// Test Case 3: All 9s scenario - requires creating a new array</span>
        <span class="c1">// Input: [9,9,9] → Expected Output: [1,0,0,0]</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">plusOne</span><span class="o">(</span><span class="n">test3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 3 - Input: [9,9,9], Output: "</span> <span class="o">+</span> <span class="n">arrayToString</span><span class="o">(</span><span class="n">result3</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">arrayToString</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="s">"["</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s. Increment the large integer by one and return the resulting array of digits.]]></summary></entry><entry><title type="html">8. String to Integer (atoi)</title><link href="https://zhengstar94.github.io//blog/2024/StringToInteger/" rel="alternate" type="text/html" title="8. String to Integer (atoi)"/><published>2024-12-08T00:00:00+00:00</published><updated>2024-12-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/StringToInteger</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/StringToInteger/"><![CDATA[<ul> <li>Implement the <code class="language-plaintext highlighter-rouge">myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer.</li> <li>The algorithm for <code class="language-plaintext highlighter-rouge">myAtoi(string s)</code> is as follows: <ol> <li><strong>Whitespace</strong>: Ignore any leading whitespace (<code class="language-plaintext highlighter-rouge">" "</code>).</li> <li><strong>Signedness</strong>: Determine the sign by checking if the next character is <code class="language-plaintext highlighter-rouge">'-'</code> or <code class="language-plaintext highlighter-rouge">'+'</code>, assuming positivity if neither present.</li> <li><strong>Conversion</strong>: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.</li> <li><strong>Rounding</strong>: If the integer is out of the 32-bit signed integer range <code class="language-plaintext highlighter-rouge">[-231, 231 - 1]</code>, then round the integer to remain in the range. Specifically, integers less than <code class="language-plaintext highlighter-rouge">-231</code> should be rounded to <code class="language-plaintext highlighter-rouge">-231</code>, and integers greater than <code class="language-plaintext highlighter-rouge">231 - 1</code> should be rounded to <code class="language-plaintext highlighter-rouge">231 - 1</code>.</li> </ol> </li> <li>Return the integer as the final result.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "42"

Output: 42

Explanation:

The underlined characters are what is read in and the caret is the current reader position.
Step 1: "42" (no characters read because there is no leading whitespace)
         ^
Step 2: "42" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "42" ("42" is read in)
				 ^
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = " -042"

Output: -42

Explanation:

Step 1: "   -042" (leading whitespace is read and ignored)
            ^
Step 2: "   -042" ('-' is read, so the result should be negative)
             ^
Step 3: "   -042" ("042" is read in, leading zeros ignored in the result)
						   ^
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "1337c0d3"

Output: 1337

Explanation:

Step 1: "1337c0d3" (no characters read because there is no leading whitespace)
         ^
Step 2: "1337c0d3" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: "1337c0d3" ("1337" is read in; reading stops because the next character is a non-digit)       ^
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringToInteger</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">myAtoi</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Step 1: Remove leading and trailing whitespaces</span>
        <span class="c1">// Ensures no unnecessary spaces affect conversion</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>

        <span class="c1">// Step 2: Handle empty string case</span>
        <span class="c1">// If string is empty after trimming, return 0</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Step 3: Sign handling</span>
        <span class="c1">// Default to positive, track sign and starting index</span>
        <span class="kt">int</span> <span class="n">sign</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>  <span class="c1">// 1 for positive, -1 for negative</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Check for explicit sign character</span>
        <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'-'</span><span class="o">){</span>
            <span class="c1">// Negative sign found</span>
            <span class="n">sign</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'+'</span><span class="o">){</span>
            <span class="c1">// Positive sign found (optional)</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="c1">// Step 4: Digit conversion</span>
        <span class="c1">// Use long to prevent intermediate overflow during conversion</span>
        <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Continue reading digits until non-digit or end of string</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="nc">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">))){</span>
            <span class="c1">// Convert character digit to numeric value</span>
            <span class="c1">// Subtracting '0' converts character to its numeric equivalent</span>
            <span class="kt">int</span> <span class="n">digit</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">;</span>

            <span class="c1">// Step 5: Overflow Prevention</span>
            <span class="c1">// Two-condition check to detect potential 32-bit integer overflow</span>
            <span class="c1">// Condition 1: result already exceeds MAX_VALUE / 10</span>
            <span class="c1">// Condition 2: result equals MAX_VALUE / 10 and next digit exceeds MAX_VALUE's last digit</span>
            <span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">/</span> <span class="mi">10</span> <span class="o">||</span>
                    <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">/</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">digit</span> <span class="o">&gt;</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">%</span> <span class="mi">10</span><span class="o">)</span>
            <span class="o">){</span>
                <span class="c1">// Handle overflow by returning boundary values</span>
                <span class="c1">// Depends on the sign of the number</span>
                <span class="k">return</span> <span class="n">sign</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">:</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// Build number digit by digit</span>
            <span class="c1">// Multiply existing result by 10 and add new digit</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">digit</span><span class="o">;</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="c1">// Final step: Apply sign and convert to 32-bit integer</span>
        <span class="c1">// Multiplies result by sign and casts to int</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">sign</span> <span class="o">*</span> <span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test cases covering different scenarios</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">testCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"42"</span><span class="o">,</span>           <span class="c1">// Simple positive number</span>
                <span class="s">" -042"</span><span class="o">,</span>        <span class="c1">// Negative number with leading zeros and spaces</span>
                <span class="s">"1337c0d3"</span><span class="o">,</span>     <span class="c1">// Number with non-digit characters</span>
                <span class="s">"  +  413"</span><span class="o">,</span>     <span class="c1">// Invalid number with spaces</span>
                <span class="s">"words and 987"</span><span class="o">,</span><span class="c1">// Words before number</span>
                <span class="s">"-91283472332"</span><span class="o">,</span> <span class="c1">// Number beyond Integer.MIN_VALUE</span>
                <span class="s">"91283472332"</span>   <span class="c1">// Number beyond Integer.MAX_VALUE</span>
        <span class="o">};</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: \""</span> <span class="o">+</span> <span class="n">testCase</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">myAtoi</span><span class="o">(</span><span class="n">testCase</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer. The algorithm for myAtoi(string s) is as follows: Whitespace: Ignore any leading whitespace (" "). Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity if neither present. Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0. Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1. Return the integer as the final result.]]></summary></entry><entry><title type="html">28. Find the Index of the First Occurrence in a String</title><link href="https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString/" rel="alternate" type="text/html" title="28. Find the Index of the First Occurrence in a String"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/FindTheIndexOfTheFirstOccurrenceInAString/"><![CDATA[<ul> <li>Given two strings <code class="language-plaintext highlighter-rouge">needle</code> and <code class="language-plaintext highlighter-rouge">haystack</code>, return the index of the first occurrence of <code class="language-plaintext highlighter-rouge">needle</code> in <code class="language-plaintext highlighter-rouge">haystack</code>, or <code class="language-plaintext highlighter-rouge">-1</code> if <code class="language-plaintext highlighter-rouge">needle</code> is not part of <code class="language-plaintext highlighter-rouge">haystack</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "sadbutsad", needle = "sad"
Output: 0
Explanation: "sad" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: haystack = "leetcode", needle = "leeto"
Output: -1
Explanation: "leeto" did not occur in "leetcode", so we return -1.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindTheIndexOfTheFirstOccurrenceInAString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">strStr</span><span class="o">(</span><span class="nc">String</span> <span class="n">haystack</span><span class="o">,</span> <span class="nc">String</span> <span class="n">needle</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get the lengths of the haystack and needle</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">haystack</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">needle</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// Special case: if needle is empty, return 0</span>
        <span class="k">if</span><span class="o">(</span><span class="n">m</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Iterate through possible starting positions in haystack</span>
        <span class="c1">// Stop at n - m to prevent index out of bounds</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>

            <span class="c1">// Index used to iterate through the characters of the needle (substring)</span>
            <span class="c1">// Helps track the current character position during the matching process</span>
            <span class="c1">// Resets to 0 for each new potential starting position in the haystack</span>
            <span class="kt">int</span> <span class="n">j</span><span class="o">;</span>

            <span class="c1">// Compare characters in the current window</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// If characters don't match, break the inner loop</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">haystack</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">)</span> <span class="o">!=</span> <span class="n">needle</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// If all characters in the window match the needle</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Return the starting index of the match</span>
                <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If no match is found after checking all possible positions</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Standard matching</span>
        <span class="nc">String</span> <span class="n">haystack1</span> <span class="o">=</span> <span class="s">"sadbutsad"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle1</span> <span class="o">=</span> <span class="s">"sad"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack1</span><span class="o">,</span> <span class="n">needle1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 2: No matching substring</span>
        <span class="nc">String</span> <span class="n">haystack2</span> <span class="o">=</span> <span class="s">"leetcode"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle2</span> <span class="o">=</span> <span class="s">"leeto"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack2</span><span class="o">,</span> <span class="n">needle2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 3: Empty needle</span>
        <span class="nc">String</span> <span class="n">haystack3</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle3</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack3</span><span class="o">,</span> <span class="n">needle3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Test Case 4: Multiple possible matches, return the first</span>
        <span class="nc">String</span> <span class="n">haystack4</span> <span class="o">=</span> <span class="s">"mississippi"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">needle4</span> <span class="o">=</span> <span class="s">"issip"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Haystack: "</span> <span class="o">+</span> <span class="n">haystack4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Needle: "</span> <span class="o">+</span> <span class="n">needle4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match Index: "</span> <span class="o">+</span> <span class="n">strStr</span><span class="o">(</span><span class="n">haystack4</span><span class="o">,</span> <span class="n">needle4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.]]></summary></entry><entry><title type="html">58. Length of Last Word</title><link href="https://zhengstar94.github.io//blog/2024/LengthOfLastWord/" rel="alternate" type="text/html" title="58. Length of Last Word"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/LengthOfLastWord</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/LengthOfLastWord/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code> consisting of words and spaces, return <em>the length of the <strong>last</strong> word in the string.</em></li> <li>A <strong>word</strong> is a maximal substring consisting of non-space characters only.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "Hello World"
Output: 5
Explanation: The last word is "World" with length 5.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "   fly me   to   the moon  "
Output: 4
Explanation: The last word is "moon" with length 4.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "luffy is still joyboy"
Output: 6
Explanation: The last word is "joyboy" with length 6.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LengthOfLastWord</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">lengthOfLastWord</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">' '</span><span class="o">){</span>
                <span class="n">length</span><span class="o">++;</span>
            <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">length</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Normal string with single space</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"Hello World"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test 1: \""</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: String with trailing spaces</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"   fly me   to   the moon  "</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest 2: \""</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span>

        <span class="c1">// Test case 3: Single word</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"luffy"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest 3: \""</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span>

        <span class="c1">// Test case 4: Empty string</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest 4: \""</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length of last word: "</span> <span class="o">+</span> <span class="n">lengthOfLastWord</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[Given a string s consisting of words and spaces, return the length of the last word in the string. A word is a maximal substring consisting of non-space characters only.]]></summary></entry><entry><title type="html">13. Roman to Integer</title><link href="https://zhengstar94.github.io//blog/2024/RomanToInteger/" rel="alternate" type="text/html" title="13. Roman to Integer"/><published>2024-12-07T00:00:00+00:00</published><updated>2024-12-07T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/RomanToInteger</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/RomanToInteger/"><![CDATA[<ul> <li> <p>Roman numerals are represented by seven different symbols: <code class="language-plaintext highlighter-rouge">I</code>, <code class="language-plaintext highlighter-rouge">V</code>, <code class="language-plaintext highlighter-rouge">X</code>, <code class="language-plaintext highlighter-rouge">L</code>, <code class="language-plaintext highlighter-rouge">C</code>, <code class="language-plaintext highlighter-rouge">D</code> and <code class="language-plaintext highlighter-rouge">M</code>.</p> <blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
</code></pre></div> </div> </blockquote> </li> <li> <p>For example, <code class="language-plaintext highlighter-rouge">2</code> is written as <code class="language-plaintext highlighter-rouge">II</code> in Roman numeral, just two ones added together. <code class="language-plaintext highlighter-rouge">12</code> is written as <code class="language-plaintext highlighter-rouge">XII</code>, which is simply <code class="language-plaintext highlighter-rouge">X + II</code>. The number <code class="language-plaintext highlighter-rouge">27</code> is written as <code class="language-plaintext highlighter-rouge">XXVII</code>, which is <code class="language-plaintext highlighter-rouge">XX + V + II</code>.</p> </li> <li> <p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code class="language-plaintext highlighter-rouge">IIII</code>. Instead, the number four is written as <code class="language-plaintext highlighter-rouge">IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code class="language-plaintext highlighter-rouge">IX</code>. There are six instances where subtraction is used:</p> <ul> <li><code class="language-plaintext highlighter-rouge">I</code> can be placed before <code class="language-plaintext highlighter-rouge">V</code> (5) and <code class="language-plaintext highlighter-rouge">X</code> (10) to make 4 and 9.</li> <li><code class="language-plaintext highlighter-rouge">X</code> can be placed before <code class="language-plaintext highlighter-rouge">L</code> (50) and <code class="language-plaintext highlighter-rouge">C</code> (100) to make 40 and 90.</li> <li><code class="language-plaintext highlighter-rouge">C</code> can be placed before <code class="language-plaintext highlighter-rouge">D</code> (500) and <code class="language-plaintext highlighter-rouge">M</code> (1000) to make 400 and 900.</li> </ul> </li> <li> <p>Given a roman numeral, convert it to an integer.</p> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "III"
Output: 3
Explanation: III = 3.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Greedy</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/07
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RomanToInteger</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">romanToInt</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create a hash map to store Roman numeral character values</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">romanValues</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">()</span> <span class="o">;</span>

        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate through the Roman numeral string from left to right</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Get the integer value of the current Roman numeral character</span>
            <span class="kt">int</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="n">romanValues</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>

            <span class="c1">// Determine how to add or subtract the current value</span>
            <span class="c1">// There are two scenarios:</span>
            <span class="c1">// 1. This is the last character in the string</span>
            <span class="c1">// 2. The current character's value is greater than or equal to the next character's value</span>
            <span class="c1">// If either of these conditions is true, we add the current value</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">currentValue</span> <span class="o">&gt;=</span> <span class="n">romanValues</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)))</span> <span class="o">{</span>
                <span class="c1">// Normal case: add the current value</span>
                <span class="c1">// This handles most Roman numerals like III (3), VI (6), etc.</span>
                <span class="n">result</span> <span class="o">+=</span> <span class="n">currentValue</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Special case: subtract the current value</span>
                <span class="c1">// This handles exceptions like IV (4), IX (9), XC (90), etc.</span>
                <span class="c1">// When a smaller value appears before a larger value, we subtract</span>
                <span class="n">result</span> <span class="o">-=</span> <span class="n">currentValue</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">// Test cases to demonstrate various Roman numeral conversions</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">testCases</span> <span class="o">=</span> <span class="o">{</span>
                <span class="s">"III"</span><span class="o">,</span>       <span class="c1">// Standard case: 3</span>
                <span class="s">"IV"</span><span class="o">,</span>        <span class="c1">// Subtraction case: 4</span>
                <span class="s">"IX"</span><span class="o">,</span>        <span class="c1">// Another subtraction case: 9</span>
                <span class="s">"LVIII"</span><span class="o">,</span>     <span class="c1">// Mixed case: 58</span>
                <span class="s">"MCMXCIV"</span>    <span class="c1">// Complex case: 1994</span>
        <span class="o">};</span>

        <span class="c1">// Iterate through test cases and print results</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">testCase</span> <span class="o">:</span> <span class="n">testCases</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">romanToInt</span><span class="o">(</span><span class="n">testCase</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Roman Numeral: "</span> <span class="o">+</span> <span class="n">testCase</span> <span class="o">+</span>
                    <span class="s">" | Integer Value: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Easy"/><summary type="html"><![CDATA[Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.]]></summary></entry><entry><title type="html">999. Available Captures for Rook</title><link href="https://zhengstar94.github.io//blog/2024/AvailableCapturesForRook/" rel="alternate" type="text/html" title="999. Available Captures for Rook"/><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/AvailableCapturesForRook</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/AvailableCapturesForRook/"><![CDATA[<ul> <li>You are given an <code class="language-plaintext highlighter-rouge">8 x 8</code> <strong>matrix</strong> representing a chessboard. There is <strong>exactly one</strong> white rook represented by <code class="language-plaintext highlighter-rouge">'R'</code>, some number of white bishops <code class="language-plaintext highlighter-rouge">'B'</code>, and some number of black pawns <code class="language-plaintext highlighter-rouge">'p'</code>. Empty squares are represented by <code class="language-plaintext highlighter-rouge">'.'</code>.</li> <li>A rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece <em>or</em> the edge of the board. A rook is <strong>attacking</strong> a pawn if it can move to the pawn’s square in one move.</li> <li>Note: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path.</li> <li>Return the <strong>number of pawns</strong> the white rook is <strong>attacking</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [ [ ".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","." ] ]

Output: 3

Explanation:

In this example, the rook is attacking all the pawns.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [ [ ".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","." ] ]

Output: 0

Explanation:

The bishops are blocking the rook from attacking any of the pawns.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: board = [ [ ".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","." ] ]

Output: 3

Explanation:

The rook is attacking the pawns at positions b5, d6, and f5.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AvailableCapturesForRook</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">numRookCaptures</span><span class="o">(</span><span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">captures</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Counter for captured pawns</span>
    <span class="kt">int</span> <span class="n">rookRow</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">rookCol</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// Initial rook position coordinates</span>

    <span class="c1">// Find the rook's position on the chessboard</span>
    <span class="c1">// Nested loops iterate through each square to locate the rook</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'R'</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// When rook is found, store its row and column coordinates</span>
          <span class="n">rookRow</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
          <span class="n">rookCol</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
          <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
      <span class="o">}</span>
      <span class="c1">// If the rook's row has been found (rookRow is no longer -1), </span>
      <span class="c1">// immediately exit the outer loop to optimize the search process. </span>
      <span class="c1">// This prevents unnecessary iterations through the remaining rows </span>
      <span class="c1">// after the rook's position has already been located, </span>
      <span class="c1">// improving the time efficiency of finding the rook on the chessboard.</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">rookRow</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
        <span class="k">break</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Check capture possibilities in four directions from rook's position</span>

    <span class="c1">// Upward direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rookRow</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Downward direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rookRow</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">rookCol</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Left direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">rookCol</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// Right direction capture check</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">rookCol</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">){</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop if a bishop blocks the path</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">rookRow</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="sc">'p'</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">captures</span><span class="o">++;</span> <span class="c1">// Capture the pawn</span>
        <span class="k">break</span><span class="o">;</span> <span class="c1">// Stop checking this direction after capturing</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">captures</span><span class="o">;</span> <span class="c1">// Return total number of captured pawns</span>
  <span class="o">}</span>


  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Test Case 1: Pawns available in multiple directions</span>
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board1</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'R'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">numRookCaptures</span><span class="o">(</span><span class="n">board1</span><span class="o">));</span>

    <span class="c1">// Test Case 2: Bishops blocking all pawns</span>
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board2</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'B'</span><span class="o">,</span><span class="sc">'R'</span><span class="o">,</span><span class="sc">'B'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">numRookCaptures</span><span class="o">(</span><span class="n">board2</span><span class="o">));</span>

    <span class="c1">// Test Case 3: Pawns available in some directions</span>
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board3</span> <span class="o">=</span> <span class="o">{</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'B'</span><span class="o">,</span><span class="sc">'R'</span><span class="o">,</span><span class="sc">'p'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,},</span>
            <span class="o">{</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,</span><span class="sc">'.'</span><span class="o">,}</span>
    <span class="o">};</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">numRookCaptures</span><span class="o">(</span><span class="n">board3</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given an 8 x 8 matrix representing a chessboard. There is exactly one white rook represented by 'R', some number of white bishops 'B', and some number of black pawns 'p'. Empty squares are represented by '.'. A rook can move any number of squares horizontally or vertically (up, down, left, right) until it reaches another piece or the edge of the board. A rook is attacking a pawn if it can move to the pawn’s square in one move. Note: A rook cannot move through other pieces, such as bishops or pawns. This means a rook cannot attack a pawn if there is another piece blocking the path. Return the number of pawns the white rook is attacking.]]></summary></entry><entry><title type="html">498. Diagonal Traverse</title><link href="https://zhengstar94.github.io//blog/2024/DiagonalTraverse/" rel="alternate" type="text/html" title="498. Diagonal Traverse"/><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/DiagonalTraverse</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/DiagonalTraverse/"><![CDATA[<ul> <li>Given an <code class="language-plaintext highlighter-rouge">m x n</code> matrix <code class="language-plaintext highlighter-rouge">mat</code>, return <em>an array of all the elements of the array in a diagonal order</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: mat = [ [1,2,3],[4,5,6],[7,8,9] ]
Output: [1,2,4,7,5,3,6,8,9]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: mat = [ [ 1,2],[3,4 ] ]
Output: [1,2,3,4]

</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(m * n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DiagonalTraverse</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findDiagonalOrder</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">mat</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Number of rows in the matrix</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">mat</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Number of columns in the matrix</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">mat</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Result array to store diagonal traversal</span>
        <span class="c1">// Size is total number of elements in the matrix</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">m</span> <span class="o">*</span> <span class="n">n</span><span class="o">];</span>

        <span class="c1">// Index to track current position in the result array</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Total number of diagonals is (m + n - 1)</span>
        <span class="c1">// We iterate through each diagonal</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">+</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Even-indexed diagonals: Bottom-left to Top-right direction</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Determine the starting point for the current diagonal</span>

                <span class="c1">// Row starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of rows,</span>
                <span class="c1">// start from that row index</span>
                <span class="c1">// Otherwise, start from the last row</span>
                <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">?</span> <span class="n">i</span> <span class="o">:</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Column starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of rows,</span>
                <span class="c1">// start from first column (0)</span>
                <span class="c1">// Otherwise, calculate the starting column based on diagonal index</span>
                <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">i</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Traverse the diagonal while within matrix bounds</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Add current matrix element to result</span>
                    <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">mat</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">];</span>

                    <span class="c1">// Move upwards in the matrix</span>
                    <span class="n">x</span><span class="o">--;</span>

                    <span class="c1">// Move to the right in the matrix</span>
                    <span class="n">y</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c1">// Odd-indexed diagonals: Top-right to Bottom-left direction</span>
            <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Determine the starting point for the current diagonal</span>

                <span class="c1">// Row starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of columns,</span>
                <span class="c1">// start from first row</span>
                <span class="c1">// Otherwise, calculate the starting row based on diagonal index</span>
                <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">i</span> <span class="o">-</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Column starting point calculation:</span>
                <span class="c1">// If current diagonal index is less than number of columns,</span>
                <span class="c1">// start from that column index</span>
                <span class="c1">// Otherwise, start from the last column</span>
                <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">?</span> <span class="n">i</span> <span class="o">:</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>

                <span class="c1">// Traverse the diagonal while within matrix bounds</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// Add current matrix element to result</span>
                    <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">++]</span> <span class="o">=</span> <span class="n">mat</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">];</span>

                    <span class="c1">// Move downwards in the matrix</span>
                    <span class="n">x</span><span class="o">++;</span>

                    <span class="c1">// Move to the left in the matrix</span>
                    <span class="n">y</span><span class="o">--;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the array with diagonal traversal order</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Utility method to print an array
     *
     * @param arr Input array to be printed
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Iterate through each element and print with space</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// Print a new line after array elements</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Main method to demonstrate diagonal traversal with different matrix types
     *
     * @param args Command line arguments (not used)
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: 3x3 Square Matrix</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat1</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3x3 Matrix Traversal Result:"</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">findDiagonalOrder</span><span class="o">(</span><span class="n">mat1</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">result1</span><span class="o">);</span>

        <span class="c1">// Test Case 2: 4x4 Square Matrix</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat2</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span>  <span class="mi">2</span><span class="o">,</span>  <span class="mi">3</span><span class="o">,</span>  <span class="mi">4</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">5</span><span class="o">,</span>  <span class="mi">6</span><span class="o">,</span>  <span class="mi">7</span><span class="o">,</span>  <span class="mi">8</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">12</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">13</span><span class="o">,</span> <span class="mi">14</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">16</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"4x4 Matrix Traversal Result:"</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">findDiagonalOrder</span><span class="o">(</span><span class="n">mat2</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">result2</span><span class="o">);</span>

        <span class="c1">// Test Case 3: Rectangular Matrix</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">mat3</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">12</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3x4 Matrix Traversal Result:"</span><span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result3</span> <span class="o">=</span> <span class="n">findDiagonalOrder</span><span class="o">(</span><span class="n">mat3</span><span class="o">);</span>
        <span class="n">printArray</span><span class="o">(</span><span class="n">result3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.]]></summary></entry><entry><title type="html">434. Number of Segments in a String</title><link href="https://zhengstar94.github.io//blog/2024/NumberOfSegmentsInAString/" rel="alternate" type="text/html" title="434. Number of Segments in a String"/><published>2024-12-06T00:00:00+00:00</published><updated>2024-12-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2024/NumberOfSegmentsInAString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2024/NumberOfSegmentsInAString/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code>, return <em>the number of segments in the string</em>.</li> <li>A <strong>segment</strong> is defined to be a contiguous sequence of <strong>non-space characters</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "Hello, my name is John"
Output: 5
Explanation: The five segments are ["Hello,", "my", "name", "is", "John"]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "Hello"
Output: 1
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2024/12/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberOfSegmentsInAString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countSegments</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Initialize the segment counter.</span>

        <span class="c1">// Loop through the characters in the string.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="cm">/**
             * Key condition:
             * 1. Check if the current character is NOT a space: s.charAt(i) != ' '
             *    - Ensures we are only processing non-space characters.
             * 2. Check if it's the start of a new segment:
             *    - It's the first character in the string (i == 0), OR
             *    - The previous character is a space (s.charAt(i - 1) == ' ').
             *    - This ensures that we only count the beginning of a new word.
             */</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="sc">' '</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="sc">' '</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">sum</span><span class="o">++;</span> <span class="c1">// Increment the segment counter for a new word.</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span> <span class="c1">// Return the total number of segments found.</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases</span>
        <span class="nc">String</span> <span class="n">test1</span> <span class="o">=</span> <span class="s">"Hello world"</span><span class="o">;</span> <span class="c1">// Two words.</span>
        <span class="nc">String</span> <span class="n">test2</span> <span class="o">=</span> <span class="s">"   Leading spaces"</span><span class="o">;</span> <span class="c1">// Two words with leading spaces.</span>
        <span class="nc">String</span> <span class="n">test3</span> <span class="o">=</span> <span class="s">"Trailing spaces   "</span><span class="o">;</span> <span class="c1">// Two words with trailing spaces.</span>
        <span class="nc">String</span> <span class="n">test4</span> <span class="o">=</span> <span class="s">"  Multiple   spaces  between words  "</span><span class="o">;</span> <span class="c1">// Four words with multiple spaces.</span>
        <span class="nc">String</span> <span class="n">test5</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span> <span class="c1">// Empty string, should return 0.</span>
        <span class="nc">String</span> <span class="n">test6</span> <span class="o">=</span> <span class="s">"      "</span><span class="o">;</span> <span class="c1">// String with only spaces, should return 0.</span>
        <span class="nc">String</span> <span class="n">test7</span> <span class="o">=</span> <span class="s">"OneWord"</span><span class="o">;</span> <span class="c1">// Single word, should return 1.</span>

        <span class="c1">// Print results for each test case.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test1: "</span> <span class="o">+</span> <span class="n">test1</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span> <span class="c1">// Output: 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test2: "</span> <span class="o">+</span> <span class="n">test2</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span> <span class="c1">// Output: 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test3: "</span> <span class="o">+</span> <span class="n">test3</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span> <span class="c1">// Output: 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test4: "</span> <span class="o">+</span> <span class="n">test4</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test4</span><span class="o">));</span> <span class="c1">// Output: 4</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test5: "</span> <span class="o">+</span> <span class="n">test5</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test5</span><span class="o">));</span> <span class="c1">// Output: 0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test6: "</span> <span class="o">+</span> <span class="n">test6</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test6</span><span class="o">));</span> <span class="c1">// Output: 0</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test7: "</span> <span class="o">+</span> <span class="n">test7</span> <span class="o">+</span> <span class="s">" -&gt; Segments: "</span> <span class="o">+</span> <span class="n">countSegments</span><span class="o">(</span><span class="n">test7</span><span class="o">));</span> <span class="c1">// Output: 1</span>
    <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[Given a string s, return the number of segments in the string. A segment is defined to be a contiguous sequence of non-space characters.]]></summary></entry></feed>