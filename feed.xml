<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-11T06:11:29+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">1400. Construct K Palindrome Strings</title><link href="https://zhengstar94.github.io//blog/2025/ConstructKPalindromeStrings/" rel="alternate" type="text/html" title="1400. Construct K Palindrome Strings"/><published>2025-01-11T00:00:00+00:00</published><updated>2025-01-11T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ConstructKPalindromeStrings</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ConstructKPalindromeStrings/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code> and an integer <code class="language-plaintext highlighter-rouge">k</code>, return <code class="language-plaintext highlighter-rouge">true</code> <em>if you can use all the characters in</em> <code class="language-plaintext highlighter-rouge">s</code> <em>to construct</em> <code class="language-plaintext highlighter-rouge">k</code> <em>palindrome strings or</em> <code class="language-plaintext highlighter-rouge">false</code> <em>otherwise</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "annabelle", k = 2
Output: true
Explanation: You can construct two palindromes using all characters in s.
Some possible constructions "anna" + "elble", "anbna" + "elle", "anellena" + "b"
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "leetcode", k = 3
Output: false
Explanation: It is impossible to construct 3 palindromes using all the characters of s.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "true", k = 4
Output: true
Explanation: The only possible solution is to put each character in a separate  string.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/11
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConstructKPalindromeStrings</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">canConstruct</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// If k is greater than the string length, it's impossible to construct</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Count the frequency of each character</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">count</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="c1">// Count the number of characters that appear odd times</span>
        <span class="kt">int</span> <span class="n">oddCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">oddCount</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// If the number of characters appearing odd times is greater than k,</span>
        <span class="c1">// we cannot construct k palindrome strings</span>
        <span class="c1">// If k=1, we can have any number of odd frequency characters</span>
        <span class="c1">// If k&gt;1, the number of odd frequency characters cannot exceed k</span>
        <span class="k">return</span> <span class="n">oddCount</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"annabelle"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">canConstruct</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span> <span class="c1">// Should output true</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"leetcode"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">canConstruct</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span> <span class="c1">// Should output false</span>

        <span class="c1">// Test case 3</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"true"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">k3</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3: "</span> <span class="o">+</span> <span class="n">canConstruct</span><span class="o">(</span><span class="n">s3</span><span class="o">,</span> <span class="n">k3</span><span class="o">));</span> <span class="c1">// Should output true</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.]]></summary></entry><entry><title type="html">3270. Find the Key of the Numbers</title><link href="https://zhengstar94.github.io//blog/2025/FindTheKeyOfTheNumbers/" rel="alternate" type="text/html" title="3270. Find the Key of the Numbers"/><published>2025-01-11T00:00:00+00:00</published><updated>2025-01-11T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/FindTheKeyOfTheNumbers</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/FindTheKeyOfTheNumbers/"><![CDATA[<ul> <li>You are given three <strong>positive</strong> integers <code class="language-plaintext highlighter-rouge">num1</code>, <code class="language-plaintext highlighter-rouge">num2</code>, and <code class="language-plaintext highlighter-rouge">num3</code>.</li> <li>The <code class="language-plaintext highlighter-rouge">key</code> of <code class="language-plaintext highlighter-rouge">num1</code>, <code class="language-plaintext highlighter-rouge">num2</code>, and <code class="language-plaintext highlighter-rouge">num3</code> is defined as a four-digit number such that: <ul> <li>Initially, if any number has <strong>less than</strong> four digits, it is padded with <strong>leading zeros</strong>.</li> <li>The <code class="language-plaintext highlighter-rouge">ith</code> digit (<code class="language-plaintext highlighter-rouge">1 &lt;= i &lt;= 4</code>) of the <code class="language-plaintext highlighter-rouge">key</code> is generated by taking the <strong>smallest</strong> digit among the <code class="language-plaintext highlighter-rouge">ith</code> digits of <code class="language-plaintext highlighter-rouge">num1</code>, <code class="language-plaintext highlighter-rouge">num2</code>, and <code class="language-plaintext highlighter-rouge">num3</code>.</li> </ul> </li> <li>Return the <code class="language-plaintext highlighter-rouge">key</code> of the three numbers <strong>without</strong> leading zeros (<em>if any</em>).</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = 1, num2 = 10, num3 = 1000

Output: 0

Explanation:

On padding, num1 becomes "0001", num2 becomes "0010", and num3 remains "1000".

The 1st digit of the key is min(0, 0, 1).
The 2nd digit of the key is min(0, 0, 0).
The 3rd digit of the key is min(0, 1, 0).
The 4th digit of the key is min(1, 0, 0).
Hence, the key is "0000", i.e. 0.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = 987, num2 = 879, num3 = 798

Output: 777
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: num1 = 1, num2 = 2, num3 = 3

Output: 1
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Math</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/11
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindTheKeyOfTheNumbers</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findKey</span><span class="o">(</span><span class="kt">int</span> <span class="n">num1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num3</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Convert numbers to 4-digit strings with leading zeros</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%04d"</span><span class="o">,</span> <span class="n">num1</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%04d"</span><span class="o">,</span> <span class="n">num2</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%04d"</span><span class="o">,</span> <span class="n">num3</span><span class="o">);</span>

        <span class="nc">StringBuilder</span> <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>

        <span class="c1">// Iterate through each digit and find the minimum value</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">digit</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span>
                            <span class="n">s1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">,</span>
                            <span class="n">s2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span><span class="o">),</span>
                    <span class="n">s3</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'0'</span>
            <span class="o">);</span>
            <span class="n">key</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">digit</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Convert to integer and return</span>
        <span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1:"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">num3</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: num1 = "</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">", num2 = "</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">", num3 = "</span> <span class="o">+</span> <span class="n">num3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">findKey</span><span class="o">(</span><span class="n">num1</span><span class="o">,</span> <span class="n">num2</span><span class="o">,</span> <span class="n">num3</span><span class="o">));</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2:"</span><span class="o">);</span>
        <span class="n">num1</span> <span class="o">=</span> <span class="mi">987</span><span class="o">;</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">879</span><span class="o">;</span> <span class="n">num3</span> <span class="o">=</span> <span class="mi">798</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: num1 = "</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">", num2 = "</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">", num3 = "</span> <span class="o">+</span> <span class="n">num3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">findKey</span><span class="o">(</span><span class="n">num1</span><span class="o">,</span> <span class="n">num2</span><span class="o">,</span> <span class="n">num3</span><span class="o">));</span>

        <span class="c1">// Test case 3</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 3:"</span><span class="o">);</span>
        <span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">num3</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: num1 = "</span> <span class="o">+</span> <span class="n">num1</span> <span class="o">+</span> <span class="s">", num2 = "</span> <span class="o">+</span> <span class="n">num2</span> <span class="o">+</span> <span class="s">", num3 = "</span> <span class="o">+</span> <span class="n">num3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">findKey</span><span class="o">(</span><span class="n">num1</span><span class="o">,</span> <span class="n">num2</span><span class="o">,</span> <span class="n">num3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Math"/><category term="Easy"/><summary type="html"><![CDATA[You are given three positive integers num1, num2, and num3. The key of num1, num2, and num3 is defined as a four-digit number such that: Initially, if any number has less than four digits, it is padded with leading zeros. The ith digit (1 &lt;= i &lt;= 4) of the key is generated by taking the smallest digit among the ith digits of num1, num2, and num3. Return the key of the three numbers without leading zeros (if any).]]></summary></entry><entry><title type="html">220. Contains Duplicate III</title><link href="https://zhengstar94.github.io//blog/2025/ContainsDuplicateIII/" rel="alternate" type="text/html" title="220. Contains Duplicate III"/><published>2025-01-10T00:00:00+00:00</published><updated>2025-01-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ContainsDuplicateIII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ContainsDuplicateIII/"><![CDATA[<h1 id="220-contains-duplicate-iii">220. Contains Duplicate III</h1> <ul> <li>You are given an integer array <code class="language-plaintext highlighter-rouge">nums</code> and two integers <code class="language-plaintext highlighter-rouge">indexDiff</code> and <code class="language-plaintext highlighter-rouge">valueDiff</code>.</li> <li>Find a pair of indices <code class="language-plaintext highlighter-rouge">(i, j)</code> such that: <ul> <li><code class="language-plaintext highlighter-rouge">i != j</code>,</li> <li><code class="language-plaintext highlighter-rouge">abs(i - j) &lt;= indexDiff</code>.</li> <li><code class="language-plaintext highlighter-rouge">abs(nums[i] - nums[j]) &lt;= valueDiff</code>, and</li> </ul> </li> <li>Return <code class="language-plaintext highlighter-rouge">true</code> <em>if such pair exists or</em> <code class="language-plaintext highlighter-rouge">false</code> <em>otherwise</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0
Output: true
Explanation: We can choose (i, j) = (0, 3).
We satisfy the three conditions:
i != j --&gt; 0 != 3
abs(i - j) &lt;= indexDiff --&gt; abs(0 - 3) &lt;= 3
abs(nums[i] - nums[j]) &lt;= valueDiff --&gt; abs(1 - 1) &lt;= 0
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3
Output: false
Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * log(k)) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.TreeSet</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ContainsDuplicateIII</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">containsNearbyAlmostDuplicate</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">indexDiff</span><span class="o">,</span> <span class="kt">int</span> <span class="n">valueDiff</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases: null array, array length less than 2, invalid indexDiff or valueDiff</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">indexDiff</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">valueDiff</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">TreeSet</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// 1. Enter window</span>
            <span class="c1">// Convert current number to long to avoid integer overflow</span>
            <span class="nc">Long</span> <span class="n">curr</span> <span class="o">=</span> <span class="o">(</span><span class="kt">long</span><span class="o">)</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="c1">// Find the smallest value greater than or equal to (curr - valueDiff)</span>
            <span class="nc">Long</span> <span class="n">ceiling</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">ceiling</span><span class="o">(</span><span class="n">curr</span> <span class="o">-</span> <span class="n">valueDiff</span><span class="o">);</span>
            <span class="c1">// If such value exists and is within the valueDiff range, we found a valid pair</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">ceiling</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">ceiling</span> <span class="o">&lt;=</span> <span class="n">curr</span> <span class="o">+</span> <span class="n">valueDiff</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">curr</span><span class="o">);</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">indexDiff</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Window size has not reached indexDiff yet</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// 2. Update answer</span>
            <span class="c1">// No need to update answer here as we return true immediately when finding a valid pair</span>

            <span class="c1">// 3. Exit window</span>
            <span class="c1">// Remove the leftmost element from the window</span>
            <span class="n">set</span><span class="o">.</span><span class="na">remove</span><span class="o">((</span><span class="kt">long</span><span class="o">)</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">indexDiff</span><span class="o">]);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Should return true</span>
        <span class="c1">// Contains duplicate values (1) within indexDiff = 3 and valueDiff = 0</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">indexDiff1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">valueDiff1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1 Result: "</span> <span class="o">+</span> <span class="n">containsNearbyAlmostDuplicate</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">indexDiff1</span><span class="o">,</span> <span class="n">valueDiff1</span><span class="o">));</span>
        <span class="c1">// Expected output: true</span>

        <span class="c1">// Test Case 2: Should return false</span>
        <span class="c1">// No pairs satisfy both indexDiff and valueDiff conditions</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">indexDiff2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">valueDiff2</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2 Result: "</span> <span class="o">+</span> <span class="n">containsNearbyAlmostDuplicate</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">indexDiff2</span><span class="o">,</span> <span class="n">valueDiff2</span><span class="o">));</span>
        <span class="c1">// Expected output: false</span>

        <span class="c1">// Test Case 3: Edge case - single element array</span>
        <span class="c1">// Should return false as no pairs exist</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">indexDiff3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">valueDiff3</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3 Result: "</span> <span class="o">+</span> <span class="n">containsNearbyAlmostDuplicate</span><span class="o">(</span><span class="n">nums3</span><span class="o">,</span> <span class="n">indexDiff3</span><span class="o">,</span> <span class="n">valueDiff3</span><span class="o">));</span>
        <span class="c1">// Expected output: false</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Hard"/><summary type="html"><![CDATA[220. Contains Duplicate III]]></summary></entry><entry><title type="html">3298. Count Substrings That Can Be Rearranged to Contain a String II</title><link href="https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringII/" rel="alternate" type="text/html" title="3298. Count Substrings That Can Be Rearranged to Contain a String II"/><published>2025-01-10T00:00:00+00:00</published><updated>2025-01-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringII/"><![CDATA[<ul> <li>You are given two strings <code class="language-plaintext highlighter-rouge">word1</code> and <code class="language-plaintext highlighter-rouge">word2</code>.</li> <li>A string <code class="language-plaintext highlighter-rouge">x</code> is called <strong>valid</strong> if <code class="language-plaintext highlighter-rouge">x</code> can be rearranged to have <code class="language-plaintext highlighter-rouge">word2</code> as a prefix.</li> <li>Return the total number of <strong>valid</strong> substrings of <code class="language-plaintext highlighter-rouge">word1</code>.</li> <li><strong>Note</strong> that the memory limits in this problem are <strong>smaller</strong> than usual, so you <strong>must</strong> implement a solution with a <em>linear</em> runtime complexity.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [90], k = 1
Output: 0
Explanation: There is one way to pick score(s) of one student:
- [90]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [9,4,1,7], k = 2
Output: 2
Explanation: There are six ways to pick score(s) of two students:
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountSubstringsThatCanBeRearrangedToContainAStringII</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">validSubstringCount</span><span class="o">(</span><span class="nc">String</span> <span class="n">word1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">word2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Early return if word1 is shorter than word2, as no valid substring possible</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">word1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">word2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Convert strings to char arrays for efficient access</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="n">word1</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">word2</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>

        <span class="c1">// Array to track the difference in character frequencies</span>
        <span class="c1">// diff[i] &gt; 0 means we need more of character i</span>
        <span class="c1">// diff[i] = 0 means we have exactly enough of character i</span>
        <span class="c1">// diff[i] &lt; 0 means we have excess of character i</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">diff</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>

        <span class="c1">// Initialize diff array with character frequencies from word2</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="c1">// Count how many characters we still need</span>
        <span class="c1">// less represents the number of unique characters we still need</span>
        <span class="kt">int</span> <span class="n">less</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">:</span> <span class="n">diff</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">less</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Variables to track results and window</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>     <span class="c1">// Total count of valid substrings</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>     <span class="c1">// Left boundary of sliding window</span>

        <span class="c1">// Process each character in word1</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Add current character to window by decreasing its needed count</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]--;</span>

            <span class="c1">// If after adding this character, its frequency matches exactly what we need</span>
            <span class="c1">// (diff becomes 0), we have one less character to worry about</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">less</span><span class="o">--;</span>
            <span class="o">}</span>

            <span class="c1">// When less == 0, we have all characters we need</span>
            <span class="c1">// Try to minimize the window by removing characters from left</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">less</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Get the character we're about to remove</span>
                <span class="kt">char</span> <span class="n">outChar</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">left</span><span class="o">++];</span>

                <span class="c1">// If this character's count was exactly what we needed (diff == 0)</span>
                <span class="c1">// removing it will make it deficient, so increase less</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">diff</span><span class="o">[</span><span class="n">outChar</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">less</span><span class="o">++;</span>
                <span class="o">}</span>
                <span class="c1">// Update diff array as we remove the character</span>
                <span class="n">diff</span><span class="o">[</span><span class="n">outChar</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
            <span class="o">}</span>

            <span class="c1">// Add left to answer - this is crucial!</span>
            <span class="c1">// left represents how many valid substrings end at the current position</span>
            <span class="c1">// because we can start the substring at any position from 0 to left-1</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">left</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Expect 1 valid substring</span>
        <span class="nc">String</span> <span class="n">word1_1</span> <span class="o">=</span> <span class="s">"bcca"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_1</span><span class="o">,</span> <span class="n">word2_1</span><span class="o">));</span> <span class="c1">// Expected: 1</span>

        <span class="c1">// Test case 2: Expect 10 valid substrings</span>
        <span class="nc">String</span> <span class="n">word1_2</span> <span class="o">=</span> <span class="s">"abcabc"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_2</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_2</span><span class="o">,</span> <span class="n">word2_2</span><span class="o">));</span> <span class="c1">// Expected: 10</span>

        <span class="c1">// Test case 3: Expect 0 valid substrings</span>
        <span class="nc">String</span> <span class="n">word1_3</span> <span class="o">=</span> <span class="s">"abcabc"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_3</span> <span class="o">=</span> <span class="s">"aaabc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_3</span><span class="o">,</span> <span class="n">word2_3</span><span class="o">));</span> <span class="c1">// Expected: 0</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Hard"/><summary type="html"><![CDATA[You are given two strings word1 and word2. A string x is called valid if x can be rearranged to have word2 as a prefix. Return the total number of valid substrings of word1. Note that the memory limits in this problem are smaller than usual, so you must implement a solution with a linear runtime complexity.]]></summary></entry><entry><title type="html">916. Word Subsets</title><link href="https://zhengstar94.github.io//blog/2025/WordSubsets/" rel="alternate" type="text/html" title="916. Word Subsets"/><published>2025-01-10T00:00:00+00:00</published><updated>2025-01-10T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/WordSubsets</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/WordSubsets/"><![CDATA[<ul> <li>You are given two string arrays <code class="language-plaintext highlighter-rouge">words1</code> and <code class="language-plaintext highlighter-rouge">words2</code>.</li> <li>A string <code class="language-plaintext highlighter-rouge">b</code> is a <strong>subset</strong> of string <code class="language-plaintext highlighter-rouge">a</code> if every letter in <code class="language-plaintext highlighter-rouge">b</code> occurs in <code class="language-plaintext highlighter-rouge">a</code> including multiplicity. <ul> <li>For example, <code class="language-plaintext highlighter-rouge">"wrr"</code> is a subset of <code class="language-plaintext highlighter-rouge">"warrior"</code> but is not a subset of <code class="language-plaintext highlighter-rouge">"world"</code>.</li> </ul> </li> <li>A string <code class="language-plaintext highlighter-rouge">a</code> from <code class="language-plaintext highlighter-rouge">words1</code> is <strong>universal</strong> if for every string <code class="language-plaintext highlighter-rouge">b</code> in <code class="language-plaintext highlighter-rouge">words2</code>, <code class="language-plaintext highlighter-rouge">b</code> is a subset of <code class="language-plaintext highlighter-rouge">a</code>.</li> <li>Return an array of all the <strong>universal</strong> strings in <code class="language-plaintext highlighter-rouge">words1</code>. You may return the answer in <strong>any order</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["e","o"]
Output: ["facebook","google","leetcode"]
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words1 = ["amazon","apple","facebook","google","leetcode"], words2 = ["l","e"]
Output: ["apple","google","leetcode"]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * k1 + m * k2) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/10
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WordSubsets</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">wordSubsets</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words1</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">words2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Array to store the maximum frequency required for each character (a-z)</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">maxFreq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>

        <span class="c1">// First key loop: Process all strings in words2</span>
        <span class="c1">// Purpose: Find the maximum frequency required for each character across all strings in words2</span>
        <span class="c1">// For example, if words2 = ["wrr", "er"], we need max frequency of 'r' which is 2 (from "wrr")</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="nl">word:</span> <span class="n">words2</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Get frequency count of characters in current word</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="n">getFrequency</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>

            <span class="c1">// Update the maximum frequency required for each character</span>
            <span class="c1">// This creates a "combined frequency requirement" from all words2 strings</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">maxFreq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxFreq</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// List to store all universal strings found in words1</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Second key loop: Check each string in words1</span>
        <span class="c1">// Purpose: Determine which strings in words1 satisfy all character frequency requirements</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words1</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Get character frequency count of current word</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="n">getFrequency</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
            <span class="c1">// Initially assume this word is universal</span>
            <span class="kt">boolean</span> <span class="n">isUniversal</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

            <span class="c1">// Compare character frequencies</span>
            <span class="c1">// Check if current word has enough of each required character</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// If current word doesn't have enough of any required character</span>
                <span class="c1">// For example: if we need 2 'r's but word only has 1 'r'</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">freq</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">maxFreq</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">isUniversal</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>  <span class="c1">// Mark as non-universal</span>
                    <span class="k">break</span><span class="o">;</span>  <span class="c1">// No need to check further characters</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="c1">// If word satisfied all character frequency requirements, add it to result</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">isUniversal</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">getFrequency</span><span class="o">(</span><span class="nc">String</span> <span class="n">word</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">freq</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="nl">c:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">freq</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">freq</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Finding words containing both 'e' and 'o'</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words1Test1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"amazon"</span><span class="o">,</span> <span class="s">"apple"</span><span class="o">,</span> <span class="s">"facebook"</span><span class="o">,</span> <span class="s">"google"</span><span class="o">,</span> <span class="s">"leetcode"</span><span class="o">};</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words2Test1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"e"</span><span class="o">,</span> <span class="s">"o"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">wordSubsets</span><span class="o">(</span><span class="n">words1Test1</span><span class="o">,</span> <span class="n">words2Test1</span><span class="o">));</span>

        <span class="c1">// Test case 2: Finding words containing both 'l' and 'e'</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words1Test2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"amazon"</span><span class="o">,</span> <span class="s">"apple"</span><span class="o">,</span> <span class="s">"facebook"</span><span class="o">,</span> <span class="s">"google"</span><span class="o">,</span> <span class="s">"leetcode"</span><span class="o">};</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words2Test2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"l"</span><span class="o">,</span> <span class="s">"e"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">wordSubsets</span><span class="o">(</span><span class="n">words1Test2</span><span class="o">,</span> <span class="n">words2Test2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given two string arrays words1 and words2. A string b is a subset of string a if every letter in b occurs in a including multiplicity. For example, "wrr" is a subset of "warrior" but is not a subset of "world". A string a from words1 is universal if for every string b in words2, b is a subset of a. Return an array of all the universal strings in words1. You may return the answer in any order.]]></summary></entry><entry><title type="html">3297. Count Substrings That Can Be Rearranged to Contain a String I</title><link href="https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringI/" rel="alternate" type="text/html" title="3297. Count Substrings That Can Be Rearranged to Contain a String I"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountSubstringsThatCanBeRearrangedToContainAStringI/"><![CDATA[<ul> <li>You are given two strings <code class="language-plaintext highlighter-rouge">word1</code> and <code class="language-plaintext highlighter-rouge">word2</code>.</li> <li>A string <code class="language-plaintext highlighter-rouge">x</code> is called <strong>valid</strong> if <code class="language-plaintext highlighter-rouge">x</code> can be rearranged to have <code class="language-plaintext highlighter-rouge">word2</code> as a prefix.</li> <li>Return the total number of <strong>valid</strong> substrings of <code class="language-plaintext highlighter-rouge">word1</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "bcca", word2 = "abc"
Output: 1

Explanation:

The only valid substring is "bcca" which can be rearranged to "abcc" having "abc" as a prefix.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "abcabc", word2 = "abc"
Output: 10

Explanation:

All the substrings except  substrings of size 1 and size 2 are valid.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: word1 = "abcabc", word2 = "aaabc"

Output: 0
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountSubstringsThatCanBeRearrangedToContainAStringI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">long</span> <span class="nf">validSubstringCount</span><span class="o">(</span><span class="nc">String</span> <span class="n">word1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">word2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Early return if word1 is shorter than word2, as no valid substring possible</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">word1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">word2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Convert strings to char arrays for efficient access</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="n">word1</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
        <span class="kt">char</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">word2</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>

        <span class="c1">// Array to track the difference in character frequencies</span>
        <span class="c1">// diff[i] &gt; 0 means we need more of character i</span>
        <span class="c1">// diff[i] = 0 means we have exactly enough of character i</span>
        <span class="c1">// diff[i] &lt; 0 means we have excess of character i</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">diff</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>

        <span class="c1">// Initialize diff array with character frequencies from word2</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="c1">// Count how many characters we still need</span>
        <span class="c1">// less represents the number of unique characters we still need</span>
        <span class="kt">int</span> <span class="n">less</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">:</span> <span class="n">diff</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">less</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Variables to track results and window</span>
        <span class="kt">long</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>     <span class="c1">// Total count of valid substrings</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>     <span class="c1">// Left boundary of sliding window</span>

        <span class="c1">// Process each character in word1</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// Add current character to window by decreasing its needed count</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]--;</span>

            <span class="c1">// If after adding this character, its frequency matches exactly what we need</span>
            <span class="c1">// (diff becomes 0), we have one less character to worry about</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">diff</span><span class="o">[</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">less</span><span class="o">--;</span>
            <span class="o">}</span>

            <span class="c1">// When less == 0, we have all characters we need</span>
            <span class="c1">// Try to minimize the window by removing characters from left</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">less</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Get the character we're about to remove</span>
                <span class="kt">char</span> <span class="n">outChar</span> <span class="o">=</span> <span class="n">s</span><span class="o">[</span><span class="n">left</span><span class="o">++];</span>

                <span class="c1">// If this character's count was exactly what we needed (diff == 0)</span>
                <span class="c1">// removing it will make it deficient, so increase less</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">diff</span><span class="o">[</span><span class="n">outChar</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">less</span><span class="o">++;</span>
                <span class="o">}</span>
                <span class="c1">// Update diff array as we remove the character</span>
                <span class="n">diff</span><span class="o">[</span><span class="n">outChar</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
            <span class="o">}</span>

            <span class="c1">// Add left to answer - this is crucial!</span>
            <span class="c1">// left represents how many valid substrings end at the current position</span>
            <span class="c1">// because we can start the substring at any position from 0 to left-1</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">left</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Expect 1 valid substring</span>
        <span class="nc">String</span> <span class="n">word1_1</span> <span class="o">=</span> <span class="s">"bcca"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_1</span><span class="o">,</span> <span class="n">word2_1</span><span class="o">));</span> <span class="c1">// Expected: 1</span>

        <span class="c1">// Test case 2: Expect 10 valid substrings</span>
        <span class="nc">String</span> <span class="n">word1_2</span> <span class="o">=</span> <span class="s">"abcabc"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_2</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_2</span><span class="o">,</span> <span class="n">word2_2</span><span class="o">));</span> <span class="c1">// Expected: 10</span>

        <span class="c1">// Test case 3: Expect 0 valid substrings</span>
        <span class="nc">String</span> <span class="n">word1_3</span> <span class="o">=</span> <span class="s">"abcabc"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">word2_3</span> <span class="o">=</span> <span class="s">"aaabc"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">validSubstringCount</span><span class="o">(</span><span class="n">word1_3</span><span class="o">,</span> <span class="n">word2_3</span><span class="o">));</span> <span class="c1">// Expected: 0</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Medium"/><summary type="html"><![CDATA[You are given two strings word1 and word2. A string x is called valid if x can be rearranged to have word2 as a prefix. Return the total number of valid substrings of word1.]]></summary></entry><entry><title type="html">2185. Counting Words With a Given Prefix</title><link href="https://zhengstar94.github.io//blog/2025/CountingWordsWithAGivenPrefix/" rel="alternate" type="text/html" title="2185. Counting Words With a Given Prefix"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountingWordsWithAGivenPrefix</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountingWordsWithAGivenPrefix/"><![CDATA[<ul> <li>You are given an array of strings <code class="language-plaintext highlighter-rouge">words</code> and a string <code class="language-plaintext highlighter-rouge">pref</code>.</li> <li>Return <em>the number of strings in</em> <code class="language-plaintext highlighter-rouge">words</code> <em>that contain</em> <code class="language-plaintext highlighter-rouge">pref</code> <em>as a <strong>prefix</strong></em>.</li> <li>A <strong>prefix</strong> of a string <code class="language-plaintext highlighter-rouge">s</code> is any leading contiguous substring of <code class="language-plaintext highlighter-rouge">s</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["pay","attention","practice","attend"], pref = "at"
Output: 2
Explanation: The 2 strings that contain "at" as a prefix are: "attention" and "attend".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["leetcode","win","loops","success"], pref = "code"
Output: 0
Explanation: There are no strings that contain "code" as a prefix.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountingWordsWithAGivenPrefix</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">prefixCount</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">,</span> <span class="nc">String</span> <span class="n">pref</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">pref</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">count</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"pay"</span><span class="o">,</span> <span class="s">"attention"</span><span class="o">,</span> <span class="s">"practice"</span><span class="o">,</span> <span class="s">"attend"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">pref1</span> <span class="o">=</span> <span class="s">"at"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">prefixCount</span><span class="o">(</span><span class="n">words1</span><span class="o">,</span> <span class="n">pref1</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"leetcode"</span><span class="o">,</span> <span class="s">"win"</span><span class="o">,</span> <span class="s">"loops"</span><span class="o">,</span> <span class="s">"success"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">pref2</span> <span class="o">=</span> <span class="s">"code"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">prefixCount</span><span class="o">(</span><span class="n">words2</span><span class="o">,</span> <span class="n">pref2</span><span class="o">));</span> <span class="c1">// Expected output: 0</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"apple"</span><span class="o">,</span> <span class="s">"app"</span><span class="o">,</span> <span class="s">"apartment"</span><span class="o">,</span> <span class="s">"ape"</span><span class="o">,</span> <span class="s">"banana"</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">pref3</span> <span class="o">=</span> <span class="s">"ap"</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">prefixCount</span><span class="o">(</span><span class="n">words3</span><span class="o">,</span> <span class="n">pref3</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Easy"/><summary type="html"><![CDATA[You are given an array of strings words and a string pref. Return the number of strings in words that contain pref as a prefix. A prefix of a string s is any leading contiguous substring of s.]]></summary></entry><entry><title type="html">1984. Minimum Difference Between Highest and Lowest of K Scores</title><link href="https://zhengstar94.github.io//blog/2025/MinimumDifferenceBetweenHighestAndLowestOfKScores/" rel="alternate" type="text/html" title="1984. Minimum Difference Between Highest and Lowest of K Scores"/><published>2025-01-09T00:00:00+00:00</published><updated>2025-01-09T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MinimumDifferenceBetweenHighestAndLowestOfKScores</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MinimumDifferenceBetweenHighestAndLowestOfKScores/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">nums</code>, where <code class="language-plaintext highlighter-rouge">nums[i]</code> represents the score of the <code class="language-plaintext highlighter-rouge">ith</code> student. You are also given an integer <code class="language-plaintext highlighter-rouge">k</code>.</li> <li>Pick the scores of any <code class="language-plaintext highlighter-rouge">k</code> students from the array so that the <strong>difference</strong> between the <strong>highest</strong> and the <strong>lowest</strong> of the <code class="language-plaintext highlighter-rouge">k</code> scores is <strong>minimized</strong>.</li> <li>Return <em>the <strong>minimum</strong> possible difference</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [90], k = 1
Output: 0
Explanation: There is one way to pick score(s) of one student:
- [90]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [9,4,1,7], k = 2
Output: 2
Explanation: There are six ways to pick score(s) of two students:
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/09
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumDifferenceBetweenHighestAndLowestOfKScores</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minimumDifference</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Handle edge cases:</span>
        <span class="c1">// 1. If array is null</span>
        <span class="c1">// 2. If array length is less than k</span>
        <span class="c1">// 3. If k is 1 or less (difference will always be 0)</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="n">k</span> <span class="o">||</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Sort the array to ensure that within any window of size k,</span>
        <span class="c1">// the maximum will be at the right end and minimum at the left end</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>

        <span class="c1">// Initialize minDiff with maximum possible integer value</span>
        <span class="kt">int</span> <span class="n">minDiff</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>

        <span class="c1">// Sliding window implementation:</span>
        <span class="c1">// i represents the start of each window</span>
        <span class="c1">// i + k - 1 represents the end of each window</span>
        <span class="c1">// We use &lt;= because we want to include the last possible window</span>
        <span class="c1">// For example: if array length is 6 and k is 3,</span>
        <span class="c1">// we need to check windows starting at index 0,1,2,3 (6-3=3)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Calculate difference between max and min in current window</span>
            <span class="c1">// nums[i + k - 1] is the maximum (right end of window)</span>
            <span class="c1">// nums[i] is the minimum (left end of window)</span>
            <span class="kt">int</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="c1">// Update minDiff if current difference is smaller</span>
            <span class="n">minDiff</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">minDiff</span><span class="o">,</span> <span class="n">diff</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">minDiff</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Main method to test the solution with various test cases
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Single element array</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">90</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">minimumDifference</span><span class="o">(</span><span class="n">nums1</span><span class="o">,</span> <span class="n">k1</span><span class="o">));</span> <span class="c1">// Expected output: 0</span>

        <span class="c1">// Test case 2: Small array with multiple elements</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">9</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">7</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">k2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">minimumDifference</span><span class="o">(</span><span class="n">nums2</span><span class="o">,</span> <span class="n">k2</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Easy"/><summary type="html"><![CDATA[You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k. Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized. Return the minimum possible difference.]]></summary></entry><entry><title type="html">1016. Binary String With Substrings Representing 1 To N</title><link href="https://zhengstar94.github.io//blog/2025/BinaryStringWithSubstringsRepresenting1ToN/" rel="alternate" type="text/html" title="1016. Binary String With Substrings Representing 1 To N"/><published>2025-01-08T00:00:00+00:00</published><updated>2025-01-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/BinaryStringWithSubstringsRepresenting1ToN</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/BinaryStringWithSubstringsRepresenting1ToN/"><![CDATA[<ul> <li>Given a binary string <code class="language-plaintext highlighter-rouge">s</code> and a positive integer <code class="language-plaintext highlighter-rouge">n</code>, return <code class="language-plaintext highlighter-rouge">true</code> <em>if the binary representation of all the integers in the range</em> <code class="language-plaintext highlighter-rouge">[1, n]</code> <em>are <strong>substrings</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code><em>, or</em> <code class="language-plaintext highlighter-rouge">false</code> <em>otherwise</em>.</li> <li>A <strong>substring</strong> is a contiguous sequence of characters within a string.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "0110", n = 3
Output: true
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "0110", n = 4
Output: false
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n * L) time | O(log(n)) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.String</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryStringWithSubstringsRepresenting1ToN</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">queryString</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Check if string s contains binary representation of all numbers from 0 to n</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">binary</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toBinaryString</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">s</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">binary</span><span class="o">)){</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"0110"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s1</span> <span class="o">+</span> <span class="s">"\", n = "</span> <span class="o">+</span> <span class="n">n1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">queryString</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">n1</span><span class="o">));</span>  <span class="c1">// Should output true</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"0110"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s2</span> <span class="o">+</span> <span class="s">"\", n = "</span> <span class="o">+</span> <span class="n">n2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">queryString</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">n2</span><span class="o">));</span>  <span class="c1">// Should output false</span>

        <span class="c1">// Additional test case</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"1111000"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 3:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input: s = \""</span> <span class="o">+</span> <span class="n">s3</span> <span class="o">+</span> <span class="s">"\", n = "</span> <span class="o">+</span> <span class="n">n3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Output: "</span> <span class="o">+</span> <span class="n">queryString</span><span class="o">(</span><span class="n">s3</span><span class="o">,</span> <span class="n">n3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode String"/><category term="Medium"/><summary type="html"><![CDATA[Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise. A substring is a contiguous sequence of characters within a string.]]></summary></entry><entry><title type="html">3042. Count Prefix and Suffix Pairs I</title><link href="https://zhengstar94.github.io//blog/2025/CountPrefixAndSuffixPairsI/" rel="alternate" type="text/html" title="3042. Count Prefix and Suffix Pairs I"/><published>2025-01-08T00:00:00+00:00</published><updated>2025-01-08T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/CountPrefixAndSuffixPairsI</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/CountPrefixAndSuffixPairsI/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> string array <code class="language-plaintext highlighter-rouge">words</code>.</li> <li>Let’s define a <strong>boolean</strong> function <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix</code> that takes two strings, <code class="language-plaintext highlighter-rouge">str1</code> and <code class="language-plaintext highlighter-rouge">str2</code>: <ul> <li>isPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise.</li> </ul> </li> <li>For example, <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix("aba", "ababa")</code> is <code class="language-plaintext highlighter-rouge">true</code> because <code class="language-plaintext highlighter-rouge">"aba"</code> is a prefix of <code class="language-plaintext highlighter-rouge">"ababa"</code> and also a suffix, but <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix("abc", "abcd")</code> is <code class="language-plaintext highlighter-rouge">false</code>.</li> <li>Return <em>an integer denoting the <strong>number</strong> of index pairs</em> <code class="language-plaintext highlighter-rouge">(i, j)</code> <em>such that</em> <code class="language-plaintext highlighter-rouge">i &lt; j</code><em>, and</em> <code class="language-plaintext highlighter-rouge">isPrefixAndSuffix(words[i], words[j])</code> <em>is</em> <code class="language-plaintext highlighter-rouge">true</code><em>.</em></li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["a","aba","ababa","aa"]
Output: 4
Explanation: In this example, the counted index pairs are:
i = 0 and j = 1 because isPrefixAndSuffix("a", "aba") is true.
i = 0 and j = 2 because isPrefixAndSuffix("a", "ababa") is true.
i = 0 and j = 3 because isPrefixAndSuffix("a", "aa") is true.
i = 1 and j = 2 because isPrefixAndSuffix("aba", "ababa") is true.
Therefore, the answer is 4.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["pa","papa","ma","mama"]
Output: 2
Explanation: In this example, the counted index pairs are:
i = 0 and j = 1 because isPrefixAndSuffix("pa", "papa") is true.
i = 2 and j = 3 because isPrefixAndSuffix("ma", "mama") is true.
Therefore, the answer is 2.  
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: words = ["abab","ab"]
Output: 0
Explanation: In this example, the only valid index pair is i = 0 and j = 1, and isPrefixAndSuffix("abab", "ab") is false.
Therefore, the answer is 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n<span class="p">^</span>2 * m) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/08
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountPrefixAndSuffixPairsI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countPrefixSuffixPairs</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Counter for valid prefix-suffix pairs</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Get array length to avoid repeated length calls</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

        <span class="c1">// Outer loop - iterate through potential prefix strings</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Inner loop - compare with all subsequent strings</span>
            <span class="c1">// Start from i+1 to ensure i &lt; j condition</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// Check if words[i] is both prefix and suffix of words[j]</span>
                <span class="k">if</span><span class="o">(</span><span class="n">isPrefixAndSuffix</span><span class="o">(</span><span class="n">words</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">words</span><span class="o">[</span><span class="n">j</span><span class="o">])){</span>
                    <span class="n">count</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPrefixAndSuffix</span><span class="o">(</span><span class="nc">String</span> <span class="n">str1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Get lengths of both strings for comparison</span>
        <span class="kt">int</span> <span class="n">len1</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">len2</span> <span class="o">=</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// If str1 is longer than str2, it can't be a prefix or suffix</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">len1</span> <span class="o">&gt;</span> <span class="n">len2</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Check if str1 is both a prefix and suffix of str2</span>
        <span class="c1">// using Java's built-in string methods</span>
        <span class="k">return</span> <span class="n">str2</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">str1</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">str2</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="n">str1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"aba"</span><span class="o">,</span> <span class="s">"ababa"</span><span class="o">,</span> <span class="s">"aa"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1 result: "</span> <span class="o">+</span> <span class="n">countPrefixSuffixPairs</span><span class="o">(</span><span class="n">test1</span><span class="o">));</span> <span class="c1">// Expected output: 4</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"pa"</span><span class="o">,</span> <span class="s">"papa"</span><span class="o">,</span> <span class="s">"ma"</span><span class="o">,</span> <span class="s">"mama"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2 result: "</span> <span class="o">+</span> <span class="n">countPrefixSuffixPairs</span><span class="o">(</span><span class="n">test2</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test case 3</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">test3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"abab"</span><span class="o">,</span> <span class="s">"ab"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 3 result: "</span> <span class="o">+</span> <span class="n">countPrefixSuffixPairs</span><span class="o">(</span><span class="n">test3</span><span class="o">));</span> <span class="c1">// Expected output: 0</span>
    <span class="o">}</span>


<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Easy"/><summary type="html"><![CDATA[You are given a 0-indexed string array words. Let’s define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2: isPrefixAndSuffix(str1, str2) returns true if str1 is both a prefix and a suffix of str2, and false otherwise. For example, isPrefixAndSuffix("aba", "ababa") is true because "aba" is a prefix of "ababa" and also a suffix, but isPrefixAndSuffix("abc", "abcd") is false. Return an integer denoting the number of index pairs (i, j) such that i &lt; j, and isPrefixAndSuffix(words[i], words[j]) is true.]]></summary></entry></feed>