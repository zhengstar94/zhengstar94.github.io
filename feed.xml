<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-06-23T05:42:12+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">blank</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">JDBCBatchUpdate</title><link href="https://zhengstar94.github.io//blog/2023/JDBCBatchUpdate/" rel="alternate" type="text/html" title="JDBCBatchUpdate"/><published>2023-12-25T00:00:00+00:00</published><updated>2023-12-25T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/JDBCBatchUpdate</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/JDBCBatchUpdate/"><![CDATA[<h1 id="optimizing-large-scale-data-migration-from-sql-server-to-mysql-with-jdbc">Optimizing Large-scale Data Migration from SQL Server to MySQL with JDBC</h1> <h2 id="migration-challenge-transferring-2-million-records-from-sql-server-to-mysql">Migration Challenge: Transferring 2 Million Records from SQL Server to MySQL</h2> <p>I got a business requirement in some Sprint, i need to migration data(2,000,000) from SQL Serve to MySQL, because for some reason, can not use script to migrate. And there has some following requirements：</p> <ol> <li>Inability to use script for data migration.</li> <li>Migration must be performed using Java APIs.</li> <li>Synchronization time must be within 30 minutes.</li> <li>The process needs to be stable and free from exceptions.</li> </ol> <h2 id="approaches">Approaches</h2> <h3 id="1-method-1-using-jpas-saveall-function">1. Method 1: Using JPA’s <code class="language-plaintext highlighter-rouge">saveAll</code> Function</h3> <p><strong>Pseudo code</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">patchData</span><span class="o">(</span><span class="nc">String</span> <span class="n">cursor</span><span class="o">){</span>
  <span class="n">log</span><span class="o">(</span><span class="s">"patch data Start"</span><span class="o">);</span>
  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  
  <span class="c1">// loop to get data one by one</span>
  <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
    <span class="n">num</span><span class="o">++;</span>
    
    <span class="nc">PatchData</span> <span class="n">patchData</span> <span class="o">=</span> <span class="n">patchDataService</span><span class="o">.</span><span class="na">getData</span><span class="o">(</span><span class="n">cursor</span><span class="o">);</span>
    <span class="c1">// if list is null, then exit the loop</span>
    <span class="k">if</span><span class="o">(</span><span class="n">patchData</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">!</span><span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">())</span>			<span class="o">{</span>
				<span class="c1">//get new cursor</span>
      	<span class="n">cursor</span> <span class="o">=</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getCursor</span><span class="o">();</span>
      	
      	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Data</span><span class="o">&gt;</span> <span class="n">dataList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
      	
      	<span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;{</span>
          <span class="nc">Data</span> <span class="n">newData</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Data</span><span class="o">();</span>
          <span class="n">newData</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
          <span class="n">newData</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
          <span class="n">newData</span><span class="o">.</span><span class="na">setDate</span><span class="o">(</span><span class="k">new</span> <span class="nc">Data</span><span class="o">());</span>
          <span class="n">dataList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">newData</span><span class="o">);</span>
        <span class="o">})</span>
        <span class="c1">// save list  </span>
        <span class="nc">DataRepository</span><span class="o">.</span><span class="na">saveAll</span><span class="o">(</span><span class="n">dataList</span><span class="o">);</span>
      	<span class="n">log</span><span class="o">(</span><span class="s">"patch data: {} times"</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
    <span class="o">}</span><span class="k">else</span><span class="o">{</span>
      <span class="n">log</span><span class="o">(</span><span class="s">"patch data End"</span><span class="o">);</span>
      <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Execute Time</strong></p> <table> <thead> <tr> <th style="text-align: left">Data Size</th> <th style="text-align: left">ExecuteTime(ms)</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">100</td> <td style="text-align: left">555</td> </tr> <tr> <td style="text-align: left">200</td> <td style="text-align: left">693</td> </tr> <tr> <td style="text-align: left">500</td> <td style="text-align: left">1033</td> </tr> <tr> <td style="text-align: left">1000</td> <td style="text-align: left">1855</td> </tr> <tr> <td style="text-align: left">10000</td> <td style="text-align: left">19337</td> </tr> </tbody> </table> <blockquote> <p>If we want to insert 200 datas in batch and call saveAll () to pass the data set in, then we will execute <code class="language-plaintext highlighter-rouge">save()</code>200 times in turn. When execute <code class="language-plaintext highlighter-rouge">save()</code> to invoke MySQL in a java service, invoking an external service is itself a time-consuming operation in the service, and each execution of sql automatically opens and closes the transaction after the transaction has been executed. So using <code class="language-plaintext highlighter-rouge">saveAll ()</code> to do bulk inserts can be very time consuming.</p> </blockquote> <p><strong>Performance Analysis</strong>:</p> <ul> <li>Suitable for moderate data sizes.</li> <li>Performance deteriorates significantly as data volume increases. For instance, inserting 10,000 records takes approximately 19 seconds.</li> <li>Prone to potential OutOfMemory errors with very large data sets.</li> </ul> <h3 id="2-method-2-using-entitymanager">2. Method 2: Using <code class="language-plaintext highlighter-rouge">EntityManager</code></h3> <p><strong>Pseudo code</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">patchData</span><span class="o">(</span><span class="nc">String</span> <span class="n">cursor</span><span class="o">){</span>
  <span class="nc">EntityManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="n">entityManagerFactoryBean</span><span class="o">.</span><span class="na">getObject</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
  <span class="nc">EntityTransaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">();</span>
  
  <span class="n">log</span><span class="o">(</span><span class="s">"patch data Start"</span><span class="o">);</span>
  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="c1">// loop to get data one by one</span>
  <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
    <span class="n">num</span><span class="o">++;</span>
    
    <span class="nc">PatchData</span> <span class="n">patchData</span> <span class="o">=</span> <span class="n">patchDataService</span><span class="o">.</span><span class="na">getData</span><span class="o">(</span><span class="n">cursor</span><span class="o">);</span>
    <span class="c1">// if list is null, then exit the loop</span>
    <span class="k">if</span><span class="o">(</span><span class="n">patchData</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">!</span><span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">())</span>			<span class="o">{</span>
				<span class="c1">//get new cursor</span>
      	<span class="n">cursor</span> <span class="o">=</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getCursor</span><span class="o">();</span>
      	
      	<span class="nc">StringBuilder</span> <span class="n">insertsql</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
      	<span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"INSERT INTO DATA (ID, NAME, DATE) VALUES"</span><span class="o">)</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">PatchData</span> <span class="nl">data:</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">()){</span>
          <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" (\'"</span><span class="o">)</span>
          <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
          <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\', "</span><span class="o">)</span> 
            
          <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" \'"</span><span class="o">)</span>
          <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
          <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\', now())"</span><span class="o">)</span>  
           
          <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">()){</span>
            <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">";"</span><span class="o">);</span>
          <span class="o">}</span><span class="k">else</span><span class="o">{</span>
            <span class="n">insertsql</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
          <span class="o">}</span>  
        <span class="o">}</span>  
        
        <span class="n">transaction</span><span class="o">.</span><span class="na">begin</span><span class="o">();</span>
      	<span class="n">manager</span><span class="o">.</span><span class="na">createNativeQuery</span><span class="o">(</span><span class="n">insertsql</span><span class="o">.</span><span class="na">toString</span><span class="o">).</span><span class="na">executeUpdate</span><span class="o">();</span>
        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
      	<span class="n">manager</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
      	<span class="n">log</span><span class="o">(</span><span class="s">"patch data: {} times"</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
    <span class="o">}</span><span class="k">else</span><span class="o">{</span>
      <span class="n">log</span><span class="o">(</span><span class="s">"patch data End"</span><span class="o">);</span>
      <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <table> <thead> <tr> <th>Data Size</th> <th>ExecuteTime(ms)</th> </tr> </thead> <tbody> <tr> <td>100</td> <td>102</td> </tr> <tr> <td>200</td> <td>293</td> </tr> <tr> <td>500</td> <td>488</td> </tr> <tr> <td>1000</td> <td>723</td> </tr> <tr> <td>10000</td> <td>1867</td> </tr> </tbody> </table> <p><strong>Performance Analysis</strong>:</p> <ul> <li>Shows a slight improvement in performance compared to <code class="language-plaintext highlighter-rouge">saveAll</code>.</li> <li>May encounter OutOfMemory issues due to persistent queries in memory.</li> <li>Execution time increases with larger data volumes.</li> </ul> <blockquote> <p><strong>But there may be OOM problems. The OOM is from executeUpdate method, the problem is, after createNativeQuery, the parser keep the query in manager memory, so better avoid use <code class="language-plaintext highlighter-rouge">EntityManager</code></strong></p> </blockquote> <h3 id="3-method-3-jdbc-batch-update-using-preparedstatement">3. Method 3: JDBC Batch Update Using <code class="language-plaintext highlighter-rouge">PreparedStatement</code></h3> <p><strong>Pseudo code</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">patchData</span><span class="o">(</span><span class="nc">String</span> <span class="n">cursor</span><span class="o">){</span>
  <span class="n">connect</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">datasource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
  <span class="n">connection</span><span class="o">.</span><span class="na">setAutoCommit</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
  
  <span class="n">log</span><span class="o">(</span><span class="s">"patch data Start"</span><span class="o">);</span>
  <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="c1">// loop to get data one by one</span>
  <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
    <span class="n">num</span><span class="o">++;</span>
    
    <span class="nc">PatchData</span> <span class="n">patchData</span> <span class="o">=</span> <span class="n">patchDataService</span><span class="o">.</span><span class="na">getData</span><span class="o">(</span><span class="n">cursor</span><span class="o">);</span>
    <span class="c1">// if list is null, then exit the loop</span>
    <span class="k">if</span><span class="o">(</span><span class="n">patchData</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">!</span><span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">())</span>			<span class="o">{</span>
				<span class="c1">//get new cursor</span>
      	<span class="n">cursor</span> <span class="o">=</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getCursor</span><span class="o">();</span>
      	
      	<span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"INSERT INTO DATA (ID, NAME, DATE) VALUES (?, ?, now())"</span>
        
        <span class="k">try</span><span class="o">(</span><span class="nc">PreparedStatement</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">)){</span>
          <span class="kt">int</span> <span class="n">batchSize</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span>
          <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
          <span class="k">for</span><span class="o">(</span><span class="nc">PatchData</span> <span class="nl">data:</span> <span class="n">patchData</span><span class="o">.</span><span class="na">getDataList</span><span class="o">()){</span>
            <span class="n">statement</span><span class="o">.</span><span class="na">setBytes</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
            <span class="n">statement</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
            <span class="n">statement</span><span class="o">.</span><span class="na">addBatch</span><span class="o">();</span>
            
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">batchSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
              <span class="n">statement</span><span class="o">.</span><span class="na">executeBatch</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">i</span><span class="o">++;</span>
          <span class="o">}</span>
          <span class="c1">// execute the remaining queries</span>
          <span class="n">statement</span><span class="o">.</span><span class="na">executeBatch</span><span class="o">();</span>
          <span class="n">connection</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exection</span> <span class="n">ex</span><span class="o">){</span>
          <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"error: {}"</span><span class="o">,</span> <span class="n">ex</span><span class="o">.</span><span class="na">message</span><span class="o">());</span>
          <span class="n">connection</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
          <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
      	<span class="n">log</span><span class="o">(</span><span class="s">"patch data: {} times"</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
    <span class="o">}</span><span class="k">else</span><span class="o">{</span>
      <span class="n">log</span><span class="o">(</span><span class="s">"patch data End"</span><span class="o">);</span>
      
      <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Performance Analysis</strong>:</p> <ul> <li>Significantly improved performance when handling large data volumes.</li> <li>Batch processing effectively reduces communication overhead.</li> <li>Reduces the number of parsing and optimization operations per migration.</li> </ul> <blockquote> <p><strong>PS:</strong> Add <strong>?rewriteBatchedStatements=true</strong> to the end of your JDBC url.</p> <p><strong>Eg : <em>jdbc:mysql://server:3306/db_name?rewriteBatchedStatements=true</em></strong></p> <p><code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code> is a configuration parameter for MySQL database connections that enables rewriting of a similar set of SQL statements, merging them into a larger SQL statement, and then executing it at once. This can reduce the overhead of communication, parsing, optimization and transaction management, and improve the efficiency of operations such as bulk data insertion.</p> </blockquote> <h4 id="explanation-of-rewritebatchedstatements">Explanation of RewriteBatchedStatements:</h4> <p><code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code> is a configuration parameter for MySQL database connections that enables rewriting a set of similar SQL statements, merging them into a larger SQL statement, and then executing it at once. This configuration parameter is recommended for use in JDBC batch updates, and its significance is reflected in several aspects:</p> <ol> <li><strong>Reduced Communication Overhead:</strong> <ul> <li>Every execution of an SQL statement in a database connection involves communication. Using <code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code> helps merge multiple SQL statements, reducing frequent communication overhead and improving data transfer efficiency.</li> </ul> </li> <li><strong>Reduced Parsing and Optimization Counts:</strong> <ul> <li>Databases need to parse and optimize SQL statements before execution. Batch updates reduce the count of parsing and optimization since a group of similar SQL statements is merged into one, requiring the database to perform parsing and optimization only once.</li> </ul> </li> <li><strong>Efficiency in Transaction Management:</strong> <ul> <li>Batch updates often occur within a single transaction. Enabling <code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code> reduces the frequency of transaction starts and commits, enhancing the efficiency of transaction management, especially in scenarios involving large-scale data insertion or updates.</li> </ul> </li> <li><strong>Performance Optimization:</strong> <ul> <li>Batch updates efficiently leverage the database’s bulk processing capabilities. For inserting or updating a significant amount of data, batch updates generally offer better performance compared to the execution of individual SQL statements.</li> </ul> </li> <li><strong>Adaptation to Application Scenarios:</strong> <ul> <li>In some cases, not enabling <code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code> may result in the JDBC driver executing batch updates using multiple separate SQL statements, compromising performance. Enabling this configuration parameter ensures that the JDBC driver optimizes batch updates into a more efficient single SQL statement.</li> </ul> </li> </ol> <p>In practical applications, enabling <code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code> can be an effective performance optimization strategy, particularly in scenarios involving large-scale data operations.</p> <table> <thead> <tr> <th>Data Size</th> <th>ExecuteTime(ms)</th> </tr> </thead> <tbody> <tr> <td>100</td> <td>92</td> </tr> <tr> <td>200</td> <td>113</td> </tr> <tr> <td>500</td> <td>248</td> </tr> <tr> <td>1000</td> <td>602</td> </tr> <tr> <td>10000</td> <td>997</td> </tr> </tbody> </table> <h2 id="optimal-solutions-and-recommendations">Optimal Solutions and Recommendations:</h2> <p>In conclusion, the presented article explored various strategies for handling large-scale data migrations from SQL Server to MySQL using Java APIs. Each method was analyzed based on its performance, efficiency, and suitability for different scenarios. Here are the key takeaways:</p> <h3 id="1-using-saveall-with-jpa">1. <strong>Using <code class="language-plaintext highlighter-rouge">saveAll</code> with JPA:</strong></h3> <ul> <li>Suitable for moderate data sizes.</li> <li>Performance degrades significantly as the dataset grows.</li> <li>Prone to potential OutOfMemory errors with very large datasets. <h3 id="2-using-entitymanager">2. <strong>Using <code class="language-plaintext highlighter-rouge">EntityManager</code>:</strong></h3> </li> <li>Provides a slight improvement in performance compared to <code class="language-plaintext highlighter-rouge">saveAll</code>.</li> <li>May encounter OutOfMemory issues due to the persistence of queries in memory.</li> <li>Execution time increases as the dataset grows. <h3 id="3-jdbc-batch-update-with-preparedstatement">3. <strong>JDBC Batch Update with <code class="language-plaintext highlighter-rouge">PreparedStatement</code>:</strong></h3> </li> <li>Demonstrates significantly improved performance.</li> <li>Utilizes batch processing to efficiently handle large datasets.</li> <li>Minimizes communication overhead, parsing, and optimization counts.</li> <li>Requires careful handling of JDBC resources to avoid potential issues. <h3 id="4-importance-of-rewritebatchedstatements">4. <strong>Importance of <code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code>:</strong></h3> </li> <li>Enables the rewriting of similar SQL statements into a single, efficient statement.</li> <li>Reduces communication overhead, parsing, and optimization counts.</li> <li>Highly recommended for optimizing JDBC batch updates.</li> </ul> <p>Considering the findings, the optimal solution depends on the specific requirements and the size of the dataset:</p> <ul> <li>For small to moderate datasets, <code class="language-plaintext highlighter-rouge">saveAll</code> with JPA or <code class="language-plaintext highlighter-rouge">EntityManager</code> may suffice.</li> <li>For large-scale data migrations, especially when dealing with millions of records, the JDBC Batch Update approach with <code class="language-plaintext highlighter-rouge">PreparedStatement</code> is highly recommended.</li> <li>Enabling <code class="language-plaintext highlighter-rouge">RewriteBatchedStatements</code> further enhances the efficiency of JDBC batch updates, especially in scenarios where performance is critical.</li> </ul> <p>By understanding the strengths and weaknesses of each approach, readers can make informed decisions based on their project requirements and performance considerations.</p>]]></content><author><name></name></author><category term="Work"/><summary type="html"><![CDATA[Optimizing Large-scale Data Migration from SQL Server to MySQL with JDBC]]></summary></entry><entry><title type="html">SORT</title><link href="https://zhengstar94.github.io//blog/2023/SORT/" rel="alternate" type="text/html" title="SORT"/><published>2023-09-30T00:00:00+00:00</published><updated>2023-09-30T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/SORT</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/SORT/"><![CDATA[<h1 id="sort">SORT</h1> <h2 id="approaches-and-complexities-of-3-sorting-algorithms">Approaches and Complexities of 3 Sorting Algorithms</h2> <h3 id="selection-sort">Selection Sort</h3> <p>1.Algorithmic Approach of Selection Sort<br/></p> <p>In selection sort, we choose the smallest element from the unsorted sub-array and append it to the end of the sorted sub-array. We repeat this process until all elements are sorted.<br/></p> <p>2.Time and Space Complexity of Selection Sort<br/></p> <p>Selection sort has a time complexity of O(n^2), which makes it inefficient for sorting large datasets. However, its space complexity is small, only O(1), making it suitable for cases where memory is limited.<br/></p> <h3 id="bubble-sort">Bubble Sort</h3> <p>1.Algorithmic Approach of Bubble Sort<br/></p> <p>Bubble sort compares adjacent elements in the unsorted sub-array and swaps them if the first element is greater than the second element. We repeat this process until all elements are sorted.</p> <p>2.Time and Space Complexity of Bubble Sort<br/></p> <p>Bubble sort also has a time complexity of O(n^2), but if the sequence is already sorted, bubble sort can finish early and have a time complexity of O(n).</p> <h3 id="insertion-sort">Insertion Sort</h3> <p>1.Algorithmic Approach of Insertion Sort<br/></p> <p>Insertion sort divides the unsorted array into sorted and unsorted sub-arrays. We take each element from the unsorted sub-array and insert it into the correct position in the sorted sub-array. We repeat this process until all elements are sorted.</p> <p>2.Time and Space Complexity of Insertion Sort<br/></p> <p>Insertion sort has a time complexity of O(n^2), but if the sequence is already sorted or mostly sorted, the efficiency of insertion sort is higher than that of selection sort or bubble sort. Furthermore, its space complexity is also small, only O(1).</p> <h2 id="practical-operations-of-three-sorting-algorithms">Practical Operations of Three Sorting Algorithms</h2> <blockquote> <p>Take the array [3, 5, 1, 4, 2] as an example.</p> </blockquote> <h3 id="selection-sort-1">Selection Sort</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/09/30/SelectionSort-480.webp 480w,/assets/img/2023/09/30/SelectionSort-800.webp 800w,/assets/img/2023/09/30/SelectionSort-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/09/30/SelectionSort.gif" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ol> <li>In the first round of sorting, find the smallest element 1 and put it in the first position. The array of elements at this time is [1, 5, 3, 4, 2].</li> <li>In the second round of sorting, find the smallest element 2 in the unsorted array and put it at the end of the sorted array. The array of elements at this time is [1, 2, 3, 4, 5].</li> </ol> <h3 id="bubble-sort-1">Bubble Sort</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/09/30/BubbleSort-480.webp 480w,/assets/img/2023/09/30/BubbleSort-800.webp 800w,/assets/img/2023/09/30/BubbleSort-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/09/30/BubbleSort.gif" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ol> <li>First pass: Compare adjacent elements 3 and 5, find that 3 is smaller than 5, so no swap is made. The array now is [3, 5, 1, 4, 2]. Then compare 5 and 1, find that 5 is larger than 1, swap their positions, and the array now is [3, 1, 5, 4, 2]. Next, compare 5 and 4, find that 5 is larger than 4, swap their positions, and the array now is [3, 1, 4, 5, 2]. Finally, compare 5 and 2, find that 5 is larger than 2, swap their positions, and the array now is [3, 1, 4, 2, 5].</li> <li>Second pass: Compare adjacent elements 3 and 1, find that 3 is larger than 1, swap their positions, and the array now is [1, 3, 4, 2, 5]. Then compare 4 and 2, find that 4 is larger than 2, swap their positions, and the array now is [1, 3, 2, 4, 5].</li> <li>Third pass: Compare adjacent elements 1 and 3, find that 1 is smaller than 3, so no swap is made. The array now is [1, 3, 2, 4, 5]. Then compare 3 and 2, find that 3 is larger than 2, swap their positions, and the array now is [1, 2, 3, 4, 5].</li> </ol> <h3 id="insertion-sort-1">Insertion Sort</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/09/30/InsertionSort-480.webp 480w,/assets/img/2023/09/30/InsertionSort-800.webp 800w,/assets/img/2023/09/30/InsertionSort-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/09/30/InsertionSort.gif" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ol> <li> <table> <tbody> <tr> <td>First round of sorting: The sorted part only contains one element, which is 3. The unsorted part includes [5, 1, 4, 2]. [3]</td> <td>5 1 4 2;</td> </tr> </tbody> </table> </li> <li> <table> <tbody> <tr> <td>Second round of sorting: Take the first element 5 from the unsorted part and compare it with the elements in the sorted part. We find that 5 is greater than 3, so we insert it after 3 in the sorted part. Now the sorted part is [3, 5] and the unsorted part is [1, 4, 2]. [3 5]</td> <td>1 4 2;</td> </tr> </tbody> </table> </li> <li> <table> <tbody> <tr> <td>Third round of sorting: Take the first element 1 from the unsorted part and insert it into the sorted part. First, compare it with the last element 5 in the sorted part. We find that 1 is smaller than 5, so we insert it before 5. Then compare it with the first element 3 in the sorted part. We find that 1 is smaller than 3, so we insert it before 3. Now the sorted part is [1, 3, 5] and the unsorted part is [4, 2]. [1 3 5]</td> <td>4 2;</td> </tr> </tbody> </table> </li> <li> <table> <tbody> <tr> <td>Fourth round of sorting: Take the first element 4 from the unsorted part and insert it into the sorted part. First, compare it with the last element 5 in the sorted part. We find that 4 is smaller than 5, so we insert it before 5. Then compare it with the second element 3 in the sorted part. We find that 4 is greater than 3, so we insert it after 3. Now the sorted part is [1, 3, 4, 5] and the unsorted part is [2]. [1 3 4 5]</td> <td>2;</td> </tr> </tbody> </table> </li> <li> <table> <tbody> <tr> <td>Fifth round of sorting: Insert the first element 2 from the unsorted part into the sorted part. Since 2 is smaller than 5, we insert it before 5. At the same time, 2 is also smaller than 3, so we insert it before 3. Finally, 2 is also smaller than 4, so we insert it before 4. Now the sorted part becomes [1, 2, 3, 4, 5] and the unsorted part is empty. [1 2 3 4 5]</td> <td>.</td> </tr> </tbody> </table> </li> </ol>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[SORT]]></summary></entry><entry><title type="html">Levenshtein Distance Algorithm</title><link href="https://zhengstar94.github.io//blog/2023/LevenshteinDistanceAlgorithm/" rel="alternate" type="text/html" title="Levenshtein Distance Algorithm"/><published>2023-09-02T00:00:00+00:00</published><updated>2023-09-02T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/LevenshteinDistanceAlgorithm</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/LevenshteinDistanceAlgorithm/"><![CDATA[<h1 id="levenshtein-distance-algorithm">Levenshtein Distance Algorithm</h1> <p>Levenshtein Distance, also known as edit distance, is used to measure the difference between two strings. By taking the minimum number of steps to convert one string to another, this step number represents the “distance” between the two strings. Specifically, steps can be inserting a new character, deleting an existing character, or replacing a character.</p> <h2 id="algorithm-description">Algorithm description</h2> <p>The core of the edit distance algorithm is the dynamic programming algorithm, with detailed steps as follows:</p> <ol> <li>We use a two-dimensional array <code class="language-plaintext highlighter-rouge">dp[i][j]</code> to represent the shortest edit distance from string s of length i to string t of length j.</li> <li>When <code class="language-plaintext highlighter-rouge">i=0</code>, it means s is an empty string, so it needs to insert j characters to change to t, so <code class="language-plaintext highlighter-rouge">dp[i][j] = j</code>.</li> <li>When <code class="language-plaintext highlighter-rouge">j=0</code>, it means t is an empty string, so it needs to delete i characters to change from s to t, so <code class="language-plaintext highlighter-rouge">dp[i][j] = i</code>.</li> <li>When <code class="language-plaintext highlighter-rouge">i!=0</code> and <code class="language-plaintext highlighter-rouge">j!=0</code>, we need to consider whether <code class="language-plaintext highlighter-rouge">s[i-1]</code> and <code class="language-plaintext highlighter-rouge">t[j-1]</code> are equal, if they are equal, then <code class="language-plaintext highlighter-rouge">dp[i][j] = dp[i-1][j-1]</code>; if they are not equal, then we need to consider the minimum of the following three situations:</li> <li>Replace <code class="language-plaintext highlighter-rouge">s[i-1]</code>, that is, let <code class="language-plaintext highlighter-rouge">s[i-1]</code> become <code class="language-plaintext highlighter-rouge">t[j-1]</code>, so <code class="language-plaintext highlighter-rouge">dp[i][j] = 1 + dp[i-1][j-1]</code>.</li> <li>Delete <code class="language-plaintext highlighter-rouge">s[i-1]</code>, let <code class="language-plaintext highlighter-rouge">s[0...i-2]</code> become <code class="language-plaintext highlighter-rouge">t[0...j-1]</code>, that is, <code class="language-plaintext highlighter-rouge">dp[i][j] = 1 + dp[i-1][j]</code>.</li> <li>Insert <code class="language-plaintext highlighter-rouge">t[j-1]</code> into s, let <code class="language-plaintext highlighter-rouge">s[0...i-1]</code> become <code class="language-plaintext highlighter-rouge">t[0...j-2]</code>, that is, <code class="language-plaintext highlighter-rouge">dp[i][j] = 1 + dp[i][j-1]</code>.</li> </ol> <h2 id="algorithm-implementation-1">Algorithm Implementation 1</h2> <p>Below is a Java implementation of the Levenshtein Distance algorithm:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**【O(nm)time∣O(nm)space】**/</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LevenshteinDistance</span> <span class="o">{</span>
    <span class="c1">// Define the method for calculating the Levenshtein distance between two strings</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">levenshteinDistance</span><span class="o">(</span><span class="nc">String</span> <span class="n">str1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create a matrix dp where dp[i][j] represents the Levenshtein distance between the first i characters of str1 and the first j characters of str2</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

        <span class="c1">// Iterate over the strings</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>

                <span class="c1">// When i is 0, meaning that the first string is empty, the distance is j, which is the length of the second string</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
                <span class="o">}</span> 

                <span class="c1">// When j is 0, meaning that the second string is empty, the distance is i, which is the length of the first string</span>
                <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="o">}</span> 

                <span class="c1">// When the characters are the same, the distance doesn't change</span>
                <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">str1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">str2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
                <span class="o">}</span>

                <span class="c1">// When the characters are different, the distance increases by 1 and it becomes the minimum value of the three neighboring cells plus one</span>
                <span class="k">else</span> <span class="o">{</span>
                    <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]))</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// The last cell of the matrix dp is the Levenshtein distance between the two strings</span>
        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()][</span><span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="detailed-explanation-1">Detailed Explanation 1</h3> <p>First, we construct a two-dimensional array dp where dp[i][j] represents the Levenshtein Distance between the first i characters of string str1 and the first j characters of string str2.</p> <p>Then, we traverse the two-dimensional array through a double loop and calculate the value of dp[i][j]. The value of dp[i][j] may have the following situations:</p> <ol> <li>If str1 or str2 is an empty string (length is 0), then dp[i][j] is the length of the other string because we need at least i or j insert operations to match the two strings.</li> <li>If the i-th character of str1 and the j-th character of str2 are the same, then dp[i][j] is dp[i-1][j-1], because we do not need any additional operations from str1 to str2.</li> <li>If the i-th character of str1 and the j-th character of str2 are different, then dp[i][j] is the minimum value plus 1 before dp[i-1][j-1] (replacement operation), dp[i][j-1] (insert operation) and dp[i-1][j] (delete operation).</li> </ol> <p>Finally, return dp[str1.length][str2.length] as the result, which represents the minimum number of operations required to fully convert string str1 to string str2.</p> <h2 id="algorithm-implementation-2">Algorithm Implementation 2</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**【O(nm)time∣O(min(n,m))space】 **/</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LevenshteinDistance</span> <span class="o">{</span>
    <span class="c1">// Method for calculating Levenshtein Distance</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">levenshteinDistance</span><span class="o">(</span><span class="nc">String</span> <span class="n">str1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str2</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Identify which string is smaller and which is bigger</span>
        <span class="nc">String</span> <span class="n">small</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">?</span> <span class="n">str1</span> <span class="o">:</span> <span class="n">str2</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">big</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">?</span> <span class="n">str1</span> <span class="o">:</span> <span class="n">str2</span><span class="o">;</span>

        <span class="c1">// Create two arrays to keep track of the current and previous edit distances</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">evenEdits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">oddEdits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

        <span class="c1">// Initialize the first row in evenEdits array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">evenEdits</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Variables to reference the current and previous edit distances</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">currentEdits</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">previousEdits</span><span class="o">;</span>

        <span class="c1">// Loop over characters in the big string</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">big</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Determine whether the current row is even or odd</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">currentEdits</span> <span class="o">=</span> <span class="n">oddEdits</span><span class="o">;</span>
                <span class="n">previousEdits</span> <span class="o">=</span> <span class="n">evenEdits</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">currentEdits</span> <span class="o">=</span> <span class="n">evenEdits</span><span class="o">;</span>
                <span class="n">previousEdits</span> <span class="o">=</span> <span class="n">oddEdits</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">// The first cell of the current row is just the row number i</span>
            <span class="n">currentEdits</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>

            <span class="c1">// Loop over the characters in the small string</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// If the characters in the current cell are the same</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">big</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">small</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
                    <span class="c1">// The edit distance is simply the diagonal</span>
                    <span class="n">currentEdits</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">previousEdits</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// The edit distance is the smallest of three options:</span>
                    <span class="c1">// insertion, deletion, and substitution</span>
                    <span class="n">currentEdits</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">previousEdits</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">previousEdits</span><span class="o">[</span><span class="n">j</span><span class="o">],</span> <span class="n">currentEdits</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Return the last cell from the most recent computed row</span>
        <span class="k">return</span> <span class="n">big</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">evenEdits</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()]</span> <span class="o">:</span> <span class="n">oddEdits</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="detailed-explanation-2">Detailed Explanation 2</h3> <p>While the optimized code may seem complex, its underlying concept is still dynamic programming, building the solution step by step to get the final answer, only making adjustments in the details to reduce space consumption.</p> <h4 id="1-determine-smaller-and-larger-strings"><strong>1. Determine Smaller and Larger Strings</strong></h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">small</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">?</span> <span class="n">str1</span> <span class="o">:</span> <span class="n">str2</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">big</span> <span class="o">=</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">?</span> <span class="n">str1</span> <span class="o">:</span> <span class="n">str2</span><span class="o">;</span>
</code></pre></div></div> <h4 id="2-create-two-arrays-evenedits-and-oddedits"><strong>2. Create Two Arrays evenEdits and oddEdits</strong></h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">evenEdits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">oddEdits</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
</code></pre></div></div> <p>evenEdits and oddEdits are used to store the edit distances of even and odd rows respectively. The size is related to the length of the smaller string. As we only care about the edit distance of the previous row and the current row, two arrays are used to save space.</p> <h4 id="3-initialise-evenedits-array"><strong>3. Initialise evenEdits Array</strong></h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">evenEdits</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h4 id="4-start-double-loops"><strong>4. Start Double Loops</strong></h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">big</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p>For each row (each character of big in this case), we calculate the edit distance between it and each character of small. When i is even, we use evenEdits array to store the result; when i is odd, we use oddEdits array.</p> <h4 id="5-calculate-edit-distance"><strong>5. Calculate Edit Distance</strong></h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">big</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="n">small</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">currentEdits</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">previousEdits</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">currentEdits</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">previousEdits</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">],</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">previousEdits</span><span class="o">[</span><span class="n">j</span><span class="o">],</span> <span class="n">currentEdits</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]));</span>
<span class="o">}</span>
</code></pre></div></div> <p>Here we decide whether to keep the value of previousEdits[j - 1] (value of the diagonal) or to set it to 1 + the previous minimum edit distance, based on whether the current character of big and small are equal. The smaller value comes from one of three sources: previousEdits[j - 1] (represents replacement operation), previousEdits[j] (represents delete operation), or currentEdits[j - 1] (represents insert operation).</p> <h4 id="6-return-result"><strong>6. Return Result</strong></h4> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="n">big</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">evenEdits</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()]</span> <span class="o">:</span> <span class="n">oddEdits</span><span class="o">[</span><span class="n">small</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
</code></pre></div></div> <p>Finally, the edit distance is in the last element of the last row. Depending on whether the length of big is odd or even, we decide to return evenEdits[small.length()] or oddEdits[small.length()]).</p> <p>In this way, we optimized the original space complexity from O(m*n) to O(min(m,n)).</p> <h2 id="algorithm-application">Algorithm Application</h2> <p>The Levenshtein Distance is widely used in natural language processing and data processing, including word spelling checking, speech recognition, fuzzy string queries, and bioinformatics (such as DNA string matching).</p> <p>Above is a detailed explanation and implementation of the Levenshtein Distance algorithm. I hope this helps you understand it. Although this algorithm is concise, it is very practical. The ideas of dynamic programming and space optimization techniques in the evolution process are the important reasons for the algorithm’s classic status and are worth pondering.</p>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[Levenshtein Distance Algorithm]]></summary></entry><entry><title type="html">Mastering Coin Change with Dynamic Programming</title><link href="https://zhengstar94.github.io//blog/2023/MasteringCoinChangeWithDynamicProgramming/" rel="alternate" type="text/html" title="Mastering Coin Change with Dynamic Programming"/><published>2023-09-01T00:00:00+00:00</published><updated>2023-09-01T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/MasteringCoinChangeWithDynamicProgramming</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/MasteringCoinChangeWithDynamicProgramming/"><![CDATA[<h1 id="mastering-coin-change-with-dynamic-programming">Mastering Coin Change with Dynamic Programming</h1> <p>This post will demonstrate the application of dynamic programming in solving change making problems. We will mainly discuss two aspects: finding out all combinations of coins that makeup a specific amount of money, and finding the minimum number of coins required to make up a specific amount of money. This technique is ideal for solving complex problems that need to be optimized.</p> <h2 id="i-finding-out-all-combinations-of-coins-to-make-up-a-specific-amount">I. Finding Out All Combinations of Coins to Make Up a Specific Amount</h2> <p>The first problem we present is: suppose we have several different denominations of coins, we want to find out how many different ways we can make up a specific amount of money. This is a common problem in number theory and computer science and is applicable to many daily life scenarios, for instance, when you need to pay a certain amount of money, you would want to know how many ways that money can be paid.</p> <p>We can use the following Java code for such scenarios:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">change</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">coins</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Initialize the dynamic programing array.</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
    
    <span class="c1">// There's only one way to make up the amount of 0, which is using 0 coins.</span>
    <span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> 
    
    <span class="c1">// Iterating over the denomination of coins provided.</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">coin</span> <span class="o">:</span> <span class="n">coins</span><span class="o">)</span> <span class="o">{</span>
        
        <span class="c1">// For each denomination, update the number of ways the amount can be made up.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">coin</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="o">++</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">dp</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="o">[</span><span class="n">x</span> <span class="o">-</span> <span class="n">coin</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="c1">// Return the number of ways to make up the amount using the provided denominations.</span>
    <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">amount</span><span class="o">];</span>
<span class="o">}</span>
</code></pre></div></div> <p>The time complexity of this code is O(N*amount), where N is the number of coin denominations and <code class="language-plaintext highlighter-rouge">amount</code> is the target amount. The space complexity is O(amount), regardless of the number of coin types, only ‘amount’ states are needed to store all the necessary amounts.</p> <h2 id="ii-finding-out-the-minimum-number-of-coins-to-make-up-a-specific-amount">II. Finding Out the Minimum Number of Coins to Make Up a Specific Amount</h2> <p>The second problem is: How to make up a specific amount with the least number of coins. This is also a common problem in daily life. For example, when we go to shop at a supermarket, we want to pay a certain amount of money with the least number of coins. In this case, we need to consider how to choose coins.</p> <p>For this problem, we can use the following Java code:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">coinChange</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">coins</span><span class="o">,</span> <span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Initialize the maximum value.</span>
    <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>  
    
    <span class="c1">// Initialize the dynamic programing array, with all values set to max.</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">amount</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">dp</span><span class="o">,</span> <span class="n">max</span><span class="o">);</span>
    
    <span class="c1">// Base case where the amount 0 can be achieved with no coins.</span>
    <span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="c1">// Iterating over all amounts from 1 to the target amount.</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">amount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        
        <span class="c1">// For each denomination of the coin.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">coins</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
            
            <span class="c1">// If the denomination of the coin is not larger than the current amount.</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">coins</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                
                <span class="c1">// Try to make up the current amount with fewer coins.</span>
                <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">coins</span><span class="o">[</span><span class="n">j</span><span class="o">]]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="c1">// The final value of dp[amount] is the minimum number of coins needed to make up the amount.</span>
    <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">amount</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">amount</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">dp</span><span class="o">[</span><span class="n">amount</span><span class="o">];</span>
<span class="o">}</span>
</code></pre></div></div> <p>The time complexity of this code is also O(N*amount), where N is the number of coin denominations, and ‘amount’ is the payment amount. The space complexity also equals O(amount), regardless of the number of coin types, only ‘amount’ states are needed to store all the necessary amounts.</p> <p>In conclusion, these two problems are classic applications of the dynamic programming method. By constantly trying new possibilities, breaking down the problem into smaller subproblems, and saving the answers to these subproblems, we can avoid repeated computations. This concludes the graceful solution to change making problems via dynamic programming.</p>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[Mastering Coin Change with Dynamic Programming]]></summary></entry><entry><title type="html">Union-Find</title><link href="https://zhengstar94.github.io//blog/2023/Union-Find/" rel="alternate" type="text/html" title="Union-Find"/><published>2023-08-30T00:00:00+00:00</published><updated>2023-08-30T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/Union-Find</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/Union-Find/"><![CDATA[<h1 id="in-depth-understanding-of-implementation-and-optimization-in-union-find">In-Depth Understanding of Implementation and Optimization in Union-Find</h1> <h2 id="introduction">Introduction</h2> <p>Union-Find is a powerful tool for solving problems related to set merging, querying, and connectivity. This article delves into the implementation and optimization of Union-Find, using the example code <code class="language-plaintext highlighter-rouge">UnionFind4</code> to illustrate its principles and applications.</p> <h2 id="1-data-structure-and-initialization">1. Data Structure and Initialization</h2> <h3 id="a-data-structure">a. Data Structure</h3> <p>The <code class="language-plaintext highlighter-rouge">UnionFind4</code> class includes two crucial arrays: <code class="language-plaintext highlighter-rouge">root</code> for storing information about the root nodes of sets, and <code class="language-plaintext highlighter-rouge">rank</code> for recording the rank of each set.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnionFind</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">root</span><span class="o">;</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">rank</span><span class="o">;</span>

    <span class="c1">// Constructor, initializes the Union-Find</span>
    <span class="kd">public</span> <span class="nf">UnionFind</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="n">rank</span> <span class="o">=</span> <span class="n">a</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">root</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="n">rank</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="2-find-operationdetailed-explanation-of-find-operation">2. <code class="language-plaintext highlighter-rouge">find</code> Operation(Detailed Explanation of <code class="language-plaintext highlighter-rouge">find</code> Operation)</h2> <p>In the Union-Find data structure, the purpose of the <code class="language-plaintext highlighter-rouge">find</code> operation is to locate the root node of the set to which an element belongs. Specifically, the <code class="language-plaintext highlighter-rouge">find</code> operation employs the technique of path compression to enhance its search performance.</p> <h3 id="a-path-compression">a. Path Compression</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">])</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span>
<span class="o">}</span>
</code></pre></div></div> <p>In the <code class="language-plaintext highlighter-rouge">find</code> operation, we first check whether the current element <code class="language-plaintext highlighter-rouge">x</code> is the root node of the set, i.e., <code class="language-plaintext highlighter-rouge">x == root[x]</code>. If <code class="language-plaintext highlighter-rouge">x</code> is the root node, we directly return <code class="language-plaintext highlighter-rouge">x</code>. Otherwise, we recursively call <code class="language-plaintext highlighter-rouge">find(root[x])</code> to find the root node. During the recursive return process, we update the parent nodes of all traversed nodes to the root node. This is the core idea of path compression, which shortens the height of the tree by connecting nodes directly to the root, improving subsequent search efficiency.</p> <h2 id="3-union-operationdetailed-explanation-of-union-operation">3. <code class="language-plaintext highlighter-rouge">union</code> Operation(Detailed Explanation of <code class="language-plaintext highlighter-rouge">union</code> Operation)</h2> <p>In the Union-Find data structure, the <code class="language-plaintext highlighter-rouge">union</code> operation is used to merge two sets. Here, the strategy of union by rank is employed to maintain tree balance and improve overall performance.</p> <h3 id="a-union-by-rank">a. Union by Rank</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">union</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">rootX</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">rootY</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">rootX</span> <span class="o">!=</span> <span class="n">rootY</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">rank</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">rank</span><span class="o">[</span><span class="n">rootY</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">root</span><span class="o">[</span><span class="n">rootY</span><span class="o">]</span> <span class="o">=</span> <span class="n">rootX</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rank</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">rank</span><span class="o">[</span><span class="n">rootY</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">root</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">=</span> <span class="n">rootY</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">root</span><span class="o">[</span><span class="n">rootY</span><span class="o">]</span> <span class="o">=</span> <span class="n">rootX</span><span class="o">;</span>
            <span class="n">rank</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div> <p>In the <code class="language-plaintext highlighter-rouge">union</code> operation, we first use the <code class="language-plaintext highlighter-rouge">find</code> operation to find the root nodes <code class="language-plaintext highlighter-rouge">rootX</code> and <code class="language-plaintext highlighter-rouge">rootY</code> of the sets containing elements <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>, respectively. Next, we compare the ranks of the two root nodes.</p> <ul> <li>If <code class="language-plaintext highlighter-rouge">rank[rootX] &gt; rank[rootY]</code>, it indicates that the root node <code class="language-plaintext highlighter-rouge">rootX</code> has a higher rank. Therefore, we update the parent node of <code class="language-plaintext highlighter-rouge">rootY</code> to be <code class="language-plaintext highlighter-rouge">rootX</code>.</li> <li>If <code class="language-plaintext highlighter-rouge">rank[rootX] &lt; rank[rootY]</code>, the opposite occurs, and we update the parent node of <code class="language-plaintext highlighter-rouge">rootX</code> to be <code class="language-plaintext highlighter-rouge">rootY</code>.</li> <li>If the ranks of both root nodes are equal, we choose one as the new root node and increment its rank by 1.</li> </ul> <p>This union by rank strategy effectively maintains the balance of the tree, preventing excessive tree depth and enhancing overall performance.</p> <h2 id="4-complete-example">4. Complete Example</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Complete UnionFind4 class</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnionFind</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">root</span><span class="o">;</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">rank</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UnionFind</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="n">rank</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">root</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="n">rank</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">])</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">root</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">union</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">rootX</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">rootY</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">rootX</span> <span class="o">!=</span> <span class="n">rootY</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">rank</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">rank</span><span class="o">[</span><span class="n">rootY</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">root</span><span class="o">[</span><span class="n">rootY</span><span class="o">]</span> <span class="o">=</span> <span class="n">rootX</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">rank</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">rank</span><span class="o">[</span><span class="n">rootY</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">root</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">=</span> <span class="n">rootY</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">root</span><span class="o">[</span><span class="n">rootY</span><span class="o">]</span> <span class="o">=</span> <span class="n">rootX</span><span class="o">;</span>
                <span class="n">rank</span><span class="o">[</span><span class="n">rootX</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h2 id="5-optimization-strategies">5. Optimization Strategies</h2> <h3 id="a-union-by-rank-1">a. Union by Rank</h3> <p>Union by rank is an optimization strategy that maintains tree balance for improved overall performance.</p> <h3 id="b-path-compression">b. Path Compression</h3> <p>Path compression shortens the height of the tree by directly connecting nodes to the root, further enhancing search performance.</p> <h2 id="6-example-application">6. Example Application</h2> <p>Union-Find finds widespread application in solving problems related to minimum spanning trees, connectivity, and more. Below is a simple example scenario:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example application</span>
<span class="nc">UnionFind</span> <span class="n">uf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UnionFind</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
<span class="n">uf</span><span class="o">.</span><span class="na">union</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="n">uf</span><span class="o">.</span><span class="na">union</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">uf</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">uf</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>  <span class="c1">// Output: true, indicating that 0 and 2 belong to the same set</span>
</code></pre></div></div> <h2 id="7-common-algorithms-using-union-find">7. Common Algorithms Using Union-Find</h2> <p>Union-Find is a versatile data structure used in various algorithms for efficient set merging and connectivity handling. Some common algorithms where Union-Find is commonly employed include:</p> <h3 id="a-kruskals-algorithm-for-minimum-spanning-tree">a. <strong>Kruskal’s Algorithm for Minimum Spanning Tree</strong></h3> <ul> <li>Kruskal’s algorithm uses Union-Find to efficiently determine whether adding an edge to the minimum spanning tree would create a cycle. If the vertices of the edge belong to the same set, adding the edge would create a cycle, and the edge is skipped.</li> </ul> <h3 id="b-connected-components-in-a-graph">b. <strong>Connected Components in a Graph</strong></h3> <ul> <li>Union-Find is widely used to identify connected components in an undirected graph. After processing all edges, the sets created by Union-Find represent the connected components of the graph.</li> </ul> <h3 id="c-dynamic-connectivity-in-percolation-problems">c. <strong>Dynamic Connectivity in Percolation Problems</strong></h3> <ul> <li>In percolation problems, where the goal is to study the connectivity in a system, Union-Find is employed to efficiently determine if the top and bottom of a system are connected.</li> </ul> <h3 id="d-image-segmentation">d. <strong>Image Segmentation</strong></h3> <ul> <li>Union-Find is used in image segmentation to efficiently identify and merge connected components in an image.</li> </ul> <h3 id="e-network-connectivity-problems">e. <strong>Network Connectivity Problems</strong></h3> <ul> <li>Union-Find is applied in various network connectivity problems, such as finding if two nodes in a network are connected or determining the connectivity status of a network.</li> </ul> <h3 id="f-job-scheduling-and-dependency-resolution">f. <strong>Job Scheduling and Dependency Resolution</strong></h3> <ul> <li>In scenarios where jobs have dependencies and need to be scheduled, Union-Find can be used to efficiently determine the dependencies and order of execution.</li> </ul> <p>These examples showcase the versatility of Union-Find in solving a diverse range of problems across different domains. Its ability to handle connectivity efficiently makes it a valuable tool in algorithm design.</p> <h2 id="conclusion">Conclusion</h2> <p>This article provides a detailed exploration of the implementation and optimization of Union-Find, using the <code class="language-plaintext highlighter-rouge">UnionFind4</code> example code to elucidate key concepts. Union-Find performs admirably in solving various set merging and querying problems. Through optimization strategies like union by rank and path compression, it achieves better real-world performance.</p>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[In-Depth Understanding of Implementation and Optimization in Union-Find]]></summary></entry><entry><title type="html">Prefix Sum</title><link href="https://zhengstar94.github.io//blog/2023/PrefixSum/" rel="alternate" type="text/html" title="Prefix Sum"/><published>2023-08-26T00:00:00+00:00</published><updated>2023-08-26T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/PrefixSum</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/PrefixSum/"><![CDATA[<h1 id="prefix-sum">Prefix Sum</h1> <h2 id="conception">Conception</h2> <blockquote> <p>Prefix sum is a technique commonly used in mathematics, algorithms, and other fields. It’s used to quickly calculate the prefix sum of an array’s elements, which is the sum of the elements from the first element to the current element. Prefix sum is a pre-processing that can enhance query efficiency and reduce time complexity during array processing.</p> </blockquote> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/26/1-480.webp 480w,/assets/img/2023/08/26/1-800.webp 800w,/assets/img/2023/08/26/1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/26/1.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>So how do we get the sum of the ranges from nums [2] to nums [4]?</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sums</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">==</span> <span class="n">sums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
<span class="n">sums</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">==</span> <span class="n">sums</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
<span class="n">sums</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">==</span> <span class="n">sums</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>

<span class="n">sums</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">==</span> <span class="n">sums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>
<span class="c1">// nums [2] to nums [4]</span>
<span class="n">sums</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">-</span> <span class="n">sums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>
</code></pre></div></div> <h2 id="question">Question</h2> <ul> <li>You’re given a list of integers nums Write a function that returns a boolean representing whether there exists a zero-sum subarray of nums.</li> <li>A zero-sum subarray is any subarray where all of the values add up to zero. A subarray is any contiguous section of the array. For the purposes of this problem, a subarray can be as small as one element and as long as the original array.</li> </ul> <h2 id="solve">Solve</h2> <p>You can tell by the code.<br/> if we can find</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">-</span> <span class="n">sums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">,</span> <span class="n">then</span> <span class="n">sums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="n">sums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</code></pre></div></div> <p>then return ‘true’</p> <p>so we can tell the nums=[-5,-5,2,3,5,7],sums=[-5,-10,-8,-5,0,7]</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sums</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">sums</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>  <span class="nl">then:</span>
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nums</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="n">nums</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</code></pre></div></div> <p>So we can get the second formula.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// i &lt; j</span>
<span class="k">if</span> <span class="n">sums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">sums</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
<span class="n">then</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">,</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="n">sum</span> <span class="n">is</span> <span class="mi">0</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[Prefix Sum]]></summary></entry><entry><title type="html">Morris</title><link href="https://zhengstar94.github.io//blog/2023/Morris/" rel="alternate" type="text/html" title="Morris"/><published>2023-08-20T00:00:00+00:00</published><updated>2023-08-20T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/Morris</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/Morris/"><![CDATA[<h1 id="morris-traversal-of-binary-tree">Morris traversal of binary Tree</h1> <h2 id="conception">Conception</h2> <ol> <li>Nodes without left subtrees will only arrive once, and nodes with left subtrees will arrive twice.</li> <li>The use of the tree’s leaf nodes around the child is empty (a large number of free pointers of the tree), so as to achieve a rapid reduction in space overhead.</li> </ol> <h3 id="explain">Explain</h3> <blockquote> <p>The node uses the right pointer direction of the rightmost node on the left tree to mark whether it is the first or second time.<br/></p> <ol> <li>If this is the first time you mark yourself, move to the left and use the same strategy to execute the subtree (left tree).</li> <li>If it is the second time to mark yourself, after the recovery is complete, go to the right subtree to repeat the behavior (1,2).</li> </ol> </blockquote> <ol> <li>The node has no left tree and the node only arrives once. <ul> <li>If the rightmost node of the left subtree of a node points to empty, the node must be coming for the first time.</li> </ul> </li> <li>The node has a left tree and the node arrives twice. <ul> <li>If the rightmost node of the left subtree of the current node points to itself, the node must be coming for the second time.</li> </ul> </li> </ol> <h2 id="details">Details</h2> <p>Suppose the current node cur, and the cur comes to the header node at the beginning.</p> <ol> <li>If cur does not have a left child, cur moves to the right, <code class="language-plaintext highlighter-rouge">cur = cur.right</code>.</li> <li>If cur has a left child, find the rightmost node morrisRight of the left subtree. <ol> <li>If the right pointer of morrisRight points to null, let it point to cur, and then cur moves to the left, <code class="language-plaintext highlighter-rouge">cur = cur.left</code>.</li> <li>If the right pointer of morrisRight points to cur, let it point to null, and then cur moves to the right, <code class="language-plaintext highlighter-rouge">cur = cur.right</code>.</li> </ol> </li> <li>Cur is null and traversing stops.</li> </ol> <h2 id="logic">Logic</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/20/1-480.webp 480w,/assets/img/2023/08/20/1-800.webp 800w,/assets/img/2023/08/20/1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/20/1.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>Recursive order: ①②②②①③③③① [System stack]</strong></p> <p>Pre-order (the result of the first occurrence): ①②③ <br/> Middle order (the result of the second occurrence): ②①③ <br/> Post-order (the result of the third occurrence): ②③① <br/></p> <h3 id="morris-traversal-highly-simulates-recursive-behavior">Morris traversal highly simulates recursive behavior</h3> <ol> <li>There is no left subtree node and can only be reached once.</li> <li>There are left subtree nodes, which can reach 2 times.</li> <li>The node cannot be reached 3 times. <blockquote> <p>Morris uses <code class="language-plaintext highlighter-rouge">a node to point the right pointer to the left tree</code> to solve this problem.</p> </blockquote> </li> </ol> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/20/2-480.webp 480w,/assets/img/2023/08/20/2-800.webp 800w,/assets/img/2023/08/20/2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/20/2.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>a, b, c, d, e, f, <code class="language-plaintext highlighter-rouge">d</code>, <code class="language-plaintext highlighter-rouge">a</code>, g, h, i, <code class="language-plaintext highlighter-rouge">h</code>, k, <code class="language-plaintext highlighter-rouge">g</code></strong></p> <h2 id="code-content">Code Content</h2> <blockquote> <p>Suppose the current node cur, and the cur comes to the header node at the beginning.</p> <ol> <li>If cur does not have a left child, cur moves to the right, <code class="language-plaintext highlighter-rouge">cur = cur.right</code>.</li> <li>If cur has a left child, find the rightmost node morrisRight of the left subtree. <blockquote> <ol> <li>If the right pointer of morrisRight points to null, let it point to cur, and then cur moves to the left, <code class="language-plaintext highlighter-rouge">cur = cur.left</code>.</li> </ol> </blockquote> <ol> <li>If the right pointer of morrisRight points to cur, let it point to null, and then cur moves to the right, <code class="language-plaintext highlighter-rouge">cur = cur.right</code>.</li> </ol> </li> <li>Cur is null and traversing stops。</li> </ol> </blockquote> <h3 id="general-code">General Code</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @author zhengstars
 * @date 2023/08/20
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Morris</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">left</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">right</span><span class="o">;</span>
        <span class="nc">Node</span><span class="o">()</span> <span class="o">{}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span> <span class="o">}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">morris</span><span class="o">(</span><span class="nc">Node</span> <span class="n">head</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">morrisRight</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="c1">// morrisRight is cur's left child</span>
            <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">){</span>
                    <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">//After while execution, morrisRight comes to the position of the rightmost child in the left subtree of cur.</span>

                <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                    <span class="c1">// Come to cur for the first time</span>
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                    <span class="c1">// Come to cur for the second time, morrisRight.right == cur</span>
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h4 id="example"><strong>Example</strong></h4> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/20/3-480.webp 480w,/assets/img/2023/08/20/3-800.webp 800w,/assets/img/2023/08/20/3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/20/3.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <p>Morris traversal: <strong>①②④②⑤①③⑥③⑦</strong></p> <ul> <li>Pre-order (the result of the first occurrence): ①②④⑤③⑥⑦ <br/></li> <li>Middle order (the result of the second occurrence): ④②⑤①⑥③⑦ <br/></li> </ul> <h3 id="pre-order-traversal">Pre-order traversal</h3> <blockquote> <p>第一次出现的打印<br/></p> <ol> <li>There is no left node printing, there is a left node description to print 2 times</li> <li>Come to cur to print for the first time</li> </ol> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @author zhengstars
 * @date 2023/08/20
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Morris</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">left</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">right</span><span class="o">;</span>
        <span class="nc">Node</span><span class="o">()</span> <span class="o">{}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span> <span class="o">}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">morrisPre</span><span class="o">(</span><span class="nc">Node</span> <span class="n">head</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">morrisRight</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="c1">// morrisRight is cur's left child</span>
            <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">){</span>
                    <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">//After while execution, morrisRight comes to the position of the rightmost child in the left subtree of cur.</span>

                <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span> <span class="c1">// Come to cur for the first time</span>
                    <span class="c1">// --- first time</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
                    
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                    <span class="c1">// Come to cur for the second time, morrisRight.right == cur</span>
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
               <span class="c1">// --- Arrive at yourself for the first time</span>
               <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">value</span><span class="o">);</span> 
            <span class="o">}</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="in-order-traversal">In-order traversal</h3> <blockquote> <ol> <li>The direct output of the node that can only reach itself once</li> <li>Nodes that can reach themselves twice only print the second time.</li> </ol> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @author zhengstars
 * @date 2023/08/20
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Morris</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">left</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">right</span><span class="o">;</span>
        <span class="nc">Node</span><span class="o">()</span> <span class="o">{}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span> <span class="o">}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">morrisIn</span><span class="o">(</span><span class="nc">Node</span> <span class="n">head</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">morrisRight</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="c1">// morrisRight is cur's left child</span>
            <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">){</span>
                    <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">//After while execution, morrisRight comes to the position of the rightmost child in the left subtree of cur.</span>

                <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span> <span class="c1">// Come to cur for the first time</span>
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
                    <span class="k">continue</span><span class="o">;</span> <span class="c1">//--- The first time you enter continue directly, while starts execution again.</span>
                <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                    <span class="c1">// Come to cur for the second time, morrisRight.right == cur</span>
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                    <span class="c1">//--- The second time come in and print directly.</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
           <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>

           <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="post-order-traversal">Post-order traversal</h3> <blockquote> <p>Post-order traversal is the third visit before printing.</p> <ol> <li>Morris traversal there is no third visit.</li> <li>The Post-order can only care about the node that goes back to itself twice. <blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 1. Skip the node that you can reach once.
</code></pre></div> </div> </blockquote> <ol> <li>For the node that you can reach twice <blockquote> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    1. When the second traversal arrives, `the right boundary of the current left subtree is printed in reverse order`.
</code></pre></div> </div> </blockquote> <ol> <li>After traversing, <code class="language-plaintext highlighter-rouge">you finally need to print the right boundary of the whole tree in reverse order</code>.</li> </ol> </li> </ol> </li> </ol> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @author zhengstars
 * @date 2023/08/20
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Morris</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">val</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">left</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">right</span><span class="o">;</span>
        <span class="nc">Node</span><span class="o">()</span> <span class="o">{}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span> <span class="o">}</span>
        <span class="nc">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">morrisIn</span><span class="o">(</span><span class="nc">Node</span> <span class="n">head</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">morrisRight</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="c1">// morrisRight is cur's left child</span>
            <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">){</span>
                    <span class="n">morrisRight</span> <span class="o">=</span> <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">//After while execution, morrisRight comes to the position of the rightmost child in the left subtree of cur.</span>

                <span class="k">if</span><span class="o">(</span><span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span> <span class="c1">// Come to cur for the first time</span>
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
                    <span class="k">continue</span><span class="o">;</span> 
                <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                    <span class="c1">// Come to cur for the second time, morrisRight.right == cur</span>
                    <span class="n">morrisRight</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                   
                    <span class="c1">// --- Print the right boundary of the left subtree of cur in reverse order</span>
                    <span class="n">reversePrintEdge</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>

           <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="o">}</span>

       <span class="c1">// --- Finally, print the right boundary of the whole tree in reverse order.</span>
       <span class="n">reversePrintEdge</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
    <span class="o">}</span>

   <span class="cm">/**
    * The tree headed by head prints its right boundary in reverse order
    * @param head
    */</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">reversePrintEdge</span><span class="o">(</span><span class="nc">Node</span> <span class="n">head</span><span class="o">){</span>
        <span class="c1">// Get the tail pointer, the rightmost node</span>
        <span class="nc">Node</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">reverse</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>
        <span class="nc">Node</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
           <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
           <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="c1">// Reverse again at this time</span>
        <span class="n">reverse</span><span class="o">(</span><span class="n">tail</span><span class="o">);</span>
    <span class="o">}</span>

   <span class="cm">/**
    * Reverse change of pointer direction similar to single linked list
    * @param from
    * @return
    */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">node</span> <span class="nf">reverse</span><span class="o">(</span><span class="nc">Node</span> <span class="n">from</span><span class="o">){</span>
        <span class="nc">Node</span> <span class="n">pre</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        
        <span class="k">while</span><span class="o">(</span><span class="n">from</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span> <span class="c1">// At this time, from is not equal to null because the last one becomes null after being converted to next.</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">from</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
            <span class="n">from</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>
            
            <span class="n">pre</span> <span class="o">=</span> <span class="n">from</span><span class="o">;</span>
            <span class="n">from</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">pre</span><span class="o">;</span>
    <span class="o">}</span>
    
<span class="o">}</span>
</code></pre></div></div> <h4 id="example-1"><strong>Example</strong></h4> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/20/4-480.webp 480w,/assets/img/2023/08/20/4-800.webp 800w,/assets/img/2023/08/20/4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/20/4.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><br/></p> <p>Post-order: ⑧⑨④⑤②⑥⑩⑪⑦③①</p>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[Morris traversal of binary Tree]]></summary></entry><entry><title type="html">LRU LinkedList</title><link href="https://zhengstar94.github.io//blog/2023/LRU-LinkedList/" rel="alternate" type="text/html" title="LRU LinkedList"/><published>2023-08-19T00:00:00+00:00</published><updated>2023-08-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/LRU-LinkedList</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/LRU-LinkedList/"><![CDATA[<h1 id="lru-linkedlist">LRU LinkedList</h1> <h2 id="concept">Concept</h2> <p>Implementation of the LRU (least recently used) cache to manage a set of key-value pairs, in which up to maxSize key-value pairs are saved.</p> <h2 id="steps">Steps</h2> <ul> <li> <p>ListNode Class：</p> <ul> <li>This is an inner class that represents nodes in a two-way linked list. Each node contains a key (key), a value (value), a precursor node (prev) and a successor node (next).</li> </ul> </li> <li> <p>LRUCache Class：</p> <p>This is the actual cache class that is used to manage the LRU cache.</p> <ul> <li><code class="language-plaintext highlighter-rouge">cache</code>：This is a mapping where the key is a string and the value is the corresponding node, which is used to quickly find the node in the cache.</li> <li><code class="language-plaintext highlighter-rouge">maxSize</code>：Specifies the maximum capacity of the cache.</li> <li><code class="language-plaintext highlighter-rouge">head</code> &amp; <code class="language-plaintext highlighter-rouge">tail</code>：The Sentinel node serves as the head and tail of the linked list, respectively.</li> </ul> </li> <li> <p>Constructor function LRUCache(int maxSize)：</p> <ul> <li>Initialize the LRU cache. Create an empty <code class="language-plaintext highlighter-rouge">cache</code> map and set the connection between the head and tail sentinel nodes.</li> </ul> </li> <li> <p>insertKeyValuePair function：</p> <ul> <li>If the key already exists in the cache, update the value of the corresponding node and move the node to the header of the linked list (indicating that it has been recently used). If the key does not exist, check that the cache is full, if so, remove the tail node (longest unused), and then insert a new node into the header of the linked list. In any case, the cache mapping needs to be updated.</li> </ul> </li> <li> <p>getValueFromKey function：</p> <ul> <li>If the key exists in the cache, the value of the corresponding node is returned and the node is moved to the header of the linked list. If the key does not exist, return-1 (or you can throw an exception to indicate that it is not found).</li> </ul> </li> <li> <p>getMostRecentKey function：</p> <ul> <li>Returns the most recently used key (that is, the key of the header node of the linked list), or an empty string if the cache is empty (or throws an exception to indicate that the cache is empty).</li> </ul> </li> <li> <p>addToHead function：</p> <ul> <li>Insert a node at the head of the linked list.</li> </ul> </li> <li> <p>removeNode function：</p> <ul> <li>Removes the specified node from the linked list.</li> </ul> </li> <li> <p>moveToHead function：</p> <ul> <li>Move a node to the head of the linked list.</li> </ul> </li> <li> <p>removeTail function：</p> <ul> <li>Remove the tail node of the linked list and return to it.</li> </ul> </li> </ul> <h2 id="detailed-method-interpretation">Detailed method interpretation</h2> <h3 id="addtohead">addToHead</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">addToHead</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>     <span class="c1">// Point the next node of the new node to the next node of the current header node</span>
    <span class="n">node</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>          <span class="c1">// Point the previous node of the new node to the header node</span>
    <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>     <span class="c1">// Point the previous node of the current header node to the new node</span>
    <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>          <span class="c1">// Point the next node of the head node to the new node to complete the insert operation</span>
<span class="o">}</span>
</code></pre></div></div> <p>1.<strong>Initialization LinkedList</strong><br/></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/22-480.webp 480w,/assets/img/2023/08/22-800.webp 800w,/assets/img/2023/08/22-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/22.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>2.<strong>Add new node4 to head, The node4 node points to head.next and the node4.prev points to head, <code class="language-plaintext highlighter-rouge">node.next = head.next</code>, <code class="language-plaintext highlighter-rouge">node.prev = head</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/23-480.webp 480w,/assets/img/2023/08/23-800.webp 800w,/assets/img/2023/08/23-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/23.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>3.<strong>Head.next.prev points to the node4 node, <code class="language-plaintext highlighter-rouge">head.next.prev = node</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/24-480.webp 480w,/assets/img/2023/08/24-800.webp 800w,/assets/img/2023/08/24-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/24.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>4.<strong>Head next points to the node4 node, <code class="language-plaintext highlighter-rouge">head.next = node</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/25-480.webp 480w,/assets/img/2023/08/25-800.webp 800w,/assets/img/2023/08/25-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/25.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="removenode">removeNode</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">removeNode</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">node</span><span class="o">.</span><span class="na">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>     <span class="c1">// Point the next node of the previous node of the current node to the next node of the current node</span>
        <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>     <span class="c1">// Point the previous node of the next node of the current node to the previous node of the current node</span>
        <span class="o">}</span>
</code></pre></div></div> <p>1.<strong>Initialization LinkedList</strong><br/></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/26-480.webp 480w,/assets/img/2023/08/26-800.webp 800w,/assets/img/2023/08/26-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/26.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>2.<strong>Remove the node2 node, the next node of the previous node of node2, and point to the next node of node2, <code class="language-plaintext highlighter-rouge">node.prev.next = node.next</code></strong><br/></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/27-480.webp 480w,/assets/img/2023/08/27-800.webp 800w,/assets/img/2023/08/27-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/27.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>3.<strong>The prev node of the next node of node2 points to the prev node of node2, <code class="language-plaintext highlighter-rouge">node.next.prev = node.prev</code></strong><br/></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/28-480.webp 480w,/assets/img/2023/08/28-800.webp 800w,/assets/img/2023/08/28-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/28.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="code">Code</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">LinkedLists</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2023/06/25
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LRUCache</span> <span class="o">{</span>
    <span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">key</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
        <span class="nc">ListNode</span> <span class="n">prev</span><span class="o">;</span>
        <span class="nc">ListNode</span> <span class="n">next</span><span class="o">;</span>

        <span class="nc">ListNode</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">ListNode</span><span class="o">&gt;</span> <span class="n">cache</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ListNode</span> <span class="n">head</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ListNode</span> <span class="n">tail</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">LRUCache</span><span class="o">(</span><span class="kt">int</span> <span class="n">maxSize</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">maxSize</span> <span class="o">=</span> <span class="n">maxSize</span><span class="o">;</span>
        <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ListNode</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="n">tail</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ListNode</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">tail</span><span class="o">;</span>
        <span class="n">tail</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertKeyValuePair</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">cache</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">ListNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="n">node</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
            <span class="n">moveToHead</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cache</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="n">maxSize</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">ListNode</span> <span class="n">removedNode</span> <span class="o">=</span> <span class="n">removeTail</span><span class="o">();</span>
                <span class="n">cache</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">removedNode</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">ListNode</span> <span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ListNode</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">newNode</span><span class="o">);</span>
            <span class="n">addToHead</span><span class="o">(</span><span class="n">newNode</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getValueFromKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">cache</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">key</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">ListNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="n">moveToHead</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// or throw an exception to indicate key not found</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getMostRecentKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="n">tail</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">key</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="s">""</span><span class="o">;</span> <span class="c1">// or throw an exception to indicate cache is empty</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">addToHead</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">node</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">node</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
        <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">removeNode</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">node</span><span class="o">.</span><span class="na">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">moveToHead</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">removeNode</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
        <span class="n">addToHead</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">ListNode</span> <span class="nf">removeTail</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ListNode</span> <span class="n">removedNode</span> <span class="o">=</span> <span class="n">tail</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>
        <span class="n">removeNode</span><span class="o">(</span><span class="n">removedNode</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">removedNode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">LRUCache</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LRUCache</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">insertKeyValuePair</span><span class="o">(</span><span class="s">"b"</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="n">cache</span><span class="o">.</span><span class="na">insertKeyValuePair</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
        <span class="n">cache</span><span class="o">.</span><span class="na">insertKeyValuePair</span><span class="o">(</span><span class="s">"c"</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">getMostRecentKey</span><span class="o">();</span> <span class="c1">// Output: "c"</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">getValueFromKey</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span> <span class="c1">// Output: 1</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">getMostRecentKey</span><span class="o">();</span> <span class="c1">// Output: "a"</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">insertKeyValuePair</span><span class="o">(</span><span class="s">"d"</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">getValueFromKey</span><span class="o">(</span><span class="s">"b"</span><span class="o">);</span> <span class="c1">// Output: -1</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">insertKeyValuePair</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

        <span class="n">cache</span><span class="o">.</span><span class="na">getValueFromKey</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span> <span class="c1">// Output: 5</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[LRU LinkedList]]></summary></entry><entry><title type="html">Reverse LinkedList</title><link href="https://zhengstar94.github.io//blog/2023/ReverseLinkedList/" rel="alternate" type="text/html" title="Reverse LinkedList"/><published>2023-08-19T00:00:00+00:00</published><updated>2023-08-19T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2023/ReverseLinkedList</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2023/ReverseLinkedList/"><![CDATA[<h1 id="reverse-linked-list">Reverse Linked List</h1> <h2 id="solution-traverse-the-linked-list-pointing-the-next-of-each-node-to-the-previous-node">Solution (Traverse the linked list, pointing the next of each node to the previous node)</h2> <ol> <li>Save the next of the current node, <code class="language-plaintext highlighter-rouge">next = curr.next</code></li> <li>Point the next of the current node to the previous node, <code class="language-plaintext highlighter-rouge">curr.next = prev</code></li> <li>Move the forward pointer back to <code class="language-plaintext highlighter-rouge">prev = curr</code></li> <li>Move the current pointer back to <code class="language-plaintext highlighter-rouge">curr = next</code></li> </ol> <h2 id="step">Step</h2> <p>1.<strong>Initial list and pre node</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/1-480.webp 480w,/assets/img/2023/08/1-800.webp 800w,/assets/img/2023/08/1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/1.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>2.<strong>Initial list and next node, <code class="language-plaintext highlighter-rouge">next = curr.next</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/2-480.webp 480w,/assets/img/2023/08/2-800.webp 800w,/assets/img/2023/08/2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/2.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>3.<strong>The current.next points to the pre node, <code class="language-plaintext highlighter-rouge">curr.next = prev</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/3-480.webp 480w,/assets/img/2023/08/3-800.webp 800w,/assets/img/2023/08/3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/3.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>4.<strong>The pre node points to the current node, <code class="language-plaintext highlighter-rouge">prev = curr</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/4-480.webp 480w,/assets/img/2023/08/4-800.webp 800w,/assets/img/2023/08/4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/4.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>5.<strong>The current node points to the next node, <code class="language-plaintext highlighter-rouge">curr = nex</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/5-480.webp 480w,/assets/img/2023/08/5-800.webp 800w,/assets/img/2023/08/5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/5.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>6.<strong>The next node moves to the current.next, <code class="language-plaintext highlighter-rouge">next = curr.next</code></strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/6-480.webp 480w,/assets/img/2023/08/6-800.webp 800w,/assets/img/2023/08/6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/6.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>7.<strong>Loop traversal</strong></p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/7-480.webp 480w,/assets/img/2023/08/7-800.webp 800w,/assets/img/2023/08/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/7.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/8-480.webp 480w,/assets/img/2023/08/8-800.webp 800w,/assets/img/2023/08/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/8.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/9-480.webp 480w,/assets/img/2023/08/9-800.webp 800w,/assets/img/2023/08/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/9.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/10-480.webp 480w,/assets/img/2023/08/10-800.webp 800w,/assets/img/2023/08/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/10.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/11-480.webp 480w,/assets/img/2023/08/11-800.webp 800w,/assets/img/2023/08/11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/11.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/12-480.webp 480w,/assets/img/2023/08/12-800.webp 800w,/assets/img/2023/08/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/12.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/13-480.webp 480w,/assets/img/2023/08/13-800.webp 800w,/assets/img/2023/08/13-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/13.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/14-480.webp 480w,/assets/img/2023/08/14-800.webp 800w,/assets/img/2023/08/14-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/14.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/15-480.webp 480w,/assets/img/2023/08/15-800.webp 800w,/assets/img/2023/08/15-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/15.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/16-480.webp 480w,/assets/img/2023/08/16-800.webp 800w,/assets/img/2023/08/16-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/16.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/17-480.webp 480w,/assets/img/2023/08/17-800.webp 800w,/assets/img/2023/08/17-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/17.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/18-480.webp 480w,/assets/img/2023/08/18-800.webp 800w,/assets/img/2023/08/18-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/18.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/19-480.webp 480w,/assets/img/2023/08/19-800.webp 800w,/assets/img/2023/08/19-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/19.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/20-480.webp 480w,/assets/img/2023/08/20-800.webp 800w,/assets/img/2023/08/20-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/20.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2023/08/21-480.webp 480w,/assets/img/2023/08/21-800.webp 800w,/assets/img/2023/08/21-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2023/08/21.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="code">Code</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">LinkedLists</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengstars
 * @date 2023/08/19
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReverseLinkedList</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
        <span class="nc">ListNode</span> <span class="n">next</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ListNode</span> <span class="nf">reverseLinkedList</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ListNode</span> <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="nc">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>

        <span class="nc">ListNode</span> <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
            <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>

        <span class="o">}</span>
        <span class="k">return</span> <span class="n">prev</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Data Structure"/><summary type="html"><![CDATA[Reverse Linked List]]></summary></entry><entry><title type="html">Designing a Tiny URL</title><link href="https://zhengstar94.github.io//blog/2022/TypeURLInYourBrowser/" rel="alternate" type="text/html" title="Designing a Tiny URL"/><published>2022-11-02T00:00:00+00:00</published><updated>2022-11-02T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2022/TypeURLInYourBrowser</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2022/TypeURLInYourBrowser/"><![CDATA[<h1 id="designing-a-tiny-url">Designing a Tiny URL</h1> <h2 id="1-what-is-tiny-url">1. What is Tiny URL?</h2> <blockquote> <p>Shortened URL shuld be random and unique. It should be a combination of characters (A-Z, a-z) and numbers (0-9).</p> </blockquote> <p>TinyURL is a web based service which - &lt;/br&gt;</p> <ol> <li>Takes a long URL and creates a shorter URL</li> <li>Takes short URL and redirects the user to the original Long URL</li> </ol> <h2 id="2-why-do-we-need-url-shortening">2. Why do we need URL shortening?</h2> <blockquote> <p>Short links save a lot of space when displayed, printed, messaged, or tweeted. Additionally, users are less likely to mistype shorter URLs.</p> </blockquote> <p>For example, if we shorten this page through TinyURL:</p> <ul> <li>https://zhengstar94.github.io/#/md/AlgorithmReview/Array/TwoNumberSum</li> </ul> <p>we would get:</p> <ul> <li>http://tinyurl.com/kmh7aqd</li> </ul> <ol> <li>The shortened URL is nearly one-third the size of the actual URL.</li> <li>URL shortening is used for optimizing links across devices, tracking individual links to analyze audience and campaign performance, and hiding affiliated original URLs.</li> </ol> <h2 id="3-requirements-for-url-shortening-design">3. Requirements for URL Shortening Design</h2> <h3 id="31-functional-requirements">3.1 Functional Requirements:</h3> <ol> <li>Short URL generation: Our service should be able to generate a unqiue shorter to the original URL.</li> <li>Redirection: Given a short link, our system should be able to redirect the user to the original URL.</li> <li>Custom short links: Users should be able to generate custom short links for their URLs using our system.</li> <li>Deletion: Users should be able to delete a short link generated by our system, given the rights.</li> <li>Update: Users should be able to update the long URL associated with the short link, given the proper rights.</li> <li>Expiry time: There must be a default expiration time for the short links, but users should be able to set the expiration time based on their requirements.</li> </ol> <blockquote> <p>Question<br/> As a design choice, we don’t reuse the expired short URLs. Since we don’t reuse them, why do we need to delete them from our system?</p> </blockquote> <blockquote> <p>Answer<br/> So far, we’ve kept the default expiration time to five years. If we relax that limitation and start saving the records forever, our datastore’s search index will grow without bound, and querying time from it can add noticeable latency.</p> </blockquote> <h3 id="32-non-functional-requirements">3.2 Non-Functional Requirements:</h3> <ol> <li>Availability: Our system should be highly available, because even a fraction of the second downtime would result in URL redirection failures. Since our system’s domain is in URLs, we don’t have the leverage of downtime, and our design must have fault-tolerance conditions instilled in it.</li> <li>Scalability: Our system should be horizontally scalable with increasing demand.</li> <li>Readability: The short links generated by our system should be easily readable, distinguishable, and typeable.</li> <li>Latency: The system should perform at low latency to provide the user with a smooth experience.</li> <li>Unpredictability: From a security standpoint, the short links generated by our system should be highly unpredictable. This ensures that the next-in-line short URL is not serially produced, eliminating the possibility of someone guessing all the short URLs that our system has ever produced or will produce.</li> </ol> <blockquote> <p>Question<br/> Why is producing unpredictable short URLs mandatory for our system?</p> </blockquote> <blockquote> <p>Answer<br/></p> <ol> <li>Attackers can have access to the system-level information of the short URLs’ total count, giving them a defined range to plan out their attacks. This type of internal information shouldn’t be available outside the system.</li> <li>Our users might have used our service for generating short URLs for secret URLs. With the information above, the attackers can try to list all the short URLs, access them and gain insights about the associated long URLs, risking the secrecy of the private URLs. It will compromise the privacy of a user’s data, making our system less secure.</li> </ol> </blockquote> <blockquote> <p>Hence, randomly assigning unique IDs deprives the attackers of such system insights, which are needed for enumerating and compromising the user’s private data.</p> </blockquote> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2022/11/1-480.webp 480w,/assets/img/2022/11/1-800.webp 800w,/assets/img/2022/11/1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2022/11/1.jpeg" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="33-resource-estimation">3.3 Resource estimation</h3> <h4 id="assumptions">Assumptions</h4> <ul> <li>We assume that the shortening:redirection request ratio is 1:100.</li> <li>There are 200 million new URL shortening requests per month.</li> <li>A URL shortening entry requires 500 Bytes of database storage.</li> <li>Each entry will have a maximum of five years of expiry time, unless explicitly deleted.</li> <li>There are 100 million Daily Active Users (DAU).</li> </ul> <h3 id="34-storage-estimation">3.4 Storage estimation</h3> <p>Since entries are saved for a time period of 5 years and there are a total of 200 million entries per month, the total entries will be approximately 12 billion.</p> <p>200 Million/month×12 months/year×5 years=12 Billion URL shortening requests</p> <p>Since each entry is 500 Bytes, the total storage estimate would be 6 TB: 12 Billion×500 Bytes=6 TB</p> <pre><code class="language-TXT">            URL Shortening Service Storage Estimation Calculator
URL shortening per month	 200	Million
Expiration time	             5      Years
URL object size              500    Bytes
Total number of requests     12     Billion
Total storage                6      TB     
</code></pre> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2022/11/2-480.webp 480w,/assets/img/2022/11/2-800.webp 800w,/assets/img/2022/11/2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2022/11/2.jpeg" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="35-query-rate-estimation">3.5 Query rate estimation</h3> <p>Based on the estimations above, we can expect 20 billion redirection requests per month.</p> <p>200 Million×100=20 Billion</p> <p>We can extend our calculations for Queries Per Second (QPS) for our system from this baseline. The number of seconds in one month, given the average number of days per month is 30.42:</p> <p>30.42 days×24 hours×60 minutes×60 seconds=2628288 seconds</p> <p>Considering the calculation above, new URL shortening requests per second will be:</p> <p>200 Million/2628288 seconds = 76 URLs/s</p> <p>With a 1:100 shortening to redirecting ratio, the URL redirection rate per second will be:</p> <p>100×76 URLs/s=7.6 K URLs/s</p> <h3 id="36-memory-estimation">3.6 Memory estimation</h3> <p>We need memory estimates in case we want to cache some of the frequently accessed URL redirection requests. Let’s assume a split of 80-20 in the incoming requests. 20 percent of redirection requests generate 80 percent of the traffic.</p> <p>Since the redirection requests per second are 7.6 K, the total would be 0.66 billion for one day.</p> <p>7.6 K×3600 seconds×24 hours=0.66 billion</p> <p>Since we would only consider caching 20 percent of these per-day redirection requests, the total memory requirements estimate would be 66 GB.</p> <p>0.2×0.66 Billion×500 Bytes=66 GB</p> <pre><code class="language-txt">      URL Shortening Service Estimates Calculator
URL shortening per month         200   Million
URL redirection per month	     20    Billion
Query rate for URL shortening    76    URLs / s
Query rate for URL redirection   7600  URLs / s
Single entry storage size        500   Bytes
Incoming data                    304   Kbps
Outgoing data                    30.4  Mbps
Cache memory                     66    GB                       
</code></pre> <h3 id="37-number-of-servers-estimation">3.7 Number of servers estimation</h3> <p>We adopt the same approximation discussed in the back-of-the-envelope calculations to calculate the number of servers needed: the number of daily active users and the daily user handling limit of a server are the two main factors in depicting the total number of servers required. According to the approximation, we need to divide the Daily Active Users (DAU) by 8000 to calculate the approximated number of servers.</p> <p>Number of servers = DAU/8000 = 100 M/8000 = 12500 servers</p> <h3 id="38-summarizing-estimation">3.8 Summarizing estimation</h3> <p>Based on the assumption above, the following table summarizes our estimations:</p> <pre><code class="language-txt">Type of operation       Time estimates

New URLs                 76/s

URL redirections         7.6 K/s

Incoming data            304 Kbps

Outgoing data            30.4 Mbps

Storage for 5 years       6 TB

Memory for cache          66 GB

Servers                   12500
</code></pre> <h2 id="4-high-level-design">4. High Level Design</h2> <p><strong>Assumptions / Considerations</strong></p> <ol> <li>The shortened URL should be human readable</li> <li>Links will expire after 1 year ( inactivity)</li> <li>Hash function — to hash a long URL into a short URL from characters ( a-z, A-Z) and numbers (0–9) is 26+26+10 = 62</li> <li>Availability vs consistency : The system should be highly available.</li> <li>URL redirection must happen in real time with low latency</li> <li>Cache should follow 80% — 20% rule i.e 20% of URL’s generate 80% of traffic and these 20% URL are hot URL’s.</li> </ol> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2022/11/3-480.webp 480w,/assets/img/2022/11/3-800.webp 800w,/assets/img/2022/11/3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2022/11/3.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p><strong>Components</strong></p> <ol> <li>Mobile/Web based Clients : Users</li> <li>Load Balancers : To allocate requests to designated Application server using consistent hashing</li> <li>Application servers and Database servers</li> <li>NoSQL Database and replicas : Cassandra ( Key Value Store)</li> <li>Cache Server</li> </ol> <p><strong>Services</strong></p> <p><strong>Key Generation service:</strong> To randomly generate 6 letters strings and store them into the database ( key — value). This will eliminate collision and duplications problems.</p> <h2 id="5-apis-design">5. APIs Design</h2> <p>We need Rest APIs for the following features:</p> <ul> <li>Shrotening a URL</li> <li>Redirecting a short URL</li> <li>Deleting a shrot URL</li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2022/11/4-480.webp 480w,/assets/img/2022/11/4-800.webp 800w,/assets/img/2022/11/4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2022/11/4.jpeg" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h3 id="51-shortening-a-url">5.1 Shortening a URL</h3> <p><strong>We can create new short URLs with the following definition:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shortURL</span><span class="o">(</span><span class="n">api_dev_key</span><span class="o">,</span> <span class="n">original_url</span><span class="o">,</span> <span class="n">custom_alias</span><span class="o">=</span><span class="nc">None</span><span class="o">,</span> <span class="n">expiry_date</span><span class="o">=</span><span class="nc">None</span><span class="o">)</span>
</code></pre></div></div> <p><strong>The API call above has the following parameters:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Parameter</span>        <span class="nc">Description</span>

<span class="n">api_dev_key</span>      <span class="no">A</span> <span class="n">registered</span> <span class="n">user</span> <span class="n">account</span><span class="err">’</span><span class="n">s</span> <span class="n">unique</span> <span class="n">identifier</span><span class="o">.</span> <span class="nc">This</span> <span class="n">is</span> <span class="n">useful</span> <span class="n">in</span> <span class="n">tracking</span> <span class="n">a</span> <span class="n">user</span><span class="err">’</span><span class="n">s</span> <span class="n">activity</span> <span class="n">and</span> <span class="n">allows</span> <span class="n">the</span> <span class="n">system</span> <span class="n">to</span> <span class="n">control</span> <span class="n">the</span> <span class="n">associated</span> <span class="n">services</span> <span class="n">accordingly</span><span class="o">.</span>

<span class="n">original_url</span>     <span class="nc">The</span> <span class="n">original</span> <span class="kt">long</span> <span class="no">URL</span> <span class="n">that</span> <span class="n">is</span> <span class="n">needed</span> <span class="n">to</span> <span class="n">be</span> <span class="n">shortened</span><span class="o">.</span>

<span class="n">custom_alias</span>     <span class="nc">The</span> <span class="n">optional</span> <span class="n">key</span> <span class="n">that</span> <span class="n">the</span> <span class="n">user</span> <span class="n">defines</span> <span class="n">as</span> <span class="n">a</span> <span class="n">customer</span> <span class="kt">short</span> <span class="no">URL</span><span class="o">.</span>

<span class="n">expiry_date</span>      <span class="nc">The</span> <span class="n">optional</span> <span class="n">expiration</span> <span class="n">date</span> <span class="k">for</span> <span class="n">the</span> <span class="n">shortened</span> <span class="no">URL</span><span class="o">.</span>
</code></pre></div></div> <p>A successful insertion returns the user the shortened URL. Otherwise, the system returns an appropriate error code to the user.</p> <h3 id="52-redirecting-a-short-url">5.2 Redirecting a short URL</h3> <p><strong>To redirect a short URL, the REST API’s definition will be:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">redirectURL</span><span class="o">(</span><span class="n">api_dev_key</span><span class="o">,</span> <span class="n">url_key</span><span class="o">)</span>
</code></pre></div></div> <p><strong>With the following parameters:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Parameter</span>      <span class="nc">Description</span>

<span class="n">api_dev_key</span>    <span class="nc">The</span> <span class="n">registered</span> <span class="n">user</span> <span class="n">account</span><span class="err">’</span><span class="n">s</span> <span class="n">unique</span> <span class="n">identifier</span><span class="o">.</span>

<span class="n">url_key</span>        <span class="nc">The</span> <span class="n">shortened</span> <span class="no">URL</span> <span class="n">against</span> <span class="n">which</span> <span class="n">we</span> <span class="n">need</span> <span class="n">to</span> <span class="n">fetch</span> <span class="n">the</span> <span class="kt">long</span> <span class="no">URL</span> <span class="n">from</span> <span class="n">the</span> <span class="n">database</span><span class="o">.</span>
</code></pre></div></div> <p>A successful redirection lands the user to the original URL associated with the url_key.</p> <h3 id="53-deleting-a-short-url">5.3 Deleting a short URL</h3> <p>Similarly, to delete a short URL, the REST API’s definition will be:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">deleteURL</span><span class="o">(</span><span class="n">api_dev_key</span><span class="o">,</span> <span class="n">url_key</span><span class="o">)</span>
</code></pre></div></div> <p><strong>and the associated parameters will be:</strong></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Parameter</span>       <span class="nc">Description</span>

<span class="n">api_dev_key</span>     <span class="nc">The</span> <span class="n">registered</span> <span class="n">user</span> <span class="n">account</span><span class="err">’</span><span class="n">s</span> <span class="n">unique</span> <span class="n">identifier</span><span class="o">.</span>

<span class="n">url_key</span>         <span class="nc">The</span> <span class="n">shortened</span> <span class="no">URL</span> <span class="n">against</span> <span class="n">which</span> <span class="n">we</span> <span class="n">need</span> <span class="n">to</span> <span class="n">fetch</span> <span class="n">the</span> <span class="kt">long</span> <span class="no">URL</span> <span class="n">from</span> <span class="n">the</span> <span class="n">database</span><span class="o">.</span>
</code></pre></div></div> <p>A successful deletion returns a system message, URL Removed, conveying the successful URL removal from the system.</p> <h2 id="6-database-design">6. Database Design</h2> <p>A few observations about the nature of the data we will store:</p> <ol> <li>We need to store billions of records.</li> <li>Each object we store is small (less than 1K).</li> <li>There are no relationships between records—other than storing which user created a URL.</li> <li>Our service is read-heavy.</li> </ol> <h3 id="61-database-schema">6.1 Database Schema</h3> <p>We would need two tables: one for storing information about the URL mappings, and one for the user’s data who created the short link.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2022/11/5-480.webp 480w,/assets/img/2022/11/5-800.webp 800w,/assets/img/2022/11/5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2022/11/5.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Database: For services like URL shortening, there isn’t a lot of data to store. However, the storage has to be horizontally scalable. The type of data we need to store includes:</p> <ul> <li>User details.</li> <li>Mappings of the URLs, that is, the long URLs that are mapped onto short URLs. Our service doesn’t require user registration for the generation of a short URL, so we can skip adding certain data to our database. Additionally, the stored records will have no relationships among themselves other than linking the URL-creating user’s details, so we don’t need structured storage for record-keeping. Considering the reasons above and the fact that our system will be read-heavy, NoSQL is a suitable choice for storing data. In particular, MongoDB is a good choice for the following reasons: <ol> <li>It uses leader-follower protocol, making it possible to use replicas for heavy reading.</li> <li>MongoDB ensures atomicity in concurrent write operations and avoids collisions by returning duplicate-key errors for record-duplication issues.</li> </ol> </li> </ul> <blockquote> <p>Question<br/> Why are NoSQL databases like Cassandra or Riak not good choices instead of MongoDB?</p> </blockquote> <blockquote> <p>Answer<br/> Since our service is more read-intensive and less write-intensive, MongoDB suits our use case the best for the following reasons:</p> <ul> <li>NoSQL databases like Cassandra, Riak, and DynamoDB need read-repair during the reading stage and hence provide slower reads to write performance.</li> <li>They are leader-less NoSQL databases that provide weaker atomicity upon concurrent writes. Being a single leader database, MongoDB provides a higher read throughput as we can either read from the leader replica or follower replicas. The write operations have to pass through the leader replica. It ensures our system’s availability for reading-intensive tasks even in cases where the leader dies.</li> <li>Since Cassandra inherently ensures availability more than MongoDB, choosing MongoDB over Cassandra might make our system look less available. However, the time taken by the leader election algorithm is negligible compared to the time elapsed between short URL generation and its first usage, so it doesn’t hamper our system’s availability.</li> </ul> </blockquote> <h2 id="7-basic-system-design-and-algorithm">7. Basic System Design and Algorithm</h2> <p>Short URL generator: Our short URL generator will comprise a building block and an additional component:</p> <ul> <li>A sequencer to generate unique IDs</li> <li>A Base-58 encoder to enhance the readability of the short URL We built a sequencer in our building blocks section to generate 64-bit unique numeric IDs. However, our proposed design requires 64-bit alphanumeric short URLs in base-58. To convert the numeric (base-10) IDs to alphanumeric (base-58), we’ll need a base-10 for the base-58 encoder. We’ll explore the rationale behind these decisions alongside the internal working of the base-58 encoder in the next lesson.</li> </ul> <h3 id="71-clarification">7.1 Clarification</h3> <ol> <li>How does encoding improve the readability of the short URL?</li> <li>How are the sequencer and the base-58 encoder in the short URL generation related?</li> </ol> <h3 id="72-why-to-use-encoding">7.2 Why to use encoding</h3> <p>Our sequencer generates a 64-bit ID in base-10, which can be converted to a base-64 short URL. Base-64 is the most common encoding for alphanumeric strings’ generation. However, there are some inherent issues with sticking to the base-64 for this design problem: the generated short URL might have readability issues because of look-alike characters. Characters like O (capital o) and 0 (zero), I (capital I), and l (lower case L) can be confused while characters like + and / should be avoided because of other system-dependent encodings.</p> <p>So, we slash out the six characters and use base-58 instead of base-64 (includes A-Z, a-z, 0-9, + and /) for enhanced readability purposes. Let’s look at our base-58 definition.</p> <pre><code class="language-txt">Base-58
Value      Character     Value     Character    Value   Character    Value    Character

0            1            15          G          30       X           45          n

1            2            16          H          31       Y           46          o

2            3            17          J          32       Z           47          p

3            4            18          K          33       a           48          q

4            5            19          L          34       b           49          r

5            6            20          M          35       c           50          s

6            7            21          N          36       d           51          t

7            8            22          P          37       e           52          u

8            9            23          Q          38       f           53          v

9            A            24          R          39       g           54          w

10           B            25          S          40       h           55          x

11           C            26          T          41       i           56          y

12           D            27          U          42       j           57          z

13           E            28          V          43       k

14           F            29          W          44       m
</code></pre> <blockquote> <p>The highlighted cells contain the succeeding characters of the omitted ones: 0, O, I, and l.</p> </blockquote> <h3 id="73-converting-base-10-to-base-58">7.3 Converting base-10 to base-58</h3> <p>Since we’re converting base-10 numeric IDs to base-58 alphanumeric IDs, explaining the conversion process will be helpful in grasping the underlying mechanism as well as the overall scope of the SUG. To achieve the above functionality, we use the modulus function.</p> <p>Process: We keep diving the base-10 number by 58, making note of the remainder at each step. We stop where there is no remainder left. Then we assign the character indexes to the remainders, starting from assigning the recent-most remainder to the left-most place and the oldest remainder to the right-most place.</p> <p>Example: Let’s assume that the selected unique ID is 2468135791013. The following steps show us the remainder calculations:</p> <p>Base-10 = 2468135791013</p> <p>2468135791013 % 58=17</p> <p>42554065362 % 58=6</p> <p>733690782 % 58=4</p> <p>12649841 % 58=41</p> <p>218100 % 58=20</p> <p>3760 % 58=48</p> <p>64 % 58=6</p> <p>1 % 58=1 Now, we need to write the remainders in order of the most recent to the oldest order.</p> <p>Base-58 = [1] [6] [48] [20] [41] [4] [6] [17]</p> <p>Using the table above, we can write the associated characters with the remainders written above.</p> <p>Base-58 = 27qMi57J</p> <h3 id="74-converting-base-58-to-base-10">7.4 Converting base-58 to base-10</h3> <p>The decoding process holds equal importance as the encoding process, as we used a decoder in case of custom short URLs generation, as explained in the design lesson.</p> <p>Process: The process of converting a base-58 number into a base-10 number is also straightforward. We just need to multiply each character index (value column from the table above) by the number of 58s that position holds, and add all the individual multiplication results.</p> <p>Example: Let’s reverse engineer the example above to see how decoding works.</p> <p>Base-58: 27qMi57J</p> <p>2_{58} = 1 x 58^{7} = 2207984167552</p> <p>7_{58} = 6 x 58^{6} = 228412155264</p> <p>q_{58} = 48 x 58^{5} = 31505124864</p> <p>M_{58} = 20 x 58^{4} = 226329920</p> <p>i_{58} = 41 \times 58^{3} = 7999592</p> <p>5_{58} = 4 \times 58^{2} = 13456</p> <p>7_{58} = 6 \times 58^{1} = 348</p> <p>J_{58} = 17 \times 58^{0} = 17</p> <p>Base-10 = 17 + 348 + 13456 + 7999592 + 226329920 + 31505124864 + 228412155264 + 2207984167552</p> <p>Base-10 = 2468135791013.</p> <p>This is the same unique ID of base-10 from the previous example.</p> <h3 id="75-the-scope-of-the-short-url-generator">7.5 The scope of the short URL generator</h3> <ul> <li> <p>The short URL generator is the backbone of our URL shortening service. The output of this short URL generator depends on the design-imposed limitations, as given below:</p> </li> <li> <p>The generated short URL should contain alphanumeric characters.</p> </li> <li> <p>None of the characters should look alike.</p> </li> <li> <p>The minimum default length of the generated short URL should be six characters. These limitations define the scope of our short URL generator. We can define the scope, as shown below:</p> <ul> <li>Starting range: Our sequencer can generate a 64-bit binary number that ranges from 1 to (2^{64}-1). To meet the requirement for the minimum length of a short URL, we can select the sequencer IDs to start from at least 10 digits, i.e., 1 Billion.</li> <li>Ending point: The maximum number of digits in sequencer IDs that map into the short URL generator’s output depends on the maximum utilization of 64 bits, that is, the largest base-10 number in 64-bits. We can estimate the total number of digits in any base by calculating these two points:</li> </ul> </li> </ul> <ol> <li>The numbers of bits to represent one digit in a base-n. This is given by log_2{n}</li> <li>Number of digits = Total bits available/Number of bits to represent one digit</li> </ol> <p>Let’s see the calculations above for both the base-10 and base-58 mathematically:</p> <ul> <li>Base-10: <ul> <li>The number of bits needed to represent one decimal digit = log_2{10} = 3.13</li> </ul> </li> <li>The total number of decimal digits in 64-bit numeric ID = 64 / 3.13= 20</li> </ul> <p>Base-58: The number of bits needed to represent one decimal digit = log_2{58}=5.85 The total number of base-58 digits in a 64-bit numeric ID =64 / 5.85=11</p> <pre><code class="language-TXT">Maximum digits: The calculations above show that the maximum digits in the sequencer generated ID will be 20 and consequently, the maximum number of characters in the encoded short URL will be 11.  

</code></pre> <pre><code class="language-txt">Question 1
Since we’re using the 10 digits and beyond sequencer IDs, is there a way we can use the sequencer IDs shorter than 10 digits?

Answer
We can use the range below the ten digits sequencer IDs for custom short links for users with premium memberships. It will ensure two benefits:

Utilization of the blocked range of IDs
Less than six characters short URLs
Example: Let’s assume that the user requests abc as a custom short URL, and it’s available in our system, as there is no instance in the data store matching with this short URL. We need to perform the following two operations:

1. Assign this short URL to the requested long URL and store this record in the datastore.
2. Mark the associated unique ID unusable. To find the associated unique ID, we need to decode abc into base-10. Using the above decode method, we come up with the base-10 unique ID value as 113019. The unique ID is less than 1 Billion, as the custom short URL is less than six characters, conforming to the above-stated two benefits.
Our system doesn’t ensure a guaranteed custom short link generation, as some other premium member might have claimed the requested custom short URL.
</code></pre> <pre><code class="language-txt">Question 2
What should the short URL be for the sequencer’s largest number?

Hide Answer
Since the sequencer’s largest number is 18,446,744,073,709,551,615. That is, 2^{64}-1, the base-58 equivalent of it will be jpXCZedGfVQ, conforming to our calculations above.
</code></pre> <h3 id="76-the-sequencers-lifetime">7.6 The sequencer’s lifetime</h3> <p>The number of years that our sequencer can provide us with unique IDs depends on two factors:</p> <ul> <li>Total numbers available in the sequencer = 2^{64} - 10^{9} (starting from 1 Billion as discussed above)</li> <li>Number of requests per year = 200 Million per month×12=2.4 Billion (as assumed in Requirements) So, taking the above two factors into consideration, we can calculate the expected life of our sequencer. The lifetime of the sequencer = total numbers available/yearly requests ={2^{64}-10^{9}} / {2.4 Billion} = 7,686,143,363.63 years</li> </ul> <p>The lifetime of the sequencer = total numbers available/yearly requests ={2^{64}-10^{9}} / {2.4 Billion} = 7,686,143,363.63 years</p> <pre><code class="language-txt">            Life expectancy for sequencer
Number of requests per month	  200 Million
Number of requests per year	      2.4 Billion
Lifetime of sequencer	          7,686,143,363.63 years
</code></pre> <p>Other building blocks: Beside the elements mentioned above, we’ll also incorporate other building blocks like load balancers, cache, and rate limiters.</p> <ul> <li>Load balancing: We can employ Global Server Load Balancing (GSLB) apart from local load balancing to improve availability. Since we have plenty of time between a short URL being generated and subsequently accessed, we can safely assume that our DB is geographically consistent and that distributing requests globally won’t cause any issues. <ol> <li>We can add a Load balancing layer at three places in our system: <ul> <li>Between Clients and Application servers</li> <li>Between Application Servers and database servers</li> <li>Between Application Servers and Cache servers</li> </ul> </li> </ol> </li> <li>Cache: For our specific read-intensive design problem, Memcached is the best choice for a cache solution. We require a simple, horizontally scalable cache system with minimal data structure requirements. Moreover, we’ll have a data-center-specific caching layer to handle native requests. Having a global caching layer will result in higher latency. <ol> <li>How much cache memory should we have? We can start with 20% of daily traffic and, based on clients’ usage pattern, we can adjust how many cache servers we need. As estimated above, we need 170GB memory to cache 20% of daily traffic. Since a modern-day server can have 256GB memory, we can easily fit all the cache into one machine. Alternatively, we can use a couple of smaller servers to store all these hot URLs.</li> <li>Which cache eviction policy would best fit our needs? When the cache is full, and we want to replace a link with a newer/hotter URL, how would we choose? Least Recently Used (LRU) can be a reasonable policy for our system. Under this policy, we discard the least recently used URL first. We can use a Linked Hash Map or a similar data structure to store our URLs and Hashes, which will also keep track of the URLs that have been accessed recently.</li> <li>How can each cache replica be updated? Whenever there is a cache miss, our servers would be hitting a backend database. Whenever this happens, we can update the cache and pass the new entry to all the cache replicas. Each replica can update its cache by adding the new entry. If a replica already has that entry, it can simply ignore it.</li> </ol> </li> <li>Rate limiter: Limiting each user’s quota is preferable for adding a security layer to our system. We can achieve this by uniquely identifying users through their unique api_dev_key and applying one of the discussed rate-limiting algorithms (see Rate Limiter from Building Blocks). Keeping in view the simplicity of our system and the requirements, the fixed window counter algorithm would serve the purpose, as we can assign a set number of shortening and redirection operations per api_dev_key for a specific timeframe.</li> </ul> <pre><code class="language-txt">Question 1
How will we maintain a unique mapping if redirection requests can go to different data centers that are geographically apart? Does our design assume that our DB is consistent geographically?

Answer
We initially assumed that our data center was globally consistent. Let’s look at the problem differently and consider the opposite case: we need to filter the redirection requests based on data centers.

Solution: An simple way of achieving this functionality is to introduce a unique character in the short URL. This special character will act as an indicator for the exact data center.

Example: Let’s assume that the short URL that needs redirection is service.com/x/short123/, where x indicates the data center containing this record.

In this solution, if the short URL goes to the wrong data center, it can be redirected to the correct one. However, if a specific data center is not reachable for a specific short URL (and that URL is not yet cached), the redirection will fail.
</code></pre> <pre><code class="language-txt">Question 2
How will the data-center-specific caching handle an unseen redirection request?

Answer
Since we’ve assumed the data-center-specific caching solution for our system, a case needs highlighting: handling unseen redirection requests by our system.

Scenario: The scenario entails receiving an unknown redirection request at a data center. Since the local cache wouldn’t have that entry, it would fetch that record from the globally consistent database and place this entry into the local cache for future use.
</code></pre> <pre><code class="language-txt">Question 3
What is the probability of collision when we ask the short URL generator for a new short URL?

Answer
We ask the sequencer for a unique ID and by the definition of our sequencer’s design, there will never be duplication in IDs. We then encode those IDs, which also ensures no duplication. Hence, the regular short URL generation process ensures no duplication in records.

Now let’s consider the case of custom short URLs. Since the user is providing the short URL, there can be a duplication. We can easily calculate the probability of this collision by taking into account the size of the database containing short URL records.

Let’s assume there are n already generated short URLs in the database. The probability that the user-provided custom short URL will be similar to an already existing one can be given by 1/n.
</code></pre> <h2 id="8-data-partitioning-and-replication">8. Data Partitioning and Replication</h2> <p>To scale out our DB, we need to partition it so that it can store information about billions of URLs. We need to come up with a partitioning scheme that would divide and store our data into different DB servers.</p> <ol> <li>Range Based Partitioning: We can store URLs in separate partitions based on the first letter of the hash key. Hence we save all the URLs starting with letter ‘A’ (and ‘a’) in one partition, save those that start with letter ‘B’ in another partition and so on. This approach is called range-based partitioning. We can even combine certain less frequently occurring letters into one database partition. We should come up with a static partitioning scheme so that we can always store/find a URL in a predictable manner.<br/> The main problem with this approach is that it can lead to unbalanced DB servers. For example, we decide to put all URLs starting with letter ‘E’ into a DB partition, but later we realize that we have too many URLs that start with the letter ‘E’.</li> <li>Hash-Based Partitioning: In this scheme, we take a hash of the object we are storing. We then calculate which partition to use based upon the hash. In our case, we can take the hash of the ‘key’ or the short link to determine the partition in which we store the data object.<br/> Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can always map any ‘key’ to a number between [1…256]), and this number would represent the partition in which we store our object.</li> </ol> <h2 id="9-purging-or-db-cleanup">9. Purging or DB cleanup</h2> <p>Should entries stick around forever or should they be purged? If a user-specified expiration time is reached, what should happen to the link?</p> <p>If we chose to actively search for expired links to remove them, it would put a lot of pressure on our database. Instead, we can slowly remove expired links and do a lazy cleanup. Our service will make sure that only expired links will be deleted, although some expired links can live longer but will never be returned to users.</p> <ul> <li>Whenever a user tries to access an expired link, we can delete the link and return an error to the user.</li> <li>A separate Cleanup service can run periodically to remove expired links from our storage and cache. This service should be very lightweight and can be scheduled to run only when the user traffic is expected to be low.</li> <li>We can have a default expiration time for each link (e.g., two years).</li> <li>After removing an expired link, we can put the key back in the key-DB to be reused.</li> <li>Should we remove links that haven’t been visited in some length of time, say six months? This could be tricky. Since storage is getting cheap, we can decide to keep links forever.</li> </ul> <h2 id="9-security-and-permissions">9. Security and Permissions</h2> <pre><code class="language-txt">Question
Can users create private URLs or allow a particular set of users to access a URL?

Answer
We can store the permission level (public/private) with each URL in the database. We can also create a separate table to store UserIDs that have permission to see a specific URL. If a user does not have permission and tries to access a URL, we can send an error (HTTP 401) back. Given that we are storing our data in a NoSQL wide-column database like Cassandra, the key for the table storing permissions would be the ‘Hash’ (or the KGS generated ‘key’). The columns will store the UserIDs of those users that have the permission to see the URL.

</code></pre> <h2 id="10-design-diagram">10. Design diagram</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2022/11/6-480.webp 480w,/assets/img/2022/11/6-800.webp 800w,/assets/img/2022/11/6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/2022/11/6.png" class="img-fluid rounded z-depth-1" width="70%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ol> <li>Shortening: Each new request for short link computation gets forwarded to the short URL generator (SUG) by the application server. Upon successful generation of the short link, the system sends one copy back to the user and stores the record in the database for future use.</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Question 1
How does our system avoid duplicate short URL generation?

Answer
- Computing a short URL for an already existing long URL is redundant, and the system sends the long URL to the database server to check its existence in the system. The system will check the respective entry in the cache first and then query the database.
- If the short URL for the corresponding long URL is already present, the database returns the saved short URL to the application server which reroutes the requested short URL to the user.
- If the requested short URL is unavailable in the system, the application server requests the SUG to compute the short URL for the requested long URL. Once computed, the SUG sends back a copy of the requested short URL to the application server and another copy to the database server.
</code></pre></div></div> <pre><code class="language-txt">Question 2
How do we ensure that two concurrent requests for a short URL do not overwrite?

Answer
Concurrency in handling URL shortening requests is essential, and we achieve it as follows:

MongoDB ensures consistency by locking and concurrency control protocols, preventing the users from modifying the same data simultaneously.
In MongoDB, all the write requests go through the single leader and hence exclude the possibility of race conditions due to the serialization of requests via a single leader.
</code></pre> <ol> <li>Redirection: Application servers, upon receiving the redirection requests, check the storage units (caching system and database) for the required record. If found, the application server redirects the user to the associated long URL.</li> </ol> <pre><code class="language-txt">Question
How does our system ensure that our data store will not be a bottleneck?

Hide Answer
We can ensure that our data store doesn’t become a bottleneck, using the following two approaches:

1. We use a range-based sequencer in our design, which ensures basic level mapping between the servers and the short URLs. We can redirect the request to the respective database for a quick search.
2. As discussed above, we can also have unique IDs for various data stores and integrate them into short URLs. We can subsequently redirect requests to the respective datastore for efficient request handling.
Both of these approaches ensure smooth traffic handling and mitigate the risk of the datastore becoming a bottleneck.
</code></pre> <ol> <li>Deletion: A logged-in user can delete a record by requesting the application server which forwards the user details and the associated URL’s information to the database server for deletion. A system-initiated deletion can also be triggered upon an expiry time, as we’ll see ahead.</li> <li>Custom short links: This task begins with checking the eligibility of the requested short URL. The maximum length allowed is 11 alphanumeric digits. We can find the details on the allowed format and the specific digits in the next lesson. Once verified, the system checks its availability in the database. If the requested URL is available, the user receives a successful short URL generation message, or an error message in the opposite case. The illustration below depicts how URL shortening, redirection, and deletion work.</li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Question 
Upon successful allocation of a custom short URL, how does the system modify its records?

Answer 
Since the custom short URL is the base-58 encoding of an available base-10 unique ID, marking that unique ID as unavailable for future use is necessary for the system’s integrity.

On the backend, the system accesses the server with the base-10 equivalent unique ID of that specific base-58 short URL. It marks the ID as unavailable in the range, eliminating any chance of reallocating the same ID to any other request.
</code></pre></div></div>]]></content><author><name></name></author><category term="System Design"/><summary type="html"><![CDATA[Designing a Tiny URL]]></summary></entry></feed>