<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://zhengstar94.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://zhengstar94.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-06T14:22:57+00:00</updated><id>https://zhengstar94.github.io//feed.xml</id><title type="html">zhengxingxing</title><subtitle>Welcome to Xingxing&apos;s blog, where I share my thoughts and experiences on various topics. </subtitle><entry><title type="html">2274. Maximum Consecutive Floors Without Special Floors</title><link href="https://zhengstar94.github.io//blog/2025/MaximumConsecutiveFloorsWithoutSpecialFloors/" rel="alternate" type="text/html" title="2274. Maximum Consecutive Floors Without Special Floors"/><published>2025-01-06T00:00:00+00:00</published><updated>2025-01-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MaximumConsecutiveFloorsWithoutSpecialFloors</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MaximumConsecutiveFloorsWithoutSpecialFloors/"><![CDATA[<ul> <li>Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be <strong>special floors</strong>, used for relaxation only.</li> <li>You are given two integers <code class="language-plaintext highlighter-rouge">bottom</code> and <code class="language-plaintext highlighter-rouge">top</code>, which denote that Alice has rented all the floors from <code class="language-plaintext highlighter-rouge">bottom</code> to <code class="language-plaintext highlighter-rouge">top</code> (<strong>inclusive</strong>). You are also given the integer array <code class="language-plaintext highlighter-rouge">special</code>, where <code class="language-plaintext highlighter-rouge">special[i]</code> denotes a special floor that Alice has designated for relaxation.</li> <li>Return <em>the <strong>maximum</strong> number of consecutive floors without a special floor</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: bottom = 2, top = 9, special = [4,6]
Output: 3
Explanation: The following are the ranges (inclusive) of consecutive floors without a special floor:
- (2, 3) with a total amount of 2 floors.
- (5, 5) with a total amount of 1 floor.
- (7, 9) with a total amount of 3 floors.
Therefore, we return the maximum number which is 3 floors.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: bottom = 6, top = 8, special = [7,6,8]
Output: 0
Explanation: Every floor rented is a special floor, so we return 0.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(nlog(n)) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MaximumConsecutiveFloorsWithoutSpecialFloors</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">maxConsecutive</span><span class="o">(</span><span class="kt">int</span> <span class="n">bottom</span><span class="o">,</span> <span class="kt">int</span> <span class="n">top</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">special</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">special</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">maxLen</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Check the first consecutive non-special floors (from bottom to first special floor)</span>
        <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">special</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="n">bottom</span><span class="o">);</span>

        <span class="c1">// Check consecutive non-special floors between adjacent special floors</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">special</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">special</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">-</span> <span class="n">special</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Check the last consecutive non-special floors (from last special floor to top)</span>
        <span class="n">maxLen</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">maxLen</span><span class="o">,</span> <span class="n">top</span> <span class="o">-</span> <span class="n">special</span><span class="o">[</span><span class="n">special</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>

        <span class="k">return</span> <span class="n">maxLen</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="kt">int</span> <span class="n">bottom1</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">top1</span> <span class="o">=</span> <span class="mi">9</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">special1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">6</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: "</span> <span class="o">+</span> <span class="n">maxConsecutive</span><span class="o">(</span><span class="n">bottom1</span><span class="o">,</span> <span class="n">top1</span><span class="o">,</span> <span class="n">special1</span><span class="o">));</span>  <span class="c1">// Expected output: 3</span>

        <span class="c1">// Test case 2</span>
        <span class="kt">int</span> <span class="n">bottom2</span> <span class="o">=</span> <span class="mi">6</span><span class="o">,</span> <span class="n">top2</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">special2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">7</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 2: "</span> <span class="o">+</span> <span class="n">maxConsecutive</span><span class="o">(</span><span class="n">bottom2</span><span class="o">,</span> <span class="n">top2</span><span class="o">,</span> <span class="n">special2</span><span class="o">));</span>  <span class="c1">// Expected output: 0</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only. You are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation. Return the maximum number of consecutive floors without a special floor.]]></summary></entry><entry><title type="html">1769. Minimum Number of Operations to Move All Balls to Each Box</title><link href="https://zhengstar94.github.io//blog/2025/MinimumNumberOfOperationsToMoveAllBallsToEachBox/" rel="alternate" type="text/html" title="1769. Minimum Number of Operations to Move All Balls to Each Box"/><published>2025-01-06T00:00:00+00:00</published><updated>2025-01-06T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MinimumNumberOfOperationsToMoveAllBallsToEachBox</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MinimumNumberOfOperationsToMoveAllBallsToEachBox/"><![CDATA[<ul> <li>You have <code class="language-plaintext highlighter-rouge">n</code> boxes. You are given a binary string <code class="language-plaintext highlighter-rouge">boxes</code> of length <code class="language-plaintext highlighter-rouge">n</code>, where <code class="language-plaintext highlighter-rouge">boxes[i]</code> is <code class="language-plaintext highlighter-rouge">'0'</code> if the <code class="language-plaintext highlighter-rouge">ith</code> box is <strong>empty</strong>, and <code class="language-plaintext highlighter-rouge">'1'</code> if it contains <strong>one</strong> ball.</li> <li>In one operation, you can move <strong>one</strong> ball from a box to an adjacent box. Box <code class="language-plaintext highlighter-rouge">i</code> is adjacent to box <code class="language-plaintext highlighter-rouge">j</code> if <code class="language-plaintext highlighter-rouge">abs(i - j) == 1</code>. Note that after doing so, there may be more than one ball in some boxes.</li> <li>Return an array <code class="language-plaintext highlighter-rouge">answer</code> of size <code class="language-plaintext highlighter-rouge">n</code>, where <code class="language-plaintext highlighter-rouge">answer[i]</code> is the <strong>minimum</strong> number of operations needed to move all the balls to the <code class="language-plaintext highlighter-rouge">ith</code> box.</li> <li>Each <code class="language-plaintext highlighter-rouge">answer[i]</code> is calculated considering the <strong>initial</strong> state of the boxes.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: boxes = "110"
Output: [1,1,3]
Explanation: The answer for each box is as follows:
1) First box: you will have to move one ball from the second box to the first box in one operation.
2) Second box: you will have to move one ball from the first box to the second box in one operation.
3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: boxes = "001011"
Output: [11,8,5,4,3,4]
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/06
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MinimumNumberOfOperationsToMoveAllBallsToEachBox</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">minOperations</span><span class="o">(</span><span class="nc">String</span> <span class="n">boxes</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">boxes</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">answer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>

        <span class="kt">int</span> <span class="n">ballsOnLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">operationsFormLeft</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">operationsFormLeft</span><span class="o">;</span>
            <span class="n">ballsOnLeft</span> <span class="o">+=</span> <span class="n">boxes</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'1'</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">operationsFormLeft</span> <span class="o">+=</span> <span class="n">ballsOnLeft</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">ballsOnRight</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">operationsFormRight</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
            <span class="n">answer</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">operationsFormRight</span><span class="o">;</span>
            <span class="n">ballsOnRight</span> <span class="o">+=</span> <span class="n">boxes</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">'1'</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">operationsFormRight</span> <span class="o">+=</span> <span class="n">ballsOnRight</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 测试用例1</span>
        <span class="nc">String</span> <span class="n">boxes1</span> <span class="o">=</span> <span class="s">"110"</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result1</span> <span class="o">=</span> <span class="n">minOperations</span><span class="o">(</span><span class="n">boxes1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"测试用例1结果: "</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">result1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// 测试用例2</span>
        <span class="nc">String</span> <span class="n">boxes2</span> <span class="o">=</span> <span class="s">"001011"</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result2</span> <span class="o">=</span> <span class="n">minOperations</span><span class="o">(</span><span class="n">boxes2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"测试用例2结果: "</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">result2</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">num</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball. In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes. Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box. Each answer[i] is calculated considering the initial state of the boxes.]]></summary></entry><entry><title type="html">2241. Design an ATM Machine</title><link href="https://zhengstar94.github.io//blog/2025/ATM/" rel="alternate" type="text/html" title="2241. Design an ATM Machine"/><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ATM</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ATM/"><![CDATA[<ul> <li>There is an ATM machine that stores banknotes of <code class="language-plaintext highlighter-rouge">5</code> denominations: <code class="language-plaintext highlighter-rouge">20</code>, <code class="language-plaintext highlighter-rouge">50</code>, <code class="language-plaintext highlighter-rouge">100</code>, <code class="language-plaintext highlighter-rouge">200</code>, and <code class="language-plaintext highlighter-rouge">500</code> dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money.</li> <li>When withdrawing, the machine prioritizes using banknotes of <strong>larger</strong> values. <ul> <li>For example, if you want to withdraw <code class="language-plaintext highlighter-rouge">$300</code> and there are <code class="language-plaintext highlighter-rouge">2</code> <code class="language-plaintext highlighter-rouge">$50</code> banknotes, <code class="language-plaintext highlighter-rouge">1</code> <code class="language-plaintext highlighter-rouge">$100</code> banknote, and <code class="language-plaintext highlighter-rouge">1</code> <code class="language-plaintext highlighter-rouge">$200</code> banknote, then the machine will use the <code class="language-plaintext highlighter-rouge">$100</code> and <code class="language-plaintext highlighter-rouge">$200</code> banknotes.</li> <li>However, if you try to withdraw <code class="language-plaintext highlighter-rouge">$600</code> and there are <code class="language-plaintext highlighter-rouge">3</code> <code class="language-plaintext highlighter-rouge">$200</code> banknotes and <code class="language-plaintext highlighter-rouge">1</code> <code class="language-plaintext highlighter-rouge">$500</code> banknote, then the withdraw request will be rejected because the machine will first try to use the <code class="language-plaintext highlighter-rouge">$500</code> banknote and then be unable to use banknotes to complete the remaining <code class="language-plaintext highlighter-rouge">$100</code>. Note that the machine is <strong>not</strong> allowed to use the <code class="language-plaintext highlighter-rouge">$200</code> banknotes instead of the <code class="language-plaintext highlighter-rouge">$500</code> banknote.</li> </ul> </li> <li>Implement the ATM class: <ul> <li><code class="language-plaintext highlighter-rouge">ATM()</code> Initializes the ATM object.</li> <li><code class="language-plaintext highlighter-rouge">void deposit(int[] banknotesCount)</code> Deposits new banknotes in the order <code class="language-plaintext highlighter-rouge">$20</code>, <code class="language-plaintext highlighter-rouge">$50</code>, <code class="language-plaintext highlighter-rouge">$100</code>, <code class="language-plaintext highlighter-rouge">$200</code>, and <code class="language-plaintext highlighter-rouge">$500</code>.</li> <li><code class="language-plaintext highlighter-rouge">int[] withdraw(int amount)</code> Returns an array of length <code class="language-plaintext highlighter-rouge">5</code> of the number of banknotes that will be handed to the user in the order <code class="language-plaintext highlighter-rouge">$20</code>, <code class="language-plaintext highlighter-rouge">$50</code>, <code class="language-plaintext highlighter-rouge">$100</code>, <code class="language-plaintext highlighter-rouge">$200</code>, and <code class="language-plaintext highlighter-rouge">$500</code>, and update the number of banknotes in the ATM after withdrawing. Returns <code class="language-plaintext highlighter-rouge">[-1]</code> if it is not possible (do <strong>not</strong> withdraw any banknotes in this case).</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
["ATM", "deposit", "withdraw", "deposit", "withdraw", "withdraw"]
[[], [[0,0,1,2,1]], [600], [[0,1,0,1,1]], [600], [550]]
Output
[null, null, [0,0,1,0,1], null, [-1], [0,1,0,0,1]]

Explanation
ATM atm = new ATM();
atm.deposit([0,0,1,2,1]); // Deposits 1 $100 banknote, 2 $200 banknotes,
                          // and 1 $500 banknote.
atm.withdraw(600);        // Returns [0,0,1,0,1]. The machine uses 1 $100 banknote
                          // and 1 $500 banknote. The banknotes left over in the
                          // machine are [0,0,0,2,0].
atm.deposit([0,1,0,1,1]); // Deposits 1 $50, $200, and $500 banknote.
                          // The banknotes in the machine are now [0,1,0,3,1].
atm.withdraw(600);        // Returns [-1]. The machine will try to use a $500 banknote
                          // and then be unable to complete the remaining $100,
                          // so the withdraw request will be rejected.
                          // Since the request is rejected, the number of banknotes
                          // in the machine is not modified.
atm.withdraw(550);        // Returns [0,1,0,0,1]. The machine uses 1 $50 banknote
                          // and 1 $500 banknote.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(1) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/04
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubstringWithConcatenationOfAllWords</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">findSubstring</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// List to store the final result, records the starting indices of substrings that meet the condition</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Basic input checks, return empty result if input is null or empty</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">words</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Get basic information</span>
        <span class="kt">int</span> <span class="n">wordLen</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">();</span>    <span class="c1">// Length of each word</span>
        <span class="kt">int</span> <span class="n">wordCount</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>       <span class="c1">// Total number of words</span>
        <span class="kt">int</span> <span class="n">totalLen</span> <span class="o">=</span> <span class="n">wordLen</span> <span class="o">*</span> <span class="n">wordCount</span><span class="o">;</span> <span class="c1">// Total length of all concatenated words</span>

        <span class="c1">// If the original string's length is smaller than the required total length, it can't match, return empty result</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">totalLen</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Step 1: Create a HashMap to count how many times each word should appear in the words array</span>
        <span class="c1">// Key is the word, value is how many times the word should appear</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">wordMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">wordMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">wordMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Step 2: Iterate over all possible starting positions</span>
        <span class="c1">// Since the length of each word is fixed, only need to iterate over wordLen offsets</span>
        <span class="c1">// For example, if the word length is 3, we only need to start from indices 0, 1, 2 to cover all possibilities</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wordLen</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>                              <span class="c1">// Left boundary of the sliding window</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>                            <span class="c1">// The number of matched words in the current window</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">curMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>  <span class="c1">// Count of words in the current window</span>

            <span class="c1">// Step 3: Use sliding window, each time move by one word length</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">wordLen</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">wordLen</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Get the word at the current position</span>
                <span class="nc">String</span> <span class="n">word</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">j</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">);</span>

                <span class="c1">// If the word is one of the target words (exists in the words array)</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">word</span><span class="o">))</span> <span class="o">{</span>
                    <span class="c1">// Add the word to the count in the current window</span>
                    <span class="n">curMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">curMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                    <span class="n">count</span><span class="o">++;</span> <span class="c1">// Increase the number of matched words</span>

                    <span class="c1">// If the current word appears more than required, shrink the left boundary of the window</span>
                    <span class="c1">// Remove the leftmost word until the count of the current word is within the required limit</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">curMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">wordMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">leftWord</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">);</span>
                        <span class="n">curMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">leftWord</span><span class="o">,</span> <span class="n">curMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">leftWord</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                        <span class="n">count</span><span class="o">--;</span>
                        <span class="n">left</span> <span class="o">+=</span> <span class="n">wordLen</span><span class="o">;</span>
                    <span class="o">}</span>

                    <span class="c1">// If all words are found (matching the required count)</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">wordCount</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">left</span><span class="o">);</span> <span class="c1">// Add the current valid starting index to the result</span>

                        <span class="c1">// Remove the leftmost word and continue searching for the next match</span>
                        <span class="c1">// This allows finding all possible matching positions</span>
                        <span class="nc">String</span> <span class="n">leftWord</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">);</span>
                        <span class="n">curMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">leftWord</span><span class="o">,</span> <span class="n">curMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">leftWord</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                        <span class="n">count</span><span class="o">--;</span>
                        <span class="n">left</span> <span class="o">+=</span> <span class="n">wordLen</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// If a word is encountered that is not in the target word list</span>
                    <span class="c1">// Reset all states and start matching from the next position</span>
                    <span class="n">curMap</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
                    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="n">left</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Basic case</span>
        <span class="c1">// "barfoo" and "foobar" are valid substrings</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"barfoothefoobarman"</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"foo"</span><span class="o">,</span><span class="s">"bar"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">findSubstring</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">words1</span><span class="o">));</span> <span class="c1">// Expected output: [0, 9]</span>

        <span class="c1">// Test case 2: Repeated characters</span>
        <span class="c1">// Test handling of repeated words</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"aaaaaaaa"</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"aa"</span><span class="o">,</span><span class="s">"aa"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">findSubstring</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">words2</span><span class="o">));</span>

        <span class="c1">// Test case 3: No matches</span>
        <span class="c1">// Test case where no matches are found</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"wordgoodgoodgoodbestword"</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"word"</span><span class="o">,</span><span class="s">"good"</span><span class="o">,</span><span class="s">"best"</span><span class="o">,</span><span class="s">"good"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">findSubstring</span><span class="o">(</span><span class="n">s3</span><span class="o">,</span> <span class="n">words3</span><span class="o">));</span> <span class="c1">// Expected output: []</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Greedy"/><category term="Medium"/><summary type="html"><![CDATA[There is an ATM machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. Initially the ATM is empty. The user can use the machine to deposit or withdraw any amount of money. When withdrawing, the machine prioritizes using banknotes of larger values. For example, if you want to withdraw $300 and there are 2 $50 banknotes, 1 $100 banknote, and 1 $200 banknote, then the machine will use the $100 and $200 banknotes. However, if you try to withdraw $600 and there are 3 $200 banknotes and 1 $500 banknote, then the withdraw request will be rejected because the machine will first try to use the $500 banknote and then be unable to use banknotes to complete the remaining $100. Note that the machine is not allowed to use the $200 banknotes instead of the $500 banknote. Implement the ATM class: ATM() Initializes the ATM object. void deposit(int[] banknotesCount) Deposits new banknotes in the order $20, $50, $100, $200, and $500. int[] withdraw(int amount) Returns an array of length 5 of the number of banknotes that will be handed to the user in the order $20, $50, $100, $200, and $500, and update the number of banknotes in the ATM after withdrawing. Returns [-1] if it is not possible (do not withdraw any banknotes in this case).]]></summary></entry><entry><title type="html">2381. Shifting Letters II</title><link href="https://zhengstar94.github.io//blog/2025/ShiftingLettersII/" rel="alternate" type="text/html" title="2381. Shifting Letters II"/><published>2025-01-05T00:00:00+00:00</published><updated>2025-01-05T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/ShiftingLettersII</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/ShiftingLettersII/"><![CDATA[<ul> <li>You are given a string <code class="language-plaintext highlighter-rouge">s</code> of lowercase English letters and a 2D integer array <code class="language-plaintext highlighter-rouge">shifts</code> where <code class="language-plaintext highlighter-rouge">shifts[i] = [starti, endi, directioni]</code>. For every <code class="language-plaintext highlighter-rouge">i</code>, <strong>shift</strong> the characters in <code class="language-plaintext highlighter-rouge">s</code> from the index <code class="language-plaintext highlighter-rouge">starti</code> to the index <code class="language-plaintext highlighter-rouge">endi</code> (<strong>inclusive</strong>) forward if <code class="language-plaintext highlighter-rouge">directioni = 1</code>, or shift the characters backward if <code class="language-plaintext highlighter-rouge">directioni = 0</code>.</li> <li>Shifting a character <strong>forward</strong> means replacing it with the <strong>next</strong> letter in the alphabet (wrapping around so that <code class="language-plaintext highlighter-rouge">'z'</code> becomes <code class="language-plaintext highlighter-rouge">'a'</code>). Similarly, shifting a character <strong>backward</strong> means replacing it with the <strong>previous</strong> letter in the alphabet (wrapping around so that <code class="language-plaintext highlighter-rouge">'a'</code> becomes <code class="language-plaintext highlighter-rouge">'z'</code>).</li> <li>Return <em>the final string after all such shifts to</em> <code class="language-plaintext highlighter-rouge">s</code> <em>are applied</em>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abc", shifts = [ [ 0,1,0],[1,2,1],[0,2,1 ] ]
Output: "ace"
Explanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = "zac".
Secondly, shift the characters from index 1 to index 2 forward. Now s = "zbd".
Finally, shift the characters from index 0 to index 2 forward. Now s = "ace".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "dztz", shifts = [ [ 0,0,0],[1,1,1 ] ]
Output: "catz"
Explanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = "cztz".
Finally, shift the characters from index 1 to index 1 forward. Now s = "catz".
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n + m) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/05
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShiftingLettersII</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">shiftString</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">shifts</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="c1">// Create difference array with size n+1 to handle the boundary case</span>
        <span class="c1">// The extra position is used to mark the end of the last interval</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">diff</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

        <span class="c1">// First loop: Process all shift operations using difference array technique</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">shift</span> <span class="o">:</span> <span class="n">shifts</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">shift</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>    <span class="c1">// Start index of current interval</span>
            <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">shift</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>      <span class="c1">// End index of current interval</span>
            <span class="c1">// Convert direction to actual shift value</span>
            <span class="c1">// If direction is 1 (forward), use 1; if direction is 0 (backward), use -1</span>
            <span class="kt">int</span> <span class="n">direction</span> <span class="o">=</span> <span class="n">shift</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>

            <span class="c1">// Mark the start of interval with the shift value</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">+=</span> <span class="n">direction</span><span class="o">;</span>
            <span class="c1">// Mark the position after end of interval with opposite shift value</span>
            <span class="c1">// This ensures the shift effect stops after the interval</span>
            <span class="n">diff</span><span class="o">[</span><span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-=</span> <span class="n">direction</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Create StringBuilder for efficient string construction</span>
        <span class="nc">StringBuilder</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="c1">// Track accumulated shift value for current position</span>
        <span class="kt">int</span> <span class="n">currentShift</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Second loop: Build the result string by applying accumulated shifts</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Add current position's difference value to running sum</span>
            <span class="c1">// This gives us the total shift amount for current position</span>
            <span class="n">currentShift</span> <span class="o">+=</span> <span class="n">diff</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>

            <span class="c1">// Get current character from input string</span>
            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>

            <span class="c1">// Calculate new character position after shifting</span>
            <span class="c1">// 1. (c - 'a'): Convert character to 0-based position (a=0, b=1, ...)</span>
            <span class="c1">// 2. currentShift % 26: Ensure shift amount stays within alphabet range</span>
            <span class="c1">// 3. + 26: Handle negative shifts by adding full alphabet length</span>
            <span class="c1">// 4. % 26: Ensure final position stays within alphabet range (0-25)</span>
            <span class="kt">int</span> <span class="n">shifted</span> <span class="o">=</span> <span class="o">((</span><span class="n">c</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">)</span> <span class="o">+</span> <span class="n">currentShift</span> <span class="o">%</span> <span class="mi">26</span> <span class="o">+</span> <span class="mi">26</span><span class="o">)</span> <span class="o">%</span> <span class="mi">26</span><span class="o">;</span>

            <span class="c1">// Convert numerical position back to character and append to result</span>
            <span class="n">result</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="o">(</span><span class="n">shifted</span> <span class="o">+</span> <span class="sc">'a'</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Multiple overlapping shifts</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">shifts1</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span>  <span class="c1">// Shift index 0-1 backward</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span>  <span class="c1">// Shift index 1-2 forward</span>
                <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">}</span>   <span class="c1">// Shift index 0-2 forward</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input string: "</span> <span class="o">+</span> <span class="n">s1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected output: ace"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual output: "</span> <span class="o">+</span> <span class="n">shiftString</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">shifts1</span><span class="o">));</span>

        <span class="c1">// Test Case 2: Single character shifts</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"dztz"</span><span class="o">;</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">shifts2</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">},</span>  <span class="c1">// Shift first character backward</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">}</span>   <span class="c1">// Shift second character forward</span>
        <span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest Case 2:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Input string: "</span> <span class="o">+</span> <span class="n">s2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected output: catz"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual output: "</span> <span class="o">+</span> <span class="n">shiftString</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">shifts2</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni=1, or shift the characters backward if directioni=0. Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z'). Return the final string after all such shifts to s are applied.]]></summary></entry><entry><title type="html">732. My Calendar III</title><link href="https://zhengstar94.github.io//blog/2025/MyCalendarThree/" rel="alternate" type="text/html" title="732. My Calendar III"/><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MyCalendarThree</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MyCalendarThree/"><![CDATA[<ul> <li>A <code class="language-plaintext highlighter-rouge">k</code>-booking happens when <code class="language-plaintext highlighter-rouge">k</code> events have some non-empty intersection (i.e., there is some time that is common to all <code class="language-plaintext highlighter-rouge">k</code> events.)</li> <li>You are given some events <code class="language-plaintext highlighter-rouge">[startTime, endTime)</code>, after each given event, return an integer <code class="language-plaintext highlighter-rouge">k</code> representing the maximum <code class="language-plaintext highlighter-rouge">k</code>-booking between all the previous events.</li> <li>Implement the <code class="language-plaintext highlighter-rouge">MyCalendarThree</code> class: <ul> <li><code class="language-plaintext highlighter-rouge">MyCalendarThree()</code> Initializes the object.</li> <li><code class="language-plaintext highlighter-rouge">int book(int startTime, int endTime)</code> Returns an integer <code class="language-plaintext highlighter-rouge">k</code> representing the largest integer such that there exists a <code class="language-plaintext highlighter-rouge">k</code>-booking in the calendar.</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
["MyCalendarThree", "book", "book", "book", "book", "book", "book"]
[ [ ], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55 ] ]
Output
[null, 1, 1, 2, 3, 3, 3]

Explanation
MyCalendarThree myCalendarThree = new MyCalendarThree();
myCalendarThree.book(10, 20); // return 1
myCalendarThree.book(50, 60); // return 1
myCalendarThree.book(10, 40); // return 2
myCalendarThree.book(5, 15); // return 3
myCalendarThree.book(5, 10); // return 3
myCalendarThree.book(25, 55); // return 3
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Trees</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/02
 */</span>
<span class="kd">class</span> <span class="nc">MyCalendarThree</span> <span class="o">{</span>
    <span class="c1">// TreeMap to store time points and their corresponding event changes</span>
    <span class="kd">private</span> <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">timeline</span><span class="o">;</span>

    <span class="cm">/**
     * Initialize the calendar booking system
     */</span>
    <span class="kd">public</span> <span class="nf">MyCalendarThree</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">timeline</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="cm">/**
     * Books an event and returns the maximum number of overlapping events
     * @param startTime start time of the event
     * @param endTime end time of the event
     * @return maximum number of overlapping events (k-booking)
     */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">book</span><span class="o">(</span><span class="kt">int</span> <span class="n">startTime</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Increment booking count at start time</span>
        <span class="n">timeline</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">startTime</span><span class="o">,</span> <span class="n">timeline</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">startTime</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="c1">// Decrement booking count at end time</span>
        <span class="n">timeline</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">endTime</span><span class="o">,</span> <span class="n">timeline</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">endTime</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

        <span class="c1">// Track current number of ongoing events</span>
        <span class="kt">int</span> <span class="n">ongoing</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">// Track maximum overlapping events seen so far</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate through the sorted time points</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">change</span> <span class="o">:</span> <span class="n">timeline</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">ongoing</span> <span class="o">+=</span> <span class="n">change</span><span class="o">;</span>
            <span class="n">k</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">ongoing</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">k</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases</span>
        <span class="nc">MyCalendarThree</span> <span class="n">myCalendarThree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCalendarThree</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 1, Actual: "</span> <span class="o">+</span> <span class="n">myCalendarThree</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 1, Actual: "</span> <span class="o">+</span> <span class="n">myCalendarThree</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">50</span><span class="o">,</span> <span class="mi">60</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 2, Actual: "</span> <span class="o">+</span> <span class="n">myCalendarThree</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 3, Actual: "</span> <span class="o">+</span> <span class="n">myCalendarThree</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">15</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 3, Actual: "</span> <span class="o">+</span> <span class="n">myCalendarThree</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected: 3, Actual: "</span> <span class="o">+</span> <span class="n">myCalendarThree</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">25</span><span class="o">,</span> <span class="mi">55</span><span class="o">));</span>

        <span class="c1">// Additional test cases</span>
        <span class="nc">MyCalendarThree</span> <span class="n">calendar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCalendarThree</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nAdditional test cases:"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calendar2</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>  <span class="c1">// Returns 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calendar2</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>  <span class="c1">// Returns 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calendar2</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>  <span class="c1">// Returns 3</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Trees"/><category term="Hard"/><summary type="html"><![CDATA[A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.) You are given some events [startTime, endTime), after each given event, return an integer k representing the maximum k-booking between all the previous events. Implement the MyCalendarThree class: MyCalendarThree() Initializes the object. int book(int startTime, int endTime) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.]]></summary></entry><entry><title type="html">(Review)30. Substring with Concatenation of All Words</title><link href="https://zhengstar94.github.io//blog/2025/SubstringWithConcatenationOfAllWords/" rel="alternate" type="text/html" title="(Review)30. Substring with Concatenation of All Words"/><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/SubstringWithConcatenationOfAllWords</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/SubstringWithConcatenationOfAllWords/"><![CDATA[<ul> <li>You are given a string <code class="language-plaintext highlighter-rouge">s</code> and an array of strings <code class="language-plaintext highlighter-rouge">words</code>. All the strings of <code class="language-plaintext highlighter-rouge">words</code> are of <strong>the same length</strong>.</li> <li>A <strong>concatenated string</strong> is a string that exactly contains all the strings of any permutation of <code class="language-plaintext highlighter-rouge">words</code> concatenated. <ul> <li>For example, if <code class="language-plaintext highlighter-rouge">words = ["ab","cd","ef"]</code>, then <code class="language-plaintext highlighter-rouge">"abcdef"</code>, <code class="language-plaintext highlighter-rouge">"abefcd"</code>, <code class="language-plaintext highlighter-rouge">"cdabef"</code>, <code class="language-plaintext highlighter-rouge">"cdefab"</code>, <code class="language-plaintext highlighter-rouge">"efabcd"</code>, and <code class="language-plaintext highlighter-rouge">"efcdab"</code> are all concatenated strings. <code class="language-plaintext highlighter-rouge">"acdbef"</code> is not a concatenated string because it is not the concatenation of any permutation of <code class="language-plaintext highlighter-rouge">words</code>.</li> </ul> </li> <li>Return an array of <em>the starting indices</em> of all the concatenated substrings in <code class="language-plaintext highlighter-rouge">s</code>. You can return the answer in <strong>any order</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]

Explanation:

The substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation  of words.
The substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation  of words.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []

Explanation:

There is no concatenated substring.
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]
Output: [6,9,12]

Explanation:

The substring starting at 6 is "foobarthe". It is the concatenation of ["foo","bar","the"].
The substring starting at 9 is "barthefoo". It is the concatenation of ["bar","the","foo"].
The substring starting at 12 is "thefoobar". It is the concatenation of ["the","foo","bar"].
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(s.length()) time | O(words.length) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/04
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubstringWithConcatenationOfAllWords</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">findSubstring</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// List to store the final result, records the starting indices of substrings that meet the condition</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Basic input checks, return empty result if input is null or empty</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">words</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Get basic information</span>
        <span class="kt">int</span> <span class="n">wordLen</span> <span class="o">=</span> <span class="n">words</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">();</span>    <span class="c1">// Length of each word</span>
        <span class="kt">int</span> <span class="n">wordCount</span> <span class="o">=</span> <span class="n">words</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>       <span class="c1">// Total number of words</span>
        <span class="kt">int</span> <span class="n">totalLen</span> <span class="o">=</span> <span class="n">wordLen</span> <span class="o">*</span> <span class="n">wordCount</span><span class="o">;</span> <span class="c1">// Total length of all concatenated words</span>

        <span class="c1">// If the original string's length is smaller than the required total length, it can't match, return empty result</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">totalLen</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Step 1: Create a HashMap to count how many times each word should appear in the words array</span>
        <span class="c1">// Key is the word, value is how many times the word should appear</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">wordMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">wordMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">wordMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Step 2: Iterate over all possible starting positions</span>
        <span class="c1">// Since the length of each word is fixed, only need to iterate over wordLen offsets</span>
        <span class="c1">// For example, if the word length is 3, we only need to start from indices 0, 1, 2 to cover all possibilities</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wordLen</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>                              <span class="c1">// Left boundary of the sliding window</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>                            <span class="c1">// The number of matched words in the current window</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">curMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>  <span class="c1">// Count of words in the current window</span>

            <span class="c1">// Step 3: Use sliding window, each time move by one word length</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">wordLen</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">wordLen</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Get the word at the current position</span>
                <span class="nc">String</span> <span class="n">word</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">j</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">);</span>

                <span class="c1">// If the word is one of the target words (exists in the words array)</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">wordMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">word</span><span class="o">))</span> <span class="o">{</span>
                    <span class="c1">// Add the word to the count in the current window</span>
                    <span class="n">curMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="n">curMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">word</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                    <span class="n">count</span><span class="o">++;</span> <span class="c1">// Increase the number of matched words</span>

                    <span class="c1">// If the current word appears more than required, shrink the left boundary of the window</span>
                    <span class="c1">// Remove the leftmost word until the count of the current word is within the required limit</span>
                    <span class="k">while</span> <span class="o">(</span><span class="n">curMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">wordMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">))</span> <span class="o">{</span>
                        <span class="nc">String</span> <span class="n">leftWord</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">);</span>
                        <span class="n">curMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">leftWord</span><span class="o">,</span> <span class="n">curMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">leftWord</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                        <span class="n">count</span><span class="o">--;</span>
                        <span class="n">left</span> <span class="o">+=</span> <span class="n">wordLen</span><span class="o">;</span>
                    <span class="o">}</span>

                    <span class="c1">// If all words are found (matching the required count)</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">wordCount</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">left</span><span class="o">);</span> <span class="c1">// Add the current valid starting index to the result</span>

                        <span class="c1">// Remove the leftmost word and continue searching for the next match</span>
                        <span class="c1">// This allows finding all possible matching positions</span>
                        <span class="nc">String</span> <span class="n">leftWord</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">left</span><span class="o">,</span> <span class="n">left</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">);</span>
                        <span class="n">curMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">leftWord</span><span class="o">,</span> <span class="n">curMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">leftWord</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                        <span class="n">count</span><span class="o">--;</span>
                        <span class="n">left</span> <span class="o">+=</span> <span class="n">wordLen</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="c1">// If a word is encountered that is not in the target word list</span>
                    <span class="c1">// Reset all states and start matching from the next position</span>
                    <span class="n">curMap</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
                    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="n">left</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">wordLen</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1: Basic case</span>
        <span class="c1">// "barfoo" and "foobar" are valid substrings</span>
        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"barfoothefoobarman"</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words1</span> <span class="o">=</span> <span class="o">{</span><span class="s">"foo"</span><span class="o">,</span><span class="s">"bar"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">findSubstring</span><span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">words1</span><span class="o">));</span> <span class="c1">// Expected output: [0, 9]</span>

        <span class="c1">// Test case 2: Repeated characters</span>
        <span class="c1">// Test handling of repeated words</span>
        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"aaaaaaaa"</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"aa"</span><span class="o">,</span><span class="s">"aa"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">findSubstring</span><span class="o">(</span><span class="n">s2</span><span class="o">,</span> <span class="n">words2</span><span class="o">));</span>

        <span class="c1">// Test case 3: No matches</span>
        <span class="c1">// Test case where no matches are found</span>
        <span class="nc">String</span> <span class="n">s3</span> <span class="o">=</span> <span class="s">"wordgoodgoodgoodbestword"</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">words3</span> <span class="o">=</span> <span class="o">{</span><span class="s">"word"</span><span class="o">,</span><span class="s">"good"</span><span class="o">,</span><span class="s">"best"</span><span class="o">,</span><span class="s">"good"</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">findSubstring</span><span class="o">(</span><span class="n">s3</span><span class="o">,</span> <span class="n">words3</span><span class="o">));</span> <span class="c1">// Expected output: []</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Hard"/><category term="Review"/><summary type="html"><![CDATA[You are given a string s and an array of strings words. All the strings of words are of the same length. A concatenated string is a string that exactly contains all the strings of any permutation of words concatenated. For example, if words=["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated string because it is not the concatenation of any permutation of words. Return an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.]]></summary></entry><entry><title type="html">1930. Unique Length-3 Palindromic Subsequences</title><link href="https://zhengstar94.github.io//blog/2025/UniqueLength3PalindromicSubsequences/" rel="alternate" type="text/html" title="1930. Unique Length-3 Palindromic Subsequences"/><published>2025-01-04T00:00:00+00:00</published><updated>2025-01-04T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/UniqueLength3PalindromicSubsequences</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/UniqueLength3PalindromicSubsequences/"><![CDATA[<ul> <li>Given a string <code class="language-plaintext highlighter-rouge">s</code>, return <em>the number of <strong>unique palindromes of length three</strong> that are a <strong>subsequence</strong> of</em> <code class="language-plaintext highlighter-rouge">s</code>.</li> <li>Note that even if there are multiple ways to obtain the same subsequence, it is still only counted <strong>once</strong>.</li> <li>A <strong>palindrome</strong> is a string that reads the same forwards and backwards.</li> <li>A <strong>subsequence</strong> of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. <ul> <li>For example, <code class="language-plaintext highlighter-rouge">"ace"</code> is a subsequence of <code class="language-plaintext highlighter-rouge">"abcde"</code>.</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "adc"
Output: 0
Explanation: There are no palindromic subsequences of length 3 in "adc".
</code></pre></div></div> <p><strong>Example 3</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "bbcbaba"
Output: 4
Explanation: The 4 palindromic subsequences of length 3 are:
- "bbb" (subsequence of "bbcbaba")
- "bcb" (subsequence of "bbcbaba")
- "bab" (subsequence of "bbcbaba")
- "aba" (subsequence of "bbcbaba")
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.TwoPointer</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/04
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UniqueLength3PalindromicSubsequences</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">countPalindromicSubsequence</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Counter for unique palindromic subsequences</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// Iterate through all lowercase letters (a-z)</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Array to count occurrences of characters between two same letters</span>
            <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>

            <span class="c1">// Get current character and find its leftmost and rightmost positions</span>
            <span class="kt">char</span> <span class="n">index</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">i</span> <span class="o">+</span> <span class="sc">'a'</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>

            <span class="c1">// Count occurrences of each character between left and right positions</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">arr</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]</span> <span class="o">++;</span>
            <span class="o">}</span>

            <span class="c1">// Count unique characters between left and right positions</span>
            <span class="c1">// Each unique character forms a new palindromic subsequence</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">){</span>
                    <span class="n">num</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">num</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test case 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test case 1: aabca"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 3"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countPalindromicSubsequence</span><span class="o">(</span><span class="s">"aabca"</span><span class="o">));</span>

        <span class="c1">// Test case 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 2: adc"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 0"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countPalindromicSubsequence</span><span class="o">(</span><span class="s">"adc"</span><span class="o">));</span>

        <span class="c1">// Test case 3</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nTest case 3: bbcbaba"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 4"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countPalindromicSubsequence</span><span class="o">(</span><span class="s">"bbcbaba"</span><span class="o">));</span>

        <span class="c1">// Edge cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nEdge case 1: aa"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 0"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countPalindromicSubsequence</span><span class="o">(</span><span class="s">"aa"</span><span class="o">));</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nEdge case 2: aaaa"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Expected result: 1"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Actual result: "</span> <span class="o">+</span> <span class="n">countPalindromicSubsequence</span><span class="o">(</span><span class="s">"aaaa"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Two Pointers"/><category term="Medium"/><summary type="html"><![CDATA[Given a string s, return the number of unique palindromes of length three that are a subsequence of s. Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once. A palindrome is a string that reads the same forwards and backwards. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, "ace" is a subsequence of "abcde".]]></summary></entry><entry><title type="html">438. Find All Anagrams in a String</title><link href="https://zhengstar94.github.io//blog/2025/FindAllAnagramsInAString/" rel="alternate" type="text/html" title="438. Find All Anagrams in a String"/><published>2025-01-03T00:00:00+00:00</published><updated>2025-01-03T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/FindAllAnagramsInAString</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/FindAllAnagramsInAString/"><![CDATA[<ul> <li>Given two strings <code class="language-plaintext highlighter-rouge">s</code> and <code class="language-plaintext highlighter-rouge">p</code>, return an array of all the start indices of <code class="language-plaintext highlighter-rouge">p</code>’s anagrams in <code class="language-plaintext highlighter-rouge">s</code>. You may return the answer in <strong>any order</strong>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n + m) time | O(k) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.SlideWindow</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/03
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindAllAnagramsInAString</span> <span class="o">{</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">findAnagrams</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">,</span> <span class="nc">String</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Result list to store starting indices of anagrams</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">lenS</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">lenP</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="c1">// If the length of s is less than p, no anagrams are possible</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">lenS</span> <span class="o">&lt;</span> <span class="n">lenP</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Arrays to store the frequency of characters in p and the sliding window in s</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">countP</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">countWindow</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26</span><span class="o">];</span>

        <span class="c1">// Populate the frequency array for string p</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lenP</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">countP</span><span class="o">[</span><span class="n">p</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>
        <span class="o">}</span>

        <span class="c1">// Sliding window over string s</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lenS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="c1">// Add the current character to the sliding window</span>
            <span class="n">countWindow</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]++;</span>

            <span class="c1">// Check if the window size exceeds lenP</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">lenP</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If the character frequencies match, an anagram is found</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">countP</span><span class="o">,</span> <span class="n">countWindow</span><span class="o">))</span> <span class="o">{</span>
                    <span class="c1">// Add the starting index of the anagram to the result list</span>
                    <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">lenP</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="c1">// Remove the leftmost character from the sliding window</span>
                <span class="n">countWindow</span><span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">lenP</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="sc">'a'</span><span class="o">]--;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">matches</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">count1</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">count2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">count1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">count2</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findAnagrams</span><span class="o">(</span><span class="s">"cbaebabacd"</span><span class="o">,</span> <span class="s">"abc"</span><span class="o">));</span> <span class="c1">// Output: [0, 6]</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findAnagrams</span><span class="o">(</span><span class="s">"abab"</span><span class="o">,</span> <span class="s">"ab"</span><span class="o">));</span>        <span class="c1">// Output: [0, 1, 2]</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findAnagrams</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"a"</span><span class="o">));</span>            <span class="c1">// Output: [0]</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">findAnagrams</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"b"</span><span class="o">));</span>            <span class="c1">// Output: []</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode SlideWindow"/><category term="Medium"/><summary type="html"><![CDATA[Given two strings s and p, return an array of all the start indices of p’s anagrams in s. You may return the answer in any order.]]></summary></entry><entry><title type="html">731. My Calendar II</title><link href="https://zhengstar94.github.io//blog/2025/MyCalendarTwo/" rel="alternate" type="text/html" title="731. My Calendar II"/><published>2025-01-03T00:00:00+00:00</published><updated>2025-01-03T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/MyCalendarTwo</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/MyCalendarTwo/"><![CDATA[<ul> <li>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a <strong>triple booking</strong>.</li> <li>A <strong>triple booking</strong> happens when three events have some non-empty intersection (n.横断; 交叉;十字路口) (i.e., some moment is common to all the three events.).</li> <li>The event can be represented as a pair of integers <code class="language-plaintext highlighter-rouge">startTime</code> and <code class="language-plaintext highlighter-rouge">endTime</code> that represents a booking on the half-open interval <code class="language-plaintext highlighter-rouge">[startTime, endTime)</code>, the range of real numbers <code class="language-plaintext highlighter-rouge">x</code> such that <code class="language-plaintext highlighter-rouge">startTime &lt;= x &lt; endTime</code>.</li> <li>Implement the <code class="language-plaintext highlighter-rouge">MyCalendarTwo</code> class: <ul> <li><code class="language-plaintext highlighter-rouge">MyCalendarTwo()</code> Initializes the calendar object.</li> <li><code class="language-plaintext highlighter-rouge">boolean book(int startTime, int endTime)</code> Returns <code class="language-plaintext highlighter-rouge">true</code> if the event can be added to the calendar successfully without causing a <strong>triple booking</strong>. Otherwise, return <code class="language-plaintext highlighter-rouge">false</code> and do not add the event to the calendar.</li> </ul> </li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input
["MyCalendarTwo", "book", "book", "book", "book", "book", "book"]
[ [ ], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55 ] ]
Output
[null, true, true, true, false, true, true]

Explanation
MyCalendarTwo myCalendarTwo = new MyCalendarTwo();
myCalendarTwo.book(10, 20); // return True, The event can be booked. 
myCalendarTwo.book(50, 60); // return True, The event can be booked. 
myCalendarTwo.book(10, 40); // return True, The event can be double booked. 
myCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.
myCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.
myCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(n) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Trees</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/02
 */</span>
<span class="kd">class</span> <span class="nc">MyCalendarTwo</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">delta</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MyCalendarTwo</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">delta</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">book</span><span class="o">(</span><span class="kt">int</span> <span class="n">startTime</span><span class="o">,</span> <span class="kt">int</span> <span class="n">endTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Increment booking count at start time</span>
        <span class="n">delta</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">startTime</span><span class="o">,</span> <span class="n">delta</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">startTime</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="c1">// Decrement booking count at end time</span>
        <span class="n">delta</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">endTime</span><span class="o">,</span> <span class="n">delta</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">endTime</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">active</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Track the number of active bookings at current time point</span>

        <span class="c1">// Check if this would cause a triple booking</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">:</span> <span class="n">delta</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">active</span> <span class="o">+=</span> <span class="n">d</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">active</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// If triple booking would occur, rollback the operation</span>
                <span class="n">delta</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">startTime</span><span class="o">,</span> <span class="n">delta</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">startTime</span><span class="o">)</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">delta</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">startTime</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">delta</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">startTime</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">delta</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">endTime</span><span class="o">,</span> <span class="n">delta</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">endTime</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">delta</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">endTime</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">delta</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">endTime</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">printTreeMapState</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nCurrent TreeMap State:"</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">delta</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"Time point: %d -&gt; Change value: %d\n"</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Create calendar object</span>
        <span class="nc">MyCalendarTwo</span> <span class="n">calendar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCalendarTwo</span><span class="o">();</span>

        <span class="c1">// Test case 1: Examples from the problem</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=== Test Case 1 ==="</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [10, 20]: "</span> <span class="o">+</span> <span class="n">calendar</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
        <span class="n">calendar</span><span class="o">.</span><span class="na">printTreeMapState</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [50, 60]: "</span> <span class="o">+</span> <span class="n">calendar</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">50</span><span class="o">,</span> <span class="mi">60</span><span class="o">));</span>
        <span class="n">calendar</span><span class="o">.</span><span class="na">printTreeMapState</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [10, 40]: "</span> <span class="o">+</span> <span class="n">calendar</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">40</span><span class="o">));</span>
        <span class="n">calendar</span><span class="o">.</span><span class="na">printTreeMapState</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [5, 15]: "</span> <span class="o">+</span> <span class="n">calendar</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">15</span><span class="o">));</span>
        <span class="n">calendar</span><span class="o">.</span><span class="na">printTreeMapState</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [5, 10]: "</span> <span class="o">+</span> <span class="n">calendar</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
        <span class="n">calendar</span><span class="o">.</span><span class="na">printTreeMapState</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [25, 55]: "</span> <span class="o">+</span> <span class="n">calendar</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">25</span><span class="o">,</span> <span class="mi">55</span><span class="o">));</span>
        <span class="n">calendar</span><span class="o">.</span><span class="na">printTreeMapState</span><span class="o">();</span>

        <span class="c1">// Test case 2: Edge cases</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n=== Test Case 2 ==="</span><span class="o">);</span>
        <span class="nc">MyCalendarTwo</span> <span class="n">calendar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCalendarTwo</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [0, 1]: "</span> <span class="o">+</span> <span class="n">calendar2</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [0, 1]: "</span> <span class="o">+</span> <span class="n">calendar2</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [0, 1]: "</span> <span class="o">+</span> <span class="n">calendar2</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>  <span class="c1">// Should return false</span>

        <span class="c1">// Test case 3: Non-overlapping scenarios</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\n=== Test Case 3 ==="</span><span class="o">);</span>
        <span class="nc">MyCalendarTwo</span> <span class="n">calendar3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyCalendarTwo</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [0, 10]: "</span> <span class="o">+</span> <span class="n">calendar3</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [20, 30]: "</span> <span class="o">+</span> <span class="n">calendar3</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Book [40, 50]: "</span> <span class="o">+</span> <span class="n">calendar3</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="mi">40</span><span class="o">,</span> <span class="mi">50</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Trees"/><category term="Medium"/><summary type="html"><![CDATA[You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking. A triple booking happens when three events have some non-empty intersection (n.横断; 交叉;十字路口) (i.e., some moment is common to all the three events.). The event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime &lt;= x &lt; endTime. Implement the MyCalendarTwo class: MyCalendarTwo() Initializes the calendar object. boolean book(int startTime, int endTime) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.]]></summary></entry><entry><title type="html">2270. Number of Ways to Split Array</title><link href="https://zhengstar94.github.io//blog/2025/NumberOfWaysToSplitArray/" rel="alternate" type="text/html" title="2270. Number of Ways to Split Array"/><published>2025-01-03T00:00:00+00:00</published><updated>2025-01-03T00:00:00+00:00</updated><id>https://zhengstar94.github.io//blog/2025/NumberOfWaysToSplitArray</id><content type="html" xml:base="https://zhengstar94.github.io//blog/2025/NumberOfWaysToSplitArray/"><![CDATA[<ul> <li>You are given a <strong>0-indexed</strong> integer array <code class="language-plaintext highlighter-rouge">nums</code> of length <code class="language-plaintext highlighter-rouge">n</code>.</li> <li><code class="language-plaintext highlighter-rouge">nums</code> contains a <strong>valid split</strong> at index <code class="language-plaintext highlighter-rouge">i</code> if the following are true: <ul> <li>The sum of the first <code class="language-plaintext highlighter-rouge">i + 1</code> elements is <strong>greater than or equal to</strong> the sum of the last <code class="language-plaintext highlighter-rouge">n - i - 1</code> elements.</li> <li>There is <strong>at least one</strong> element to the right of <code class="language-plaintext highlighter-rouge">i</code>. That is, <code class="language-plaintext highlighter-rouge">0 &lt;= i &lt; n - 1</code>.</li> </ul> </li> <li>Return <em>the number of <strong>valid splits</strong> in</em> <code class="language-plaintext highlighter-rouge">nums</code>.</li> </ul> <p><strong>Example 1</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [10,4,-8,7]
Output: 2
Explanation: 
There are three ways of splitting nums into two non-empty parts:
- Split nums at index 0. Then, the first part is [10], and its sum is 10. The second part is [4,-8,7], and its sum is 3. Since 10 &gt;= 3, i = 0 is a valid split.
- Split nums at index 1. Then, the first part is [10,4], and its sum is 14. The second part is [-8,7], and its sum is -1. Since 14 &gt;= -1, i = 1 is a valid split.
- Split nums at index 2. Then, the first part is [10,4,-8], and its sum is 6. The second part is [7], and its sum is 7. Since 6 &lt; 7, i = 2 is not a valid split.
Thus, the number of valid splits in nums is 2.
</code></pre></div></div> <p><strong>Example 2</strong></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: nums = [2,3,1,0]
Output: 2
Explanation: 
There are two valid splits in nums:
- Split nums at index 1. Then, the first part is [2,3], and its sum is 5. The second part is [1,0], and its sum is 1. Since 5 &gt;= 1, i = 1 is a valid split. 
- Split nums at index 2. Then, the first part is [2,3,1], and its sum is 6. The second part is [0], and its sum is 0. Since 6 &gt;= 0, i = 2 is a valid split.
</code></pre></div></div> <h2 id="method-1">Method 1</h2> <div class="language-tex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>【O(n) time | O(1) space】
</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Leetcode.Array</span><span class="o">;</span>

<span class="cm">/**
 * @author zhengxingxing
 * @date 2025/01/03
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberOfWaysToSplitArray</span> <span class="o">{</span>
    <span class="cm">/**
     * Calculate the number of valid ways to split the array
     * @param nums input array
     * @return number of valid splits
     */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">waysToSplitArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">totalSum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// Use long to prevent integer overflow</span>
        <span class="kt">long</span> <span class="n">leftSum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// Sum of elements on the left side</span>
        <span class="kt">int</span> <span class="n">validSpilt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// Counter for valid splits</span>

        <span class="c1">// Calculate the total sum of the array</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">totalSum</span> <span class="o">+=</span> <span class="n">num</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// Iterate through potential split points</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  <span class="c1">// n-1 because we need at least one element on the right</span>
            <span class="n">leftSum</span> <span class="o">+=</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="kt">long</span> <span class="n">rightSum</span> <span class="o">=</span> <span class="n">totalSum</span> <span class="o">-</span> <span class="n">leftSum</span><span class="o">;</span>

            <span class="c1">// Check if current split is valid</span>
            <span class="k">if</span><span class="o">(</span><span class="n">leftSum</span> <span class="o">&gt;=</span> <span class="n">rightSum</span><span class="o">){</span>
                <span class="n">validSpilt</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">validSpilt</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Test Case 1: Basic case with positive and negative numbers</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums1</span> <span class="o">=</span> <span class="o">{</span><span class="mi">10</span><span class="o">,</span><span class="mi">4</span><span class="o">,-</span><span class="mi">8</span><span class="o">,</span><span class="mi">7</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 1: "</span> <span class="o">+</span> <span class="n">waysToSplitArray</span><span class="o">(</span><span class="n">nums1</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test Case 2: Array with all positive numbers</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums2</span> <span class="o">=</span> <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 2: "</span> <span class="o">+</span> <span class="n">waysToSplitArray</span><span class="o">(</span><span class="n">nums2</span><span class="o">));</span> <span class="c1">// Expected output: 2</span>

        <span class="c1">// Test Case 3: Edge case with large numbers and negative values</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums3</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1000000000</span><span class="o">,</span><span class="mi">1000000000</span><span class="o">,</span><span class="mi">1000000000</span><span class="o">,-</span><span class="mi">1000000000</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 3: "</span> <span class="o">+</span> <span class="n">waysToSplitArray</span><span class="o">(</span><span class="n">nums3</span><span class="o">));</span> <span class="c1">// Testing large numbers</span>

        <span class="c1">// Test Case 4: Boundary case with minimum length</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums4</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">};</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test Case 4: "</span> <span class="o">+</span> <span class="n">waysToSplitArray</span><span class="o">(</span><span class="n">nums4</span><span class="o">));</span> <span class="c1">// Testing minimum length</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="LeetCode Array"/><category term="Medium"/><summary type="html"><![CDATA[You are given a 0-indexed integer array nums of length n. nums contains a valid split at index i if the following are true: The sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements. There is at least one element to the right of i. That is, 0 &lt;= i &lt; n - 1. Return the number of valid splits in nums.]]></summary></entry></feed>